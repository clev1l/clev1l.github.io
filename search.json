[{"title":"tfcctf re wp","path":"/2024/08/06/tfcctf-re-wp/","content":"signal每个Handle函数里的字符拼起来 license1234567891011121314151617181920212223242526from string import printableenc1=list(map(ord,&quot;Xsl3BDxP&quot;))for i in range(8): enc1[i]^=0x33 if i%3==2: enc1[i]+=37 elif i%3==1: enc1[i]-=16 else: enc1[i]^=0x5apayload=bytes(enc1)+b&quot;-&quot;dic=&#123;&#125;for char in printable: if char.islower(): new_char = (ord(char) - 92) % 26 + ord(&#x27;a&#x27;) dic[new_char]=char elif char.isupper(): new_char = (ord(char) - 48) % 26 + ord(&#x27;A&#x27;) dic[new_char] = charfor i in &#x27;mzXaPLzR&#x27;: payload+=dic[ord(i)].encode()print(payload)from pwn import *p=remote(&quot;challs.tfcctf.com&quot;,31541)p.sendline(payload)print(p.recvall()) x8vm，硬跟 发现主要加密逻辑只有一个异或，找到比较处，用idapython写脚本拿flag 1234567891011121314151617181920212223242526272829303132from ida_hexrays import *from ida_dbg import *from idaapi import *from idautils import *from idc import *from ida_kernwin import *&#x27;&#x27;&#x27;自定义调试器钩子类&#x27;&#x27;&#x27;class dbg_hooks_t(ida_dbg.DBG_Hooks): &#x27;&#x27;&#x27;继承自父类DBG_Hooks&#x27;&#x27;&#x27; def init(self): ida_dbg.DBG_Hooks.init(self) def dbg_suspend_process(self): asm=GetDisasm(here()) if &quot;cmp&quot; in asm: print(chr(cpu.cl^get_byte(cpu.rsi+cpu.rax+0x401)),end=&quot;&quot;) else: cpu.al=1 continue_process()&#x27;&#x27;&#x27;安装/卸载钩子&#x27;&#x27;&#x27;if &#x27;tmp_dbg_hooks&#x27; not in dir(): tmp_dbg_hooks = dbg_hooks_t() tmp_dbg_hooks.hook() print(&#x27;[+] tmp dbg hook success&#x27;)else: tmp_dbg_hooks.unhook() del tmp_dbg_hooks print(&#x27;[+] tmp dbg unhook success&#x27;) VIRTUAL-REV自定义指令对寄存器进行操作 例如这里的STF对应的sub_1C40对应的异或操作，分析各个函数 要通过运算让寄存器的值满足下面条件，且每个指令只能用10次 慢慢凑就行了 123456789101112131415161718192021222324252627282930313233OAN laxMISZ lip,laxMISZ l0,laxSTF lax,lipRALK l0,laxRALK l2,laxSTF lax,lipRALK l0,laxRALK l2,laxSTF lax,lipRALK l2,laxOAN lipSTF lax,lipMAZ lipRALK l2,laxSTF lax,lipRALK l2,laxMISZ l3,l2MISZ l4,l2MAZ l3RALK l2,l0MISZ l1,l3MAZ l1MQZL l4,l0MQZL l4,l0OAN l4MISZ lax,l4RALK lax,laxMAZ laxMAZ laxMAZ laxXKA l0,laxFLG MCKNIGHTpyarmor逆向 网上找个bypass去混淆，然后pycdc反编译import sysimport lzmaFLAG_LEN = 17nums = [ 203, 99, 1, 219, 19, 54, 46, 170, 180, 120, 22, 249, 236, 87, 27, 223, 81, 252, 232, 66, 241, 61, 235, 40, 217, 74, 145, 196, 7, 131, 75, 56, 105, 134, 48, 49, 149, 127, 73, 65, 70, 45, 53, 121, 198, 193, 207, 138, 32, 0, 132, 122, 10, 210, 189, 44, 164, 25, 166, 195, 5, 47, 157, 20, 119, 247, 199, 97, 152, 14, 148, 124, 123, 36, 30, 76, 58, 192, 110, 178, 175, 202, 155, 23, 50, 168, 156, 106, 84, 186, 197, 95, 140, 79, 43, 15, 244, 125, 205, 3, 234, 212, 13, 182, 233, 255, 71, 163, 254, 150, 26, 90, 33, 109, 183, 37, 92, 248, 167, 9, 173, 91, 107, 133, 253, 88, 31, 220, 153, 83, 55, 141, 62, 101, 28, 242, 112, 52, 89, 6, 17, 135, 211, 181, 39, 208, 209, 85, 158, 69, 137, 229, 93, 231, 226, 41, 114, 42, 215, 108, 68, 77, 18, 177, 246, 191, 64, 86, 190, 218, 102, 185, 160, 142, 172, 171, 237, 238, 245, 59, 146, 213, 151, 113, 139, 144, 230, 143, 98, 8, 194, 29, 221, 115, 34, 82, 11, 57, 78, 214, 12, 80, 251, 111, 184, 162, 224, 201, 4, 206, 204, 227, 38, 169, 130, 67, 116, 128, 35, 187, 51, 216, 126, 96, 147, 72, 100, 174, 103, 118, 239, 161, 188, 129, 240, 222, 16, 24, 243, 228, 165, 2, 200, 225, 104, 60, 21, 159, 117, 94, 176, 154, 250, 63, 179, 136]def generator(cnt): coeffs = [] for i in range(cnt): aux = [] for j in range(cnt): aux.append(nums[(i + j) * 1337 % 256]) coeffs.append(aux) return coeffscoeffs = generator(FLAG_LEN)def calc_line(k, password): rez = 0 for i in range(len(password)): rez += password[i] * coeffs[k][i] return rezdef hash(password): password = password.encode() rez = [] for i in range(FLAG_LEN): rez.append(calc_line(i, password)) final = [] for k in range(FLAG_LEN): aux = 0 for i in range(FLAG_LEN): aux += coeffs[i][i] * rez[k] ** i final.append(aux) data = &#x27;X&#x27;.join((lambda .0: [ str(i) for i in .0 ])(final)) data = lzma.compress(data.encode()) return datadef protect_pytransform(): passprotect_pytransform()if __name__ == &#x27;__main__&#x27;: if len(sys.argv) != 2: print(&#x27;Usage: python3 hasher.py &lt;password&gt;&#x27;) sys.exit(1) password = sys.argv[1] f = open(&#x27;flag.tfc&#x27;, &#x27;wb&#x27;) f.write(hash(password)) f.close() return None 直接二分爆破+z3求解就行 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768from z3 import *import hashlibcoeffs = [ [203, 25, 183, 185, 103, 131, 156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39], [25, 183, 185, 103, 131, 156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80], [183, 185, 103, 131, 156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1], [185, 103, 131, 156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195], [103, 131, 156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92], [131, 156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142], [156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239], [181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56], [12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84], [99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208], [166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251], [37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251, 219], [160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251, 219, 5], [118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251, 219, 5, 248], [75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251, 219, 5, 248, 172], [106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251, 219, 5, 248, 172, 161], [39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251, 219, 5, 248, 172, 161, 105]]def crack(data,low=0,high=10000000): mid=(low+high)//2 aux = 0 for i in range(17): aux += coeffs[i][i] * mid ** i if aux==data: return mid elif aux&lt;data: return crack(data,mid,high) else: return crack(data, low, mid)final=[241145859875641838375568265700583468186829263398544757708098347348022022884360837485710, 242902687900260771861607054566947611547896250791705390091915540312199710379559572931505, 118804805583829233872261635093267780736313101343997285490553624486731758902902725780401, 26070700698055451690987757334500139286748700065539668546268641839116937214184857128560, 80124267409396931019414660969297677614518733024335683050341802246590458710526430494155, 69120093458515678156299924155147567260652620409495938721703127474659623787444019635686, 55990617663721070662940577545659770939418406539539326788876102491498967285130967281128, 84978787096451983698491441429950667741555633384940077658282672091443454996648064495511, 23759403351528619406080196311716538538008953312734989705067168926356756839659089725251, 86486490836619119777078113830956983553852469753831999233377245135427130463065664874858, 369155978954842380984597693623469879860148040186483282201761309305365061575611768747298, 1078465608243324842613424723393406987749733612082372832634987529158514755913320850268491, 1005551112473893284689270925024882424646208832128726137262652596080759048126971564689305, 1441265309598955239402339668269380825497187261329350217287260241765013222531063230035525, 2537021592764940720429409315492500096108026182936387769778443082968491519197197436386270, 2323164916211382753227121606965322254296382499455840500352915151579032530394385955313501, 5180002787948231428431978908861257938675855102999849262356280617225584933954485735013570]target_rez=[crack(i) for i in final]x=Solver()password=[Int(&#x27;%d&#x27; % i) for i in range(17)]nums = [203,99,1,219,19,54,46,170,180,120,22,249,236,87,27,223,81,252,232,66,241,61,235,40,217,74,145,196,7,131,75,56,105,134,48,49,149,127,73,65,70,45,53,121,198,193,207,138,32,0,132,122,10,210,189,44,164,25,166,195,5,47,157,20,119,247,199,97,152,14,148,124,123,36,30,76,58,192,110,178,175,202,155,23,50,168,156,106,84,186,197,95,140,79,43,15,244,125,205,3,234,212,13,182,233,255,71,163,254,150,26,90,33,109,183,37,92,248,167,9,173,91,107,133,253,88,31,220,153,83,55,141,62,101,28,242,112,52,89,6,17,135,211,181,39,208,209,85,158,69,137,229,93,231,226,41,114,42,215,108,68,77,18,177,246,191,64,86,190,218,102,185,160,142,172,171,237,238,245,59,146,213,151,113,139,144,230,143,98,8,194,29,221,115,34,82,11,57,78,214,12,80,251,111,184,162,224,201,4,206,204,227,38,169,130,67,116,128,35,187,51,216,126,96,147,72,100,174,103,118,239,161,188,129,240,222,16,24,243,228,165,2,200,225,104,60,21,159,117,94,176,154,250,63,179,136]def generator(cnt): coeffs = [] for i in range(cnt): aux = [] for j in range(cnt): aux.append(nums[(i + j) * 1337 % 256]) coeffs.append(aux) return coeffsrez = []for k in range(17): rezi=0 for i in range(len(password)): rezi += password[i] * coeffs[k][i] rez.append(rezi)for i in range(17): x.add(rez[i]==target_rez[i])def getdigest(content): return hashlib.sha256(str(content).encode(&#x27;utf-8&#x27;)).hexdigest()if x.check()==sat: ans=[] model = x.model() for i in range(17): ans.append(model[password[i]].as_long().real) print(&quot;TFCCTF&#123;&quot;+getdigest(&quot;&quot;.join(map(chr,ans)))+&quot;&#125;&quot;)else: print(&quot;notfound&quot;) BRAVE TRAVELERbfs，更改bfs起点就行 1234567891011121314import subprocessfile = &quot;travel&quot;data=list(open(file,&quot;rb&quot;).read())addr=0x13bebase=&quot;&quot;test=&quot;._oiddleolk&#123;aTF_a5gd_55sQ&quot;for i in test: data[addr]=ord(i) open(file,&quot;wb&quot;).write(bytes(data)) found=False process = subprocess.Popen([file], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) output, error = process.communicate() s = output.decode(&#x27;gbk&#x27;) print(s) FUNCTIONAL函数式编程haskell逆向，用hsdecomp进行反编译，然后再看吧，hsdecomp配不好，东西太久了找不到文章了，逆天"},{"title":"deadctf re wp","path":"/2024/08/06/deadctf-re-wp/","content":"JavaCPScript通过测试发现每一位加密独立，在下图位置插入语句打印加密后的结果，直接爆破，2h爆出来 12345678910111213141516171819202122232425import subprocessfrom string import ascii_letters,digits,ascii_uppercase,ascii_lowercasefrom tqdm import tqdmenc=[3895813, 3893664,3895583,3893639,3919755,3893694,3871506,3871544,3810527,3921672,3913158,3813122,3869603,3813209,3910936,3911023,3896081,3822626,3913160,3919793,3822653,3895614,3820987,3820987,3932159,3911025,3893657,3921671,3820578,3921709,3921698,3910918,]sign=[0]*32dic=&#x27;&#x27;&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#123;|&#125;-_!&quot;#$%&amp;&#x27;()*+,-.&lt;=&gt;?@[\\]^_`~&#x27;&#x27;&#x27;command = &#x27;node --stack-size=1000000000 main.js&#x27;base=&quot;*&quot;*32for j in tqdm(dic): trydata=base.replace(&quot;*&quot;,j) print(&quot;[!]try:&quot;+trydata) open(&quot;input&quot;,&quot;w&quot;).write(trydata) result = subprocess.run(command, shell=True, text=True, capture_output=True) out=result.stdout.strip(&quot; &quot;).split(&quot; &quot;) data=[eval(i) for i in out][::-1] print(data) for k in range(len(enc)): if enc[k]==data[k] and sign[k]==0: sign[k] = 1 base=base[:k]+j+base[k+1:] if sum(sign)==len(sign): print(&quot;[+]found flag:&quot;,base) exit() else: print(&quot;[!]not found:&quot;,sign.count(0)) FlagChecker解包后查看so，大致可以看出为一个虚拟机 每个执行操作的地方打断点 …… 用脚本打印信息，输入测试flag：DEAD{run_pybyt3c0d3_w1th_C_4P1!}，这里测试的flag就是真的flag，可以拿任意符合格式flag进行测试 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758from ida_hexrays import *from ida_dbg import *from idaapi import *from idautils import *from idc import *from ida_kernwin import *def rol(val, r_bits, max_bits=64): &quot;&quot;&quot;循环左移操作&quot;&quot;&quot; return ((val &lt;&lt; r_bits) &amp; (2**max_bits - 1)) | (val &gt;&gt; (max_bits - r_bits))def ror(val, r_bits, max_bits=64): &quot;&quot;&quot;循环右移操作&quot;&quot;&quot; return (val &gt;&gt; r_bits) | ((val &lt;&lt; (max_bits - r_bits)) &amp; (2**max_bits - 1))&#x27;&#x27;&#x27;自定义调试器钩子类&#x27;&#x27;&#x27;class dbg_hooks_t(ida_dbg.DBG_Hooks): &#x27;&#x27;&#x27;继承自父类DBG_Hooks&#x27;&#x27;&#x27; def __init__(self): ida_dbg.DBG_Hooks.__init__(self) def dbg_suspend_process(self): if here()!=0x7f37e8fd5b3c: op=idc.GetDisasm(here()) tmp=&quot;&quot;.join(op.split()[1:]).split(&quot;,&quot;) op=op.split()[0] ip1=eval(&quot;cpu.&quot;+tmp[0].strip()) ip2 =eval(&quot;cpu.&quot;+tmp[1].strip()) result=0 if op==&quot;add&quot;: result=ip1+ip2 if op==&quot;xor&quot;: result=ip1^ip2 if op==&quot;sub&quot;: result=(ip1-ip2)&amp;0xffffffffffffffff if op==&quot;shl&quot;: result=(ip1&lt;&lt;ip2)&amp;0xffffffffffffffff if op==&quot;shr&quot;: result=(ip1&gt;&gt;ip2)&amp;0xffffffffffffffff if op==&quot;rol&quot;: result=rol(ip1,ip2)&amp;0xffffffffffffffff if op==&quot;ror&quot;: result=ror(ip1,ip2)&amp;0xffffffffffffffff print(&quot;&#123;&#125; &#123;&#125;, &#123;&#125; result=&#123;&#125;&quot;.format(op,hex(ip1),hex(ip2),hex(result))) continue_process()&#x27;&#x27;&#x27;安装/卸载钩子&#x27;&#x27;&#x27;if &#x27;tmp_dbg_hooks&#x27; not in dir(): tmp_dbg_hooks = dbg_hooks_t() tmp_dbg_hooks.hook() print(&#x27;[+] tmp dbg hook success&#x27;)else: tmp_dbg_hooks.unhook() del tmp_dbg_hooks print(&#x27;[+] tmp dbg unhook success&#x27;) 拿到调试信息加密逻辑分为两段 第一段xor 0x0, 0x0 result=0x0xor 0x0, 0x0 result=0x0xor 0x0, 0x0 result=0x0add 0x0, 0x6e75727b44414544 result=0x6e75727b44414544add 0x0, 0x6e75727b44414544 result=0x6e75727b44414544and 0x6e75727b44414544, 0xff result=0x0xor 0x44, 0x28 result=0x6cxor 0x0, 0x6c result=0x6cshl 0x6c, 0x8 result=0x6c00shr 0x6e75727b44414544, 0x8 result=0x6e75727b444145xor 0x6c, 0x6c result=0x0add 0x0, 0x6e75727b444145 result=0x6e75727b444145and 0x6e75727b444145, 0xff result=0x0xor 0x45, 0xb1 result=0xf4xor 0x6c00, 0xf4 result=0x6cf4shl 0x6cf4, 0x8 result=0x6cf400shr 0x6e75727b444145, 0x8 result=0x6e75727b4441xor 0xf4, 0xf4 result=0x0add 0x0, 0x6e75727b4441 result=0x6e75727b4441and 0x6e75727b4441, 0xff result=0x0xor 0x41, 0x61 result=0x20xor 0x6cf400, 0x20 result=0x6cf420shl 0x6cf420, 0x8 result=0x6cf42000shr 0x6e75727b4441, 0x8 result=0x6e75727b44xor 0x20, 0x20 result=0x0add 0x0, 0x6e75727b44 result=0x6e75727b44and 0x6e75727b44, 0xff result=0x0xor 0x44, 0x6e result=0x2axor 0x6cf42000, 0x2a result=0x6cf4202ashl 0x6cf4202a, 0x8 result=0x6cf4202a00shr 0x6e75727b44, 0x8 result=0x6e75727bxor 0x2a, 0x2a result=0x0add 0x0, 0x6e75727b result=0x6e75727band 0x6e75727b, 0xff result=0x0xor 0x7b, 0x3 result=0x78xor 0x6cf4202a00, 0x78 result=0x6cf4202a78shl 0x6cf4202a78, 0x8 result=0x6cf4202a7800shr 0x6e75727b, 0x8 result=0x6e7572xor 0x78, 0x78 result=0x0add 0x0, 0x6e7572 result=0x6e7572and 0x6e7572, 0xff result=0x0xor 0x72, 0x8c result=0xfexor 0x6cf4202a7800, 0xfe result=0x6cf4202a78feshl 0x6cf4202a78fe, 0x8 result=0x6cf4202a78fe00shr 0x6e7572, 0x8 result=0x6e75xor 0xfe, 0xfe result=0x0add 0x0, 0x6e75 result=0x6e75and 0x6e75, 0xff result=0x0xor 0x75, 0x55 result=0x20xor 0x6cf4202a78fe00, 0x20 result=0x6cf4202a78fe20shl 0x6cf4202a78fe20, 0x8 result=0x6cf4202a78fe2000shr 0x6e75, 0x8 result=0x6exor 0x20, 0x20 result=0x0add 0x0, 0x6e result=0x6eand 0x6e, 0xff result=0x0xor 0x6e, 0x33 result=0x5dxor 0x6cf4202a78fe2000, 0x5d result=0x6cf4202a78fe205dxor 0x6e75727b44414544, 0x6e75727b44414544 result=0x0add 0x0, 0x6cf4202a78fe205d result=0x6cf4202a78fe205dxor 0x6e, 0x6e result=0x0xor 0x5d, 0x5d result=0x0xor 0x6cf4202a78fe205d, 0x6cf4202a78fe205d result=0x0add 0x0, 0x633374796279705f result=0x633374796279705fadd 0x0, 0x633374796279705f result=0x633374796279705fand 0x633374796279705f, 0xff result=0x0xor 0x5f, 0xca result=0x95xor 0x0, 0x95 result=0x95shl 0x95, 0x8 result=0x9500shr 0x633374796279705f, 0x8 result=0x63337479627970xor 0x95, 0x95 result=0x0add 0x0, 0x63337479627970 result=0x63337479627970and 0x63337479627970, 0xff result=0x0xor 0x70, 0x5a result=0x2axor 0x9500, 0x2a result=0x952ashl 0x952a, 0x8 result=0x952a00shr 0x63337479627970, 0x8 result=0x633374796279xor 0x2a, 0x2a result=0x0add 0x0, 0x633374796279 result=0x633374796279and 0x633374796279, 0xff result=0x0xor 0x79, 0xbd result=0xc4xor 0x952a00, 0xc4 result=0x952ac4shl 0x952ac4, 0x8 result=0x952ac400shr 0x633374796279, 0x8 result=0x6333747962xor 0xc4, 0xc4 result=0x0add 0x0, 0x6333747962 result=0x6333747962and 0x6333747962, 0xff result=0x0xor 0x62, 0xa3 result=0xc1xor 0x952ac400, 0xc1 result=0x952ac4c1shl 0x952ac4c1, 0x8 result=0x952ac4c100shr 0x6333747962, 0x8 result=0x63337479xor 0xc1, 0xc1 result=0x0add 0x0, 0x63337479 result=0x63337479and 0x63337479, 0xff result=0x0xor 0x79, 0x8a result=0xf3xor 0x952ac4c100, 0xf3 result=0x952ac4c1f3shl 0x952ac4c1f3, 0x8 result=0x952ac4c1f300shr 0x63337479, 0x8 result=0x633374xor 0xf3, 0xf3 result=0x0add 0x0, 0x633374 result=0x633374and 0x633374, 0xff result=0x0xor 0x74, 0xce result=0xbaxor 0x952ac4c1f300, 0xba result=0x952ac4c1f3bashl 0x952ac4c1f3ba, 0x8 result=0x952ac4c1f3ba00shr 0x633374, 0x8 result=0x6333xor 0xba, 0xba result=0x0add 0x0, 0x6333 result=0x6333and 0x6333, 0xff result=0x0xor 0x33, 0xa3 result=0x90xor 0x952ac4c1f3ba00, 0x90 result=0x952ac4c1f3ba90shl 0x952ac4c1f3ba90, 0x8 result=0x952ac4c1f3ba9000shr 0x6333, 0x8 result=0x63xor 0x90, 0x90 result=0x0add 0x0, 0x63 result=0x63and 0x63, 0xff result=0x0xor 0x63, 0x85 result=0xe6xor 0x952ac4c1f3ba9000, 0xe6 result=0x952ac4c1f3ba90e6xor 0x633374796279705f, 0x633374796279705f result=0x0add 0x0, 0x952ac4c1f3ba90e6 result=0x952ac4c1f3ba90e6xor 0x63, 0x63 result=0x0xor 0xe6, 0xe6 result=0x0xor 0x952ac4c1f3ba90e6, 0x952ac4c1f3ba90e6 result=0x0add 0x0, 0x687431775f336430 result=0x687431775f336430add 0x0, 0x687431775f336430 result=0x687431775f336430and 0x687431775f336430, 0xff result=0x0xor 0x30, 0x57 result=0x67xor 0x0, 0x67 result=0x67shl 0x67, 0x8 result=0x6700shr 0x687431775f336430, 0x8 result=0x687431775f3364xor 0x67, 0x67 result=0x0add 0x0, 0x687431775f3364 result=0x687431775f3364and 0x687431775f3364, 0xff result=0x0xor 0x64, 0x13 result=0x77xor 0x6700, 0x77 result=0x6777shl 0x6777, 0x8 result=0x677700shr 0x687431775f3364, 0x8 result=0x687431775f33xor 0x77, 0x77 result=0x0add 0x0, 0x687431775f33 result=0x687431775f33and 0x687431775f33, 0xff result=0x0xor 0x33, 0xee result=0xddxor 0x677700, 0xdd result=0x6777ddshl 0x6777dd, 0x8 result=0x6777dd00shr 0x687431775f33, 0x8 result=0x687431775fxor 0xdd, 0xdd result=0x0add 0x0, 0x687431775f result=0x687431775fand 0x687431775f, 0xff result=0x0xor 0x5f, 0x2f result=0x70xor 0x6777dd00, 0x70 result=0x6777dd70shl 0x6777dd70, 0x8 result=0x6777dd7000shr 0x687431775f, 0x8 result=0x68743177xor 0x70, 0x70 result=0x0add 0x0, 0x68743177 result=0x68743177and 0x68743177, 0xff result=0x0xor 0x77, 0x5d result=0x2axor 0x6777dd7000, 0x2a result=0x6777dd702ashl 0x6777dd702a, 0x8 result=0x6777dd702a00shr 0x68743177, 0x8 result=0x687431xor 0x2a, 0x2a result=0x0add 0x0, 0x687431 result=0x687431and 0x687431, 0xff result=0x0xor 0x31, 0xd8 result=0xe9xor 0x6777dd702a00, 0xe9 result=0x6777dd702ae9shl 0x6777dd702ae9, 0x8 result=0x6777dd702ae900shr 0x687431, 0x8 result=0x6874xor 0xe9, 0xe9 result=0x0add 0x0, 0x6874 result=0x6874and 0x6874, 0xff result=0x0xor 0x74, 0x96 result=0xe2xor 0x6777dd702ae900, 0xe2 result=0x6777dd702ae9e2shl 0x6777dd702ae9e2, 0x8 result=0x6777dd702ae9e200shr 0x6874, 0x8 result=0x68xor 0xe2, 0xe2 result=0x0add 0x0, 0x68 result=0x68and 0x68, 0xff result=0x0xor 0x68, 0xfd result=0x95xor 0x6777dd702ae9e200, 0x95 result=0x6777dd702ae9e295xor 0x687431775f336430, 0x687431775f336430 result=0x0add 0x0, 0x6777dd702ae9e295 result=0x6777dd702ae9e295xor 0x68, 0x68 result=0x0xor 0x95, 0x95 result=0x0xor 0x6777dd702ae9e295, 0x6777dd702ae9e295 result=0x0add 0x0, 0x7d213150345f435f result=0x7d213150345f435fadd 0x0, 0x7d213150345f435f result=0x7d213150345f435fand 0x7d213150345f435f, 0xff result=0x0xor 0x5f, 0x73 result=0x2cxor 0x0, 0x2c result=0x2cshl 0x2c, 0x8 result=0x2c00shr 0x7d213150345f435f, 0x8 result=0x7d213150345f43xor 0x2c, 0x2c result=0x0add 0x0, 0x7d213150345f43 result=0x7d213150345f43and 0x7d213150345f43, 0xff result=0x0xor 0x43, 0x8c result=0xcfxor 0x2c00, 0xcf result=0x2ccfshl 0x2ccf, 0x8 result=0x2ccf00shr 0x7d213150345f43, 0x8 result=0x7d213150345fxor 0xcf, 0xcf result=0x0add 0x0, 0x7d213150345f result=0x7d213150345fand 0x7d213150345f, 0xff result=0x0xor 0x5f, 0x7b result=0x24xor 0x2ccf00, 0x24 result=0x2ccf24shl 0x2ccf24, 0x8 result=0x2ccf2400shr 0x7d213150345f, 0x8 result=0x7d21315034xor 0x24, 0x24 result=0x0add 0x0, 0x7d21315034 result=0x7d21315034and 0x7d21315034, 0xff result=0x0xor 0x34, 0xfb result=0xcfxor 0x2ccf2400, 0xcf result=0x2ccf24cfshl 0x2ccf24cf, 0x8 result=0x2ccf24cf00shr 0x7d21315034, 0x8 result=0x7d213150xor 0xcf, 0xcf result=0x0add 0x0, 0x7d213150 result=0x7d213150and 0x7d213150, 0xff result=0x0xor 0x50, 0xae result=0xfexor 0x2ccf24cf00, 0xfe result=0x2ccf24cffeshl 0x2ccf24cffe, 0x8 result=0x2ccf24cffe00shr 0x7d213150, 0x8 result=0x7d2131xor 0xfe, 0xfe result=0x0add 0x0, 0x7d2131 result=0x7d2131and 0x7d2131, 0xff result=0x0xor 0x31, 0xd9 result=0xe8xor 0x2ccf24cffe00, 0xe8 result=0x2ccf24cffee8shl 0x2ccf24cffee8, 0x8 result=0x2ccf24cffee800shr 0x7d2131, 0x8 result=0x7d21xor 0xe8, 0xe8 result=0x0add 0x0, 0x7d21 result=0x7d21and 0x7d21, 0xff result=0x0xor 0x21, 0xa7 result=0x86xor 0x2ccf24cffee800, 0x86 result=0x2ccf24cffee886shl 0x2ccf24cffee886, 0x8 result=0x2ccf24cffee88600shr 0x7d21, 0x8 result=0x7dxor 0x86, 0x86 result=0x0add 0x0, 0x7d result=0x7dand 0x7d, 0xff result=0x0xor 0x7d, 0x75 result=0x8xor 0x2ccf24cffee88600, 0x8 result=0x2ccf24cffee88608xor 0x7d213150345f435f, 0x7d213150345f435f result=0x0add 0x0, 0x2ccf24cffee88608 result=0x2ccf24cffee88608 不难看出只是个异或逻辑，还原一下算法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758def process(inputs): # 输入的四个64位数 num1 = inputs[0] num2 = inputs[1] num3 = inputs[2] num4 = inputs[3] # 初始化一些变量 result = 0 temp1 = num1 temp2 = num2 temp3 = num3 temp4 = num4 data = [0x28, 0xb1, 0x61, 0x6e, 0x3, 0x8c, 0x55, 0x33, 0xca, 0x5a, 0xbd, 0xa3, 0x8a, 0xce, 0xa3, 0x85, 0x57, 0x13, 0xee, 0x2f, 0x5d, 0xd8, 0x96, 0xfd, 0x73, 0x8c, 0x7b, 0xfb, 0xae, 0xd9, 0xa7, 0x75] results=[] # 对第一个数进行处理 for i in range(8): byte = temp1 &amp; 0xff temp1 &gt;&gt;= 8 xor_result = byte ^ data[0+i] result = (result &lt;&lt; 8) | xor_result results.append(result) result = 0 # 对第二个数进行处理 for i in range(8): byte = temp2 &amp; 0xff temp2 &gt;&gt;= 8 xor_result = byte ^ data[1+i] result = (result &lt;&lt; 8) | xor_result results.append(result) result = 0 # 对第三个数进行处理 for i in range(8): byte = temp3 &amp; 0xff temp3 &gt;&gt;= 8 xor_result = byte ^ data[2+i] result = (result &lt;&lt; 8) | xor_result results.append(result) result = 0 # 对第四个数进行处理 for i in range(8): byte = temp4 &amp; 0xff temp4 &gt;&gt;= 8 xor_result = byte ^ data[3+i] result = (result &lt;&lt; 8) | xor_result results.append(result) return results# 示例输入input=list(map(ord,&quot;DEAD&#123;run_pybyt3c0d3_w1th_C_4P1!&#125;&quot;))input=[int.from_bytes(input[i:i+8],&quot;little&quot;) for i in range(0,len(input),8)]output = process(input)for i in output: print(hex(i)) 第二段123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168sub 0x2ccf24cffee88608, 0x952ac4c1f3ba90e6 result=0x97a4600e0b2df522sub 0x6777dd702ae9e295, 0xa5b577c2fb57f719 result=0xc1c265ad2f91eb7csub 0x6cf4202a78fe205d, 0x97a4600e0b2df522 result=0xd54fc01c6dd02b3badd 0xd54fc01c6dd02b3b, 0x92bfddfec2f52f3b result=0x1680f9e1b30c55a76xor 0xc1c265ad2f91eb7c, 0xcadc9ba99a2ae444 result=0xb1efe04b5bb0f38sub 0x97a4600e0b2df522, 0x37e4241df14718d result=0x94261dcc2c198395xor 0x94261dcc2c198395, 0x952ac4c1f3ba90e6 result=0x10cd90ddfa31373rol 0x10cd90ddfa31373, 0x2d result=0x626e60219b21bbf4sub 0x626e60219b21bbf4, 0x680f9e1b30c55a76 result=0xfa5ec2066a5c617exor 0xb1efe04b5bb0f38, 0xa324444e39c3e7e7 result=0xa83aba4a8c78e8dfror 0x680f9e1b30c55a76, 0x2c result=0xe1b30c55a76680f9ror 0x952ac4c1f3ba90e6, 0x9 result=0x734a956260f9dd48sub 0xe1b30c55a76680f9, 0xa83aba4a8c78e8df result=0x3978520b1aed981aadd 0x734a956260f9dd48, 0xa83aba4a8c78e8df result=0x11b854faced72c627ror 0x1b854faced72c627, 0x34 result=0x54faced72c6271b8sub 0xa83aba4a8c78e8df, 0x5350ea4003b419e1 result=0x54e9d00a88c4cefesub 0xfa5ec2066a5c617e, 0x54faced72c6271b8 result=0xa563f32f3df9efc6add 0xa563f32f3df9efc6, 0x54e9d00a88c4cefe result=0xfa4dc339c6bebec4xor 0xfa4dc339c6bebec4, 0x7d27118487b24a4c result=0x876ad2bd410cf488rol 0x54e9d00a88c4cefe, 0x26 result=0x3133bf953a7402a2sub 0x876ad2bd410cf488, 0x3978520b1aed981a result=0x4df280b2261f5c6exor 0x54faced72c6271b8, 0xb948cbbf8c616936 result=0xedb20568a003188eror 0xedb20568a003188e, 0x3c result=0xdb20568a003188eerol 0x3978520b1aed981a, 0x39 result=0x3472f0a41635db30xor 0x3472f0a41635db30, 0x8c27c187b5925ea7 result=0xb8553123a3a78597sub 0xb8553123a3a78597, 0x4df280b2261f5c6e result=0x6a62b0717d882929add 0xdb20568a003188ee, 0x6a62b0717d882929 result=0x1458306fb7db9b217sub 0x3133bf953a7402a2, 0x6011664a1feadd72 result=0xd122594b1a892530sub 0x4df280b2261f5c6e, 0xc6b76b35dc565f4b result=0x873b157c49c8fd23rol 0x6a62b0717d882929, 0x3a result=0xa5a98ac1c5f620a4ror 0x458306fb7db9b217, 0x38 result=0x8306fb7db9b21745xor 0xd122594b1a892530, 0x873b157c49c8fd23 result=0x56194c375341d813xor 0x56194c375341d813, 0x5d13d65e4a7935dd result=0xb0a9a691938edcexor 0xa5a98ac1c5f620a4, 0xb0a9a691938edce result=0xaea310a8dccecd6arol 0x873b157c49c8fd23, 0x1e result=0x12723f48e1cec55fxor 0xb0a9a691938edce, 0x78f00494b1fd4117 result=0x73fa9efda8c5acd9add 0x73fa9efda8c5acd9, 0xaea310a8dccecd6a result=0x1229dafa685947a43xor 0x8306fb7db9b21745, 0xaea310a8dccecd6a result=0x2da5ebd5657cda2frol 0x2da5ebd5657cda2f, 0xd result=0xbd7aacaf9b45e5b4sub 0xbd7aacaf9b45e5b4, 0x15a37cdf4f1c5ece result=0xa7d72fd04c2986e6rol 0x12723f48e1cec55f, 0x3f result=0x89391fa470e762afrol 0xa7d72fd04c2986e6, 0x1a result=0x4130a61b9a9f5cbfxor 0x89391fa470e762af, 0xaea310a8dccecd6a result=0x279a0f0cac29afc5sub 0xaea310a8dccecd6a, 0x23683b20a006c3f1 result=0x8b3ad5883cc80979sub 0x279a0f0cac29afc5, 0x8b3ad5883cc80979 result=0x9c5f39846f61a64csub 0x4130a61b9a9f5cbf, 0x9c5f39846f61a64c result=0xa4d16c972b3db673ror 0x8b3ad5883cc80979, 0x2a result=0x620f32025e62ceb5add 0x229dafa685947a43, 0x3f3cd0b931fb83ba result=0x61da805fb78ffdfdadd 0x61da805fb78ffdfd, 0x24ace0da2a14ef6d result=0x86876139e1a4ed6asub 0xa4d16c972b3db673, 0x620f32025e62ceb5 result=0x42c23a94ccdae7beror 0x86876139e1a4ed6a, 0x2e result=0x84e78693b5aa1a1dsub 0x620f32025e62ceb5, 0x9e69f9d52fe5a72a result=0xc3a5382d2e7d278bxor 0x9c5f39846f61a64c, 0x42c23a94ccdae7be result=0xde9d0310a3bb41f2rol 0x84e78693b5aa1a1d, 0x39 result=0x3b09cf0d276b5434sub 0xc3a5382d2e7d278b, 0xde9d0310a3bb41f2 result=0xe508351c8ac1e599xor 0x42c23a94ccdae7be, 0x9f0093fa7d70e962 result=0xddc2a96eb1aa0edcsub 0xddc2a96eb1aa0edc, 0xde9d0310a3bb41f2 result=0xff25a65e0deecceaxor 0x3b09cf0d276b5434, 0xe508351c8ac1e599 result=0xde01fa11adaab1adadd 0xe508351c8ac1e599, 0x79584d73a695110c result=0x15e6082903156f6a5sub 0xff25a65e0deeccea, 0xde01fa11adaab1ad result=0x2123ac4c60441b3drol 0xde9d0310a3bb41f2, 0x27 result=0xdda0f96f4e818851rol 0xde01fa11adaab1ad, 0x37 result=0xd6ef00fd08d6d558xor 0x2123ac4c60441b3d, 0xd6ef00fd08d6d558 result=0xf7ccacb16892ce65xor 0xd6ef00fd08d6d558, 0x7b66780079bcf18d result=0xad8978fd716a24d5sub 0x5e6082903156f6a5, 0xf7ccacb16892ce65 result=0x6693d5dec8c42840add 0xdda0f96f4e818851, 0x273e52f26ceb226b result=0x104df4c61bb6caabcxor 0xf7ccacb16892ce65, 0xa1d8a9d784041e4 result=0xfdd1262c10d28f81add 0xfdd1262c10d28f81, 0x4df4c61bb6caabc result=0x102b0728dcc3f3a3dadd 0x4df4c61bb6caabc, 0x54aca4906a29539b result=0x598bf0f22595fe57sub 0xad8978fd716a24d5, 0x2b0728dcc3f3a3d result=0xaad9066fa52aea98add 0x6693d5dec8c42840, 0xaad9066fa52aea98 result=0x1116cdc4e6def12d8add 0xaad9066fa52aea98, 0x598bf0f22595fe57 result=0x10464f761cac0e8efsub 0x598bf0f22595fe57, 0x982a5ed5ad23b3f5 result=0xc161921c78724a62add 0x116cdc4e6def12d8, 0x29dd2db2114bf812 result=0x3b4a0a007f3b0aeasub 0x3b4a0a007f3b0aea, 0x464f761cac0e8ef result=0x36e5129eb47a21fbxor 0x36e5129eb47a21fb, 0x464f761cac0e8ef result=0x3281e5ff7ebac914rol 0x464f761cac0e8ef, 0xd result=0x9eec39581d1de08cadd 0x3281e5ff7ebac914, 0x14051b581ba4a8ec result=0x468701579a5f7200ror 0xc161921c78724a62, 0x3a result=0x5864871e1c9298b0xor 0x2b0728dcc3f3a3d, 0x498e0b410bee2b9e result=0x4b3e79ccc7d111a3xor 0x7d, 0x7d result=0x0xor 0x8, 0x8 result=0x0xor 0x0, 0x468701579a5f7200 result=0x468701579a5f7200shr 0x468701579a5f7200, 0x20 result=0x46870157xor 0x0, 0x468701579a5f7200 result=0x468701579a5f7200xor 0x46870157, 0xba885960 result=0xfc0f5837xor 0xfc0f5837, 0x468701579a5f7200 result=0x4687015766502a37xor 0x468701579a5f7200, 0x4687015766502a37 result=0xfc0f5837xor 0x4687015766502a37, 0xfc0f5837 result=0x468701579a5f7200xor 0x468701579a5f7200, 0xefac3c8c result=0x4687015775f34e8cxor 0x4687015775f34e8c, 0xfc0f5837 result=0x4687015789fc16bbxor 0xfc0f5837, 0x4687015789fc16bb result=0x4687015775f34e8cxor 0x4687015789fc16bb, 0x4687015775f34e8c result=0xfc0f5837xor 0xfc0f5837, 0x1e64ba90 result=0xe26be2a7xor 0xe26be2a7, 0x4687015775f34e8c result=0x468701579798ac2bxor 0x4687015775f34e8c, 0x468701579798ac2b result=0xe26be2a7xor 0x468701579798ac2b, 0xe26be2a7 result=0x4687015775f34e8cxor 0x4687015775f34e8c, 0xf47c0b5 result=0x468701577ab48e39shl 0x468701577ab48e39, 0x20 result=0x7ab48e3900000000xor 0x468701579a5f7200, 0x468701579a5f7200 result=0x0xor 0x0, 0x7ab48e3900000000 result=0x7ab48e3900000000xor 0x7ab48e3900000000, 0xe26be2a7 result=0x7ab48e39e26be2a7xor 0x7ab48e3900000000, 0x7ab48e3900000000 result=0x0xor 0xe26be2a7, 0xe26be2a7 result=0x0xor 0x0, 0x4b3e79ccc7d111a3 result=0x4b3e79ccc7d111a3shr 0x4b3e79ccc7d111a3, 0x20 result=0x4b3e79ccxor 0x0, 0x4b3e79ccc7d111a3 result=0x4b3e79ccc7d111a3xor 0x4b3e79cc, 0xba885960 result=0xf1b620acxor 0xf1b620ac, 0x4b3e79ccc7d111a3 result=0x4b3e79cc3667310fxor 0x4b3e79ccc7d111a3, 0x4b3e79cc3667310f result=0xf1b620acxor 0x4b3e79cc3667310f, 0xf1b620ac result=0x4b3e79ccc7d111a3xor 0x4b3e79ccc7d111a3, 0xefac3c8c result=0x4b3e79cc287d2d2fxor 0x4b3e79cc287d2d2f, 0xf1b620ac result=0x4b3e79ccd9cb0d83xor 0xf1b620ac, 0x4b3e79ccd9cb0d83 result=0x4b3e79cc287d2d2fxor 0x4b3e79ccd9cb0d83, 0x4b3e79cc287d2d2f result=0xf1b620acxor 0xf1b620ac, 0x1e64ba90 result=0xefd29a3cxor 0xefd29a3c, 0x4b3e79cc287d2d2f result=0x4b3e79ccc7afb713xor 0x4b3e79cc287d2d2f, 0x4b3e79ccc7afb713 result=0xefd29a3cxor 0x4b3e79ccc7afb713, 0xefd29a3c result=0x4b3e79cc287d2d2fxor 0x4b3e79cc287d2d2f, 0xf47c0b5 result=0x4b3e79cc273aed9ashl 0x4b3e79cc273aed9a, 0x20 result=0x273aed9a00000000xor 0x4b3e79ccc7d111a3, 0x4b3e79ccc7d111a3 result=0x0xor 0x0, 0x273aed9a00000000 result=0x273aed9a00000000xor 0x273aed9a00000000, 0xefd29a3c result=0x273aed9aefd29a3cxor 0x273aed9a00000000, 0x273aed9a00000000 result=0x0xor 0xefd29a3c, 0xefd29a3c result=0x0xor 0x0, 0x9eec39581d1de08c result=0x9eec39581d1de08cshr 0x9eec39581d1de08c, 0x20 result=0x9eec3958xor 0x0, 0x9eec39581d1de08c result=0x9eec39581d1de08cxor 0x9eec3958, 0xba885960 result=0x24646038xor 0x24646038, 0x9eec39581d1de08c result=0x9eec3958397980b4xor 0x9eec39581d1de08c, 0x9eec3958397980b4 result=0x24646038xor 0x9eec3958397980b4, 0x24646038 result=0x9eec39581d1de08cxor 0x9eec39581d1de08c, 0xefac3c8c result=0x9eec3958f2b1dc00xor 0x9eec3958f2b1dc00, 0x24646038 result=0x9eec3958d6d5bc38xor 0x24646038, 0x9eec3958d6d5bc38 result=0x9eec3958f2b1dc00xor 0x9eec3958d6d5bc38, 0x9eec3958f2b1dc00 result=0x24646038xor 0x24646038, 0x1e64ba90 result=0x3a00daa8xor 0x3a00daa8, 0x9eec3958f2b1dc00 result=0x9eec3958c8b106a8xor 0x9eec3958f2b1dc00, 0x9eec3958c8b106a8 result=0x3a00daa8xor 0x9eec3958c8b106a8, 0x3a00daa8 result=0x9eec3958f2b1dc00xor 0x9eec3958f2b1dc00, 0xf47c0b5 result=0x9eec3958fdf61cb5shl 0x9eec3958fdf61cb5, 0x20 result=0xfdf61cb500000000xor 0x9eec39581d1de08c, 0x9eec39581d1de08c result=0x0xor 0x0, 0xfdf61cb500000000 result=0xfdf61cb500000000xor 0xfdf61cb500000000, 0x3a00daa8 result=0xfdf61cb53a00daa8xor 0xfdf61cb500000000, 0xfdf61cb500000000 result=0x0xor 0x3a00daa8, 0x3a00daa8 result=0x0xor 0x0, 0x5864871e1c9298b0 result=0x5864871e1c9298b0shr 0x5864871e1c9298b0, 0x20 result=0x5864871exor 0x0, 0x5864871e1c9298b0 result=0x5864871e1c9298b0xor 0x5864871e, 0xba885960 result=0xe2ecde7exor 0xe2ecde7e, 0x5864871e1c9298b0 result=0x5864871efe7e46cexor 0x5864871e1c9298b0, 0x5864871efe7e46ce result=0xe2ecde7exor 0x5864871efe7e46ce, 0xe2ecde7e result=0x5864871e1c9298b0xor 0x5864871e1c9298b0, 0xefac3c8c result=0x5864871ef33ea43cxor 0x5864871ef33ea43c, 0xe2ecde7e result=0x5864871e11d27a42xor 0xe2ecde7e, 0x5864871e11d27a42 result=0x5864871ef33ea43cxor 0x5864871e11d27a42, 0x5864871ef33ea43c result=0xe2ecde7exor 0xe2ecde7e, 0x1e64ba90 result=0xfc8864eexor 0xfc8864ee, 0x5864871ef33ea43c result=0x5864871e0fb6c0d2xor 0x5864871ef33ea43c, 0x5864871e0fb6c0d2 result=0xfc8864eexor 0x5864871e0fb6c0d2, 0xfc8864ee result=0x5864871ef33ea43cxor 0x5864871ef33ea43c, 0xf47c0b5 result=0x5864871efc796489shl 0x5864871efc796489, 0x20 result=0xfc79648900000000xor 0x5864871e1c9298b0, 0x5864871e1c9298b0 result=0x0xor 0x0, 0xfc79648900000000 result=0xfc79648900000000xor 0xfc79648900000000, 0xfc8864ee result=0xfc796489fc8864ee 写个脚本转化一下s=&#x27;&#x27;&#x27;sub 0x2ccf24cffee88608, 0x952ac4c1f3ba90e6 result=0x97a4600e0b2df522sub 0x6777dd702ae9e295, 0xa5b577c2fb57f719 result=0xc1c265ad2f91eb7csub 0x6cf4202a78fe205d, 0x97a4600e0b2df522 result=0xd54fc01c6dd02b3badd 0xd54fc01c6dd02b3b, 0x92bfddfec2f52f3b result=0x1680f9e1b30c55a76xor 0xc1c265ad2f91eb7c, 0xcadc9ba99a2ae444 result=0xb1efe04b5bb0f38sub 0x97a4600e0b2df522, 0x37e4241df14718d result=0x94261dcc2c198395xor 0x94261dcc2c198395, 0x952ac4c1f3ba90e6 result=0x10cd90ddfa31373rol 0x10cd90ddfa31373, 0x2d result=0x626e60219b21bbf4sub 0x626e60219b21bbf4, 0x680f9e1b30c55a76 result=0xfa5ec2066a5c617exor 0xb1efe04b5bb0f38, 0xa324444e39c3e7e7 result=0xa83aba4a8c78e8dfror 0x680f9e1b30c55a76, 0x2c result=0xe1b30c55a76680f9ror 0x952ac4c1f3ba90e6, 0x9 result=0x734a956260f9dd48sub 0xe1b30c55a76680f9, 0xa83aba4a8c78e8df result=0x3978520b1aed981aadd 0x734a956260f9dd48, 0xa83aba4a8c78e8df result=0x11b854faced72c627ror 0x1b854faced72c627, 0x34 result=0x54faced72c6271b8sub 0xa83aba4a8c78e8df, 0x5350ea4003b419e1 result=0x54e9d00a88c4cefesub 0xfa5ec2066a5c617e, 0x54faced72c6271b8 result=0xa563f32f3df9efc6add 0xa563f32f3df9efc6, 0x54e9d00a88c4cefe result=0xfa4dc339c6bebec4xor 0xfa4dc339c6bebec4, 0x7d27118487b24a4c result=0x876ad2bd410cf488rol 0x54e9d00a88c4cefe, 0x26 result=0x3133bf953a7402a2sub 0x876ad2bd410cf488, 0x3978520b1aed981a result=0x4df280b2261f5c6exor 0x54faced72c6271b8, 0xb948cbbf8c616936 result=0xedb20568a003188eror 0xedb20568a003188e, 0x3c result=0xdb20568a003188eerol 0x3978520b1aed981a, 0x39 result=0x3472f0a41635db30xor 0x3472f0a41635db30, 0x8c27c187b5925ea7 result=0xb8553123a3a78597sub 0xb8553123a3a78597, 0x4df280b2261f5c6e result=0x6a62b0717d882929add 0xdb20568a003188ee, 0x6a62b0717d882929 result=0x1458306fb7db9b217sub 0x3133bf953a7402a2, 0x6011664a1feadd72 result=0xd122594b1a892530sub 0x4df280b2261f5c6e, 0xc6b76b35dc565f4b result=0x873b157c49c8fd23rol 0x6a62b0717d882929, 0x3a result=0xa5a98ac1c5f620a4ror 0x458306fb7db9b217, 0x38 result=0x8306fb7db9b21745xor 0xd122594b1a892530, 0x873b157c49c8fd23 result=0x56194c375341d813xor 0x56194c375341d813, 0x5d13d65e4a7935dd result=0xb0a9a691938edcexor 0xa5a98ac1c5f620a4, 0xb0a9a691938edce result=0xaea310a8dccecd6arol 0x873b157c49c8fd23, 0x1e result=0x12723f48e1cec55fxor 0xb0a9a691938edce, 0x78f00494b1fd4117 result=0x73fa9efda8c5acd9add 0x73fa9efda8c5acd9, 0xaea310a8dccecd6a result=0x1229dafa685947a43xor 0x8306fb7db9b21745, 0xaea310a8dccecd6a result=0x2da5ebd5657cda2frol 0x2da5ebd5657cda2f, 0xd result=0xbd7aacaf9b45e5b4sub 0xbd7aacaf9b45e5b4, 0x15a37cdf4f1c5ece result=0xa7d72fd04c2986e6rol 0x12723f48e1cec55f, 0x3f result=0x89391fa470e762afrol 0xa7d72fd04c2986e6, 0x1a result=0x4130a61b9a9f5cbfxor 0x89391fa470e762af, 0xaea310a8dccecd6a result=0x279a0f0cac29afc5sub 0xaea310a8dccecd6a, 0x23683b20a006c3f1 result=0x8b3ad5883cc80979sub 0x279a0f0cac29afc5, 0x8b3ad5883cc80979 result=0x9c5f39846f61a64csub 0x4130a61b9a9f5cbf, 0x9c5f39846f61a64c result=0xa4d16c972b3db673ror 0x8b3ad5883cc80979, 0x2a result=0x620f32025e62ceb5add 0x229dafa685947a43, 0x3f3cd0b931fb83ba result=0x61da805fb78ffdfdadd 0x61da805fb78ffdfd, 0x24ace0da2a14ef6d result=0x86876139e1a4ed6asub 0xa4d16c972b3db673, 0x620f32025e62ceb5 result=0x42c23a94ccdae7beror 0x86876139e1a4ed6a, 0x2e result=0x84e78693b5aa1a1dsub 0x620f32025e62ceb5, 0x9e69f9d52fe5a72a result=0xc3a5382d2e7d278bxor 0x9c5f39846f61a64c, 0x42c23a94ccdae7be result=0xde9d0310a3bb41f2rol 0x84e78693b5aa1a1d, 0x39 result=0x3b09cf0d276b5434sub 0xc3a5382d2e7d278b, 0xde9d0310a3bb41f2 result=0xe508351c8ac1e599xor 0x42c23a94ccdae7be, 0x9f0093fa7d70e962 result=0xddc2a96eb1aa0edcsub 0xddc2a96eb1aa0edc, 0xde9d0310a3bb41f2 result=0xff25a65e0deecceaxor 0x3b09cf0d276b5434, 0xe508351c8ac1e599 result=0xde01fa11adaab1adadd 0xe508351c8ac1e599, 0x79584d73a695110c result=0x15e6082903156f6a5sub 0xff25a65e0deeccea, 0xde01fa11adaab1ad result=0x2123ac4c60441b3drol 0xde9d0310a3bb41f2, 0x27 result=0xdda0f96f4e818851rol 0xde01fa11adaab1ad, 0x37 result=0xd6ef00fd08d6d558xor 0x2123ac4c60441b3d, 0xd6ef00fd08d6d558 result=0xf7ccacb16892ce65xor 0xd6ef00fd08d6d558, 0x7b66780079bcf18d result=0xad8978fd716a24d5sub 0x5e6082903156f6a5, 0xf7ccacb16892ce65 result=0x6693d5dec8c42840add 0xdda0f96f4e818851, 0x273e52f26ceb226b result=0x104df4c61bb6caabcxor 0xf7ccacb16892ce65, 0xa1d8a9d784041e4 result=0xfdd1262c10d28f81add 0xfdd1262c10d28f81, 0x4df4c61bb6caabc result=0x102b0728dcc3f3a3dadd 0x4df4c61bb6caabc, 0x54aca4906a29539b result=0x598bf0f22595fe57sub 0xad8978fd716a24d5, 0x2b0728dcc3f3a3d result=0xaad9066fa52aea98add 0x6693d5dec8c42840, 0xaad9066fa52aea98 result=0x1116cdc4e6def12d8add 0xaad9066fa52aea98, 0x598bf0f22595fe57 result=0x10464f761cac0e8efsub 0x598bf0f22595fe57, 0x982a5ed5ad23b3f5 result=0xc161921c78724a62add 0x116cdc4e6def12d8, 0x29dd2db2114bf812 result=0x3b4a0a007f3b0aeasub 0x3b4a0a007f3b0aea, 0x464f761cac0e8ef result=0x36e5129eb47a21fbxor 0x36e5129eb47a21fb, 0x464f761cac0e8ef result=0x3281e5ff7ebac914rol 0x464f761cac0e8ef, 0xd result=0x9eec39581d1de08cadd 0x3281e5ff7ebac914, 0x14051b581ba4a8ec result=0x468701579a5f7200ror 0xc161921c78724a62, 0x3a result=0x5864871e1c9298b0xor 0x2b0728dcc3f3a3d, 0x498e0b410bee2b9e result=0x4b3e79ccc7d111a3xor 0x7d, 0x7d result=0x0xor 0x8, 0x8 result=0x0xor 0x0, 0x468701579a5f7200 result=0x468701579a5f7200shr 0x468701579a5f7200, 0x20 result=0x46870157xor 0x0, 0x468701579a5f7200 result=0x468701579a5f7200xor 0x46870157, 0xba885960 result=0xfc0f5837xor 0xfc0f5837, 0x468701579a5f7200 result=0x4687015766502a37xor 0x468701579a5f7200, 0x4687015766502a37 result=0xfc0f5837xor 0x4687015766502a37, 0xfc0f5837 result=0x468701579a5f7200xor 0x468701579a5f7200, 0xefac3c8c result=0x4687015775f34e8cxor 0x4687015775f34e8c, 0xfc0f5837 result=0x4687015789fc16bbxor 0xfc0f5837, 0x4687015789fc16bb result=0x4687015775f34e8cxor 0x4687015789fc16bb, 0x4687015775f34e8c result=0xfc0f5837xor 0xfc0f5837, 0x1e64ba90 result=0xe26be2a7xor 0xe26be2a7, 0x4687015775f34e8c result=0x468701579798ac2bxor 0x4687015775f34e8c, 0x468701579798ac2b result=0xe26be2a7xor 0x468701579798ac2b, 0xe26be2a7 result=0x4687015775f34e8cxor 0x4687015775f34e8c, 0xf47c0b5 result=0x468701577ab48e39shl 0x468701577ab48e39, 0x20 result=0x7ab48e3900000000xor 0x468701579a5f7200, 0x468701579a5f7200 result=0x0xor 0x0, 0x7ab48e3900000000 result=0x7ab48e3900000000xor 0x7ab48e3900000000, 0xe26be2a7 result=0x7ab48e39e26be2a7xor 0x7ab48e3900000000, 0x7ab48e3900000000 result=0x0xor 0xe26be2a7, 0xe26be2a7 result=0x0xor 0x0, 0x4b3e79ccc7d111a3 result=0x4b3e79ccc7d111a3shr 0x4b3e79ccc7d111a3, 0x20 result=0x4b3e79ccxor 0x0, 0x4b3e79ccc7d111a3 result=0x4b3e79ccc7d111a3xor 0x4b3e79cc, 0xba885960 result=0xf1b620acxor 0xf1b620ac, 0x4b3e79ccc7d111a3 result=0x4b3e79cc3667310fxor 0x4b3e79ccc7d111a3, 0x4b3e79cc3667310f result=0xf1b620acxor 0x4b3e79cc3667310f, 0xf1b620ac result=0x4b3e79ccc7d111a3xor 0x4b3e79ccc7d111a3, 0xefac3c8c result=0x4b3e79cc287d2d2fxor 0x4b3e79cc287d2d2f, 0xf1b620ac result=0x4b3e79ccd9cb0d83xor 0xf1b620ac, 0x4b3e79ccd9cb0d83 result=0x4b3e79cc287d2d2fxor 0x4b3e79ccd9cb0d83, 0x4b3e79cc287d2d2f result=0xf1b620acxor 0xf1b620ac, 0x1e64ba90 result=0xefd29a3cxor 0xefd29a3c, 0x4b3e79cc287d2d2f result=0x4b3e79ccc7afb713xor 0x4b3e79cc287d2d2f, 0x4b3e79ccc7afb713 result=0xefd29a3cxor 0x4b3e79ccc7afb713, 0xefd29a3c result=0x4b3e79cc287d2d2fxor 0x4b3e79cc287d2d2f, 0xf47c0b5 result=0x4b3e79cc273aed9ashl 0x4b3e79cc273aed9a, 0x20 result=0x273aed9a00000000xor 0x4b3e79ccc7d111a3, 0x4b3e79ccc7d111a3 result=0x0xor 0x0, 0x273aed9a00000000 result=0x273aed9a00000000xor 0x273aed9a00000000, 0xefd29a3c result=0x273aed9aefd29a3cxor 0x273aed9a00000000, 0x273aed9a00000000 result=0x0xor 0xefd29a3c, 0xefd29a3c result=0x0xor 0x0, 0x9eec39581d1de08c result=0x9eec39581d1de08cshr 0x9eec39581d1de08c, 0x20 result=0x9eec3958xor 0x0, 0x9eec39581d1de08c result=0x9eec39581d1de08cxor 0x9eec3958, 0xba885960 result=0x24646038xor 0x24646038, 0x9eec39581d1de08c result=0x9eec3958397980b4xor 0x9eec39581d1de08c, 0x9eec3958397980b4 result=0x24646038xor 0x9eec3958397980b4, 0x24646038 result=0x9eec39581d1de08cxor 0x9eec39581d1de08c, 0xefac3c8c result=0x9eec3958f2b1dc00xor 0x9eec3958f2b1dc00, 0x24646038 result=0x9eec3958d6d5bc38xor 0x24646038, 0x9eec3958d6d5bc38 result=0x9eec3958f2b1dc00xor 0x9eec3958d6d5bc38, 0x9eec3958f2b1dc00 result=0x24646038xor 0x24646038, 0x1e64ba90 result=0x3a00daa8xor 0x3a00daa8, 0x9eec3958f2b1dc00 result=0x9eec3958c8b106a8xor 0x9eec3958f2b1dc00, 0x9eec3958c8b106a8 result=0x3a00daa8xor 0x9eec3958c8b106a8, 0x3a00daa8 result=0x9eec3958f2b1dc00xor 0x9eec3958f2b1dc00, 0xf47c0b5 result=0x9eec3958fdf61cb5shl 0x9eec3958fdf61cb5, 0x20 result=0xfdf61cb500000000xor 0x9eec39581d1de08c, 0x9eec39581d1de08c result=0x0xor 0x0, 0xfdf61cb500000000 result=0xfdf61cb500000000xor 0xfdf61cb500000000, 0x3a00daa8 result=0xfdf61cb53a00daa8xor 0xfdf61cb500000000, 0xfdf61cb500000000 result=0x0xor 0x3a00daa8, 0x3a00daa8 result=0x0xor 0x0, 0x5864871e1c9298b0 result=0x5864871e1c9298b0shr 0x5864871e1c9298b0, 0x20 result=0x5864871exor 0x0, 0x5864871e1c9298b0 result=0x5864871e1c9298b0xor 0x5864871e, 0xba885960 result=0xe2ecde7exor 0xe2ecde7e, 0x5864871e1c9298b0 result=0x5864871efe7e46cexor 0x5864871e1c9298b0, 0x5864871efe7e46ce result=0xe2ecde7exor 0x5864871efe7e46ce, 0xe2ecde7e result=0x5864871e1c9298b0xor 0x5864871e1c9298b0, 0xefac3c8c result=0x5864871ef33ea43cxor 0x5864871ef33ea43c, 0xe2ecde7e result=0x5864871e11d27a42xor 0xe2ecde7e, 0x5864871e11d27a42 result=0x5864871ef33ea43cxor 0x5864871e11d27a42, 0x5864871ef33ea43c result=0xe2ecde7exor 0xe2ecde7e, 0x1e64ba90 result=0xfc8864eexor 0xfc8864ee, 0x5864871ef33ea43c result=0x5864871e0fb6c0d2xor 0x5864871ef33ea43c, 0x5864871e0fb6c0d2 result=0xfc8864eexor 0x5864871e0fb6c0d2, 0xfc8864ee result=0x5864871ef33ea43cxor 0x5864871ef33ea43c, 0xf47c0b5 result=0x5864871efc796489shl 0x5864871efc796489, 0x20 result=0xfc79648900000000xor 0x5864871e1c9298b0, 0x5864871e1c9298b0 result=0x0xor 0x0, 0xfc79648900000000 result=0xfc79648900000000xor 0xfc79648900000000, 0xfc8864ee result=0xfc796489fc8864ee&#x27;&#x27;&#x27;.split(&quot; &quot;)a1=[0x6cf4202a78fe205d,0x952ac4c1f3ba90e6,0x6777dd702ae9e295,0x2ccf24cffee88608]dic=&#123;&#125;for i in range(len(a1)): dic[str(hex(a1[i]))]=&quot;a1[&#123;&#125;]&quot;.format(i)a=2for i in s: if &quot;result&quot; in i: result=hex(eval(i.split(&quot;result=&quot;)[1])&amp;0xffffffffffffffff) ip=&quot;&quot;.join(i.split(&quot;result=&quot;)[0].strip().split()[1:3]).split(&quot;,&quot;) ip1,ip2=ip[0].strip(),ip[1].strip() try: ip1=dic[ip1] except: pass try: ip2=dic[ip2] except: pass dic[result]=&quot;a&#123;&#125;&quot;.format(a) op=i.split(&quot;result=&quot;)[0].strip().split()[0] if op==&quot;sub&quot;: op=&quot;-&quot; if op==&quot;and&quot;: op=&quot;&amp;&quot; if op==&quot;xor&quot;: op=&quot;^&quot; if op==&quot;shl&quot;: op=&quot;&lt;&lt;&quot; if op==&quot;shr&quot;: op=&quot;&gt;&gt;&quot; if op==&quot;add&quot;: op=&quot;+&quot; if op==&quot;rol&quot; or op==&quot;ror&quot;: print(&quot;a&#123;&#125;=(&#123;&#125;(&quot;.format(a,op),ip1,&quot;,&quot;,ip2,&quot;))&amp;0xffffffffffffffff&quot;) else: print(&quot;a&#123;&#125;=(&quot;.format(a),ip1,op,ip2,&quot;)&amp;0xffffffffffffffff&quot;) a+=1 else: print(i) 转化的结果为，根据result和 动调加密完的结果找到正确的地方插入赋值语句a1[0]&#x3D;a103，a1[1]&#x3D;a125…… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190a2=( a1[3] - a1[1] )&amp;0xffffffffffffffffa3=( a1[2] - 0xa5b577c2fb57f719 )&amp;0xffffffffffffffffa4=( a1[0] - a2 )&amp;0xffffffffffffffffa5=( a4 + 0x92bfddfec2f52f3b )&amp;0xffffffffffffffffa6=( a3 ^ 0xcadc9ba99a2ae444 )&amp;0xffffffffffffffffa7=( a2 - 0x37e4241df14718d )&amp;0xffffffffffffffffa8=( a7 ^ a1[1] )&amp;0xffffffffffffffffa9=(rol( a8 , 0x2d ))&amp;0xffffffffffffffffa10=( a9 - a5 )&amp;0xffffffffffffffffa11=( a6 ^ 0xa324444e39c3e7e7 )&amp;0xffffffffffffffffa12=(ror( a5 , 0x2c ))&amp;0xffffffffffffffffa13=(ror( a1[1] , 0x9 ))&amp;0xffffffffffffffffa14=( a12 - a11 )&amp;0xffffffffffffffffa15=( a13 + a11 )&amp;0xffffffffffffffffa16=(ror( a15 , 0x34 ))&amp;0xffffffffffffffffa17=( a11 - 0x5350ea4003b419e1 )&amp;0xffffffffffffffffa18=( a10 - a16 )&amp;0xffffffffffffffffa19=( a18 + a17 )&amp;0xffffffffffffffffa20=( a19 ^ 0x7d27118487b24a4c )&amp;0xffffffffffffffffa21=(rol( a17 , 0x26 ))&amp;0xffffffffffffffffa22=( a20 - a14 )&amp;0xffffffffffffffffa23=( a16 ^ 0xb948cbbf8c616936 )&amp;0xffffffffffffffffa24=(ror( a23 , 0x3c ))&amp;0xffffffffffffffffa25=(rol( a14 , 0x39 ))&amp;0xffffffffffffffffa26=( a25 ^ 0x8c27c187b5925ea7 )&amp;0xffffffffffffffffa27=( a26 - a22 )&amp;0xffffffffffffffffa28=( a24 + a27 )&amp;0xffffffffffffffffa29=( a21 - 0x6011664a1feadd72 )&amp;0xffffffffffffffffa30=( a22 - 0xc6b76b35dc565f4b )&amp;0xffffffffffffffffa31=(rol( a27 , 0x3a ))&amp;0xffffffffffffffffa32=(ror( a28 , 0x38 ))&amp;0xffffffffffffffffa33=( a29 ^ a30 )&amp;0xffffffffffffffffa34=( a33 ^ 0x5d13d65e4a7935dd )&amp;0xffffffffffffffffa35=( a31 ^ a34 )&amp;0xffffffffffffffffa36=(rol( a30 , 0x1e ))&amp;0xffffffffffffffffa37=( a34 ^ 0x78f00494b1fd4117 )&amp;0xffffffffffffffffa38=( a37 + a35 )&amp;0xffffffffffffffffa39=( a32 ^ a35 )&amp;0xffffffffffffffffa40=(rol( a39 , 0xd ))&amp;0xffffffffffffffffa41=( a40 - 0x15a37cdf4f1c5ece )&amp;0xffffffffffffffffa42=(rol( a36 , 0x3f ))&amp;0xffffffffffffffffa43=(rol( a41 , 0x1a ))&amp;0xffffffffffffffffa44=( a42 ^ a35 )&amp;0xffffffffffffffffa45=( a35 - 0x23683b20a006c3f1 )&amp;0xffffffffffffffffa46=( a44 - a45 )&amp;0xffffffffffffffffa47=( a43 - a46 )&amp;0xffffffffffffffffa48=(ror( a45 , 0x2a ))&amp;0xffffffffffffffffa49=( a38 + 0x3f3cd0b931fb83ba )&amp;0xffffffffffffffffa50=( a49 + 0x24ace0da2a14ef6d )&amp;0xffffffffffffffffa51=( a47 - a48 )&amp;0xffffffffffffffffa52=(ror( a50 , 0x2e ))&amp;0xffffffffffffffffa53=( a48 - 0x9e69f9d52fe5a72a )&amp;0xffffffffffffffffa54=( a46 ^ a51 )&amp;0xffffffffffffffffa55=(rol( a52 , 0x39 ))&amp;0xffffffffffffffffa56=( a53 - a54 )&amp;0xffffffffffffffffa57=( a51 ^ 0x9f0093fa7d70e962 )&amp;0xffffffffffffffffa58=( a57 - a54 )&amp;0xffffffffffffffffa59=( a55 ^ a56 )&amp;0xffffffffffffffffa60=( a56 + 0x79584d73a695110c )&amp;0xffffffffffffffffa61=( a58 - a59 )&amp;0xffffffffffffffffa62=(rol( a54 , 0x27 ))&amp;0xffffffffffffffffa63=(rol( a59 , 0x37 ))&amp;0xffffffffffffffffa64=( a61 ^ a63 )&amp;0xffffffffffffffffa65=( a63 ^ 0x7b66780079bcf18d )&amp;0xffffffffffffffffa66=( a60 - a64 )&amp;0xffffffffffffffffa67=( a62 + 0x273e52f26ceb226b )&amp;0xffffffffffffffffa68=( a64 ^ 0xa1d8a9d784041e4 )&amp;0xffffffffffffffffa69=( a68 + a67 )&amp;0xffffffffffffffffa70=( a67 + 0x54aca4906a29539b )&amp;0xffffffffffffffffa71=( a65 - a69 )&amp;0xffffffffffffffffa72=( a66 + a71 )&amp;0xffffffffffffffffa73=( a71 + a70 )&amp;0xffffffffffffffffa74=( a70 - 0x982a5ed5ad23b3f5 )&amp;0xffffffffffffffffa75=( a72 + 0x29dd2db2114bf812 )&amp;0xffffffffffffffffa76=( a75 - a73 )&amp;0xffffffffffffffffa77=( a76 ^ a73 )&amp;0xffffffffffffffffa78=(rol( a73 , 0xd ))&amp;0xffffffffffffffffa79=( a77 + 0x14051b581ba4a8ec )&amp;0xffffffffffffffffa80=(ror( a74 , 0x3a ))&amp;0xffffffffffffffffa81=( a69 ^ 0x498e0b410bee2b9e )&amp;0xffffffffffffffffa82=( 0x7d ^ 0x7d )&amp;0xffffffffffffffffa83=( 0x8 ^ 0x8 )&amp;0xffffffffffffffffa84=( a83 ^ a79 )&amp;0xffffffffffffffffa85=( a84 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa86=( a83 ^ a84 )&amp;0xffffffffffffffffa87=( a85 ^ 0xba885960 )&amp;0xffffffffffffffffa88=( a87 ^ a86 )&amp;0xffffffffffffffffa89=( a86 ^ a88 )&amp;0xffffffffffffffffa90=( a88 ^ a89 )&amp;0xffffffffffffffffa91=( a90 ^ 0xefac3c8c )&amp;0xffffffffffffffffa92=( a91 ^ a89 )&amp;0xffffffffffffffffa93=( a89 ^ a92 )&amp;0xffffffffffffffffa94=( a92 ^ a93 )&amp;0xffffffffffffffffa95=( a94 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa96=( a95 ^ a93 )&amp;0xffffffffffffffffa97=( a93 ^ a96 )&amp;0xffffffffffffffffa98=( a96 ^ a97 )&amp;0xffffffffffffffffa99=( a98 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa100=( a99 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa101=( a90 ^ a90 )&amp;0xffffffffffffffffa102=( a101 ^ a100 )&amp;0xffffffffffffffffa103=( a102 ^ a97 )&amp;0xffffffffffffffffa1[0]=a103a104=( a102 ^ a102 )&amp;0xffffffffffffffffa105=( a97 ^ a97 )&amp;0xffffffffffffffffa106=( a105 ^ a81 )&amp;0xffffffffffffffffa107=( a106 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa108=( a105 ^ a106 )&amp;0xffffffffffffffffa109=( a107 ^ 0xba885960 )&amp;0xffffffffffffffffa110=( a109 ^ a108 )&amp;0xffffffffffffffffa111=( a108 ^ a110 )&amp;0xffffffffffffffffa112=( a110 ^ a111 )&amp;0xffffffffffffffffa113=( a112 ^ 0xefac3c8c )&amp;0xffffffffffffffffa114=( a113 ^ a111 )&amp;0xffffffffffffffffa115=( a111 ^ a114 )&amp;0xffffffffffffffffa116=( a114 ^ a115 )&amp;0xffffffffffffffffa117=( a116 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa118=( a117 ^ a115 )&amp;0xffffffffffffffffa119=( a115 ^ a118 )&amp;0xffffffffffffffffa120=( a118 ^ a119 )&amp;0xffffffffffffffffa121=( a120 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa122=( a121 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa123=( a112 ^ a112 )&amp;0xffffffffffffffffa124=( a123 ^ a122 )&amp;0xffffffffffffffffa125=( a124 ^ a119 )&amp;0xffffffffffffffffa1[1]=a125a126=( a124 ^ a124 )&amp;0xffffffffffffffffa127=( a119 ^ a119 )&amp;0xffffffffffffffffa128=( a127 ^ a78 )&amp;0xffffffffffffffffa129=( a128 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa130=( a127 ^ a128 )&amp;0xffffffffffffffffa131=( a129 ^ 0xba885960 )&amp;0xffffffffffffffffa132=( a131 ^ a130 )&amp;0xffffffffffffffffa133=( a130 ^ a132 )&amp;0xffffffffffffffffa134=( a132 ^ a133 )&amp;0xffffffffffffffffa135=( a134 ^ 0xefac3c8c )&amp;0xffffffffffffffffa136=( a135 ^ a133 )&amp;0xffffffffffffffffa137=( a133 ^ a136 )&amp;0xffffffffffffffffa138=( a136 ^ a137 )&amp;0xffffffffffffffffa139=( a138 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa140=( a139 ^ a137 )&amp;0xffffffffffffffffa141=( a137 ^ a140 )&amp;0xffffffffffffffffa142=( a140 ^ a141 )&amp;0xffffffffffffffffa143=( a142 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa144=( a143 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa145=( a134 ^ a134 )&amp;0xffffffffffffffffa146=( a145 ^ a144 )&amp;0xffffffffffffffffa147=( a146 ^ a141 )&amp;0xffffffffffffffffa1[2]=a147a148=( a146 ^ a146 )&amp;0xffffffffffffffffa149=( a141 ^ a141 )&amp;0xffffffffffffffffa150=( a149 ^ a80 )&amp;0xffffffffffffffffa151=( a150 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa152=( a149 ^ a150 )&amp;0xffffffffffffffffa153=( a151 ^ 0xba885960 )&amp;0xffffffffffffffffa154=( a153 ^ a152 )&amp;0xffffffffffffffffa155=( a152 ^ a154 )&amp;0xffffffffffffffffa156=( a154 ^ a155 )&amp;0xffffffffffffffffa157=( a156 ^ 0xefac3c8c )&amp;0xffffffffffffffffa158=( a157 ^ a155 )&amp;0xffffffffffffffffa159=( a155 ^ a158 )&amp;0xffffffffffffffffa160=( a158 ^ a159 )&amp;0xffffffffffffffffa161=( a160 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa162=( a161 ^ a159 )&amp;0xffffffffffffffffa163=( a159 ^ a162 )&amp;0xffffffffffffffffa164=( a162 ^ a163 )&amp;0xffffffffffffffffa165=( a164 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa166=( a165 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa167=( a156 ^ a156 )&amp;0xffffffffffffffffa168=( a167 ^ a166 )&amp;0xffffffffffffffffa169=( a168 ^ a163 )&amp;0xffffffffffffffffa1[3]=a169 然后z3解，异或即可拿到flagfrom z3 import *a1 = [BitVec((&#x27;%d&#x27; % i), 65) for i in range(4)]x=Solver()def rol(value, shift, bit_width=64): &quot;&quot;&quot; Rotate Left &quot;&quot;&quot; return ((value &lt;&lt; shift) | (value &gt;&gt; (bit_width - shift))) &amp; ((1 &lt;&lt; bit_width) - 1)def ror(value, shift, bit_width=64): &quot;&quot;&quot; Rotate Right &quot;&quot;&quot; return ((value &gt;&gt; shift) | (value &lt;&lt; (bit_width - shift))) &amp; ((1 &lt;&lt; bit_width) - 1)a2=( a1[3] - a1[1] )&amp;0xffffffffffffffffa3=( a1[2] - 0xa5b577c2fb57f719 )&amp;0xffffffffffffffffa4=( a1[0] - a2 )&amp;0xffffffffffffffffa5=( a4 + 0x92bfddfec2f52f3b )&amp;0xffffffffffffffffa6=( a3 ^ 0xcadc9ba99a2ae444 )&amp;0xffffffffffffffffa7=( a2 - 0x37e4241df14718d )&amp;0xffffffffffffffffa8=( a7 ^ a1[1] )&amp;0xffffffffffffffffa9=(rol( a8 , 0x2d ))&amp;0xffffffffffffffffa10=( a9 - a5 )&amp;0xffffffffffffffffa11=( a6 ^ 0xa324444e39c3e7e7 )&amp;0xffffffffffffffffa12=(ror( a5 , 0x2c ))&amp;0xffffffffffffffffa13=(ror( a1[1] , 0x9 ))&amp;0xffffffffffffffffa14=( a12 - a11 )&amp;0xffffffffffffffffa15=( a13 + a11 )&amp;0xffffffffffffffffa16=(ror( a15 , 0x34 ))&amp;0xffffffffffffffffa17=( a11 - 0x5350ea4003b419e1 )&amp;0xffffffffffffffffa18=( a10 - a16 )&amp;0xffffffffffffffffa19=( a18 + a17 )&amp;0xffffffffffffffffa20=( a19 ^ 0x7d27118487b24a4c )&amp;0xffffffffffffffffa21=(rol( a17 , 0x26 ))&amp;0xffffffffffffffffa22=( a20 - a14 )&amp;0xffffffffffffffffa23=( a16 ^ 0xb948cbbf8c616936 )&amp;0xffffffffffffffffa24=(ror( a23 , 0x3c ))&amp;0xffffffffffffffffa25=(rol( a14 , 0x39 ))&amp;0xffffffffffffffffa26=( a25 ^ 0x8c27c187b5925ea7 )&amp;0xffffffffffffffffa27=( a26 - a22 )&amp;0xffffffffffffffffa28=( a24 + a27 )&amp;0xffffffffffffffffa29=( a21 - 0x6011664a1feadd72 )&amp;0xffffffffffffffffa30=( a22 - 0xc6b76b35dc565f4b )&amp;0xffffffffffffffffa31=(rol( a27 , 0x3a ))&amp;0xffffffffffffffffa32=(ror( a28 , 0x38 ))&amp;0xffffffffffffffffa33=( a29 ^ a30 )&amp;0xffffffffffffffffa34=( a33 ^ 0x5d13d65e4a7935dd )&amp;0xffffffffffffffffa35=( a31 ^ a34 )&amp;0xffffffffffffffffa36=(rol( a30 , 0x1e ))&amp;0xffffffffffffffffa37=( a34 ^ 0x78f00494b1fd4117 )&amp;0xffffffffffffffffa38=( a37 + a35 )&amp;0xffffffffffffffffa39=( a32 ^ a35 )&amp;0xffffffffffffffffa40=(rol( a39 , 0xd ))&amp;0xffffffffffffffffa41=( a40 - 0x15a37cdf4f1c5ece )&amp;0xffffffffffffffffa42=(rol( a36 , 0x3f ))&amp;0xffffffffffffffffa43=(rol( a41 , 0x1a ))&amp;0xffffffffffffffffa44=( a42 ^ a35 )&amp;0xffffffffffffffffa45=( a35 - 0x23683b20a006c3f1 )&amp;0xffffffffffffffffa46=( a44 - a45 )&amp;0xffffffffffffffffa47=( a43 - a46 )&amp;0xffffffffffffffffa48=(ror( a45 , 0x2a ))&amp;0xffffffffffffffffa49=( a38 + 0x3f3cd0b931fb83ba )&amp;0xffffffffffffffffa50=( a49 + 0x24ace0da2a14ef6d )&amp;0xffffffffffffffffa51=( a47 - a48 )&amp;0xffffffffffffffffa52=(ror( a50 , 0x2e ))&amp;0xffffffffffffffffa53=( a48 - 0x9e69f9d52fe5a72a )&amp;0xffffffffffffffffa54=( a46 ^ a51 )&amp;0xffffffffffffffffa55=(rol( a52 , 0x39 ))&amp;0xffffffffffffffffa56=( a53 - a54 )&amp;0xffffffffffffffffa57=( a51 ^ 0x9f0093fa7d70e962 )&amp;0xffffffffffffffffa58=( a57 - a54 )&amp;0xffffffffffffffffa59=( a55 ^ a56 )&amp;0xffffffffffffffffa60=( a56 + 0x79584d73a695110c )&amp;0xffffffffffffffffa61=( a58 - a59 )&amp;0xffffffffffffffffa62=(rol( a54 , 0x27 ))&amp;0xffffffffffffffffa63=(rol( a59 , 0x37 ))&amp;0xffffffffffffffffa64=( a61 ^ a63 )&amp;0xffffffffffffffffa65=( a63 ^ 0x7b66780079bcf18d )&amp;0xffffffffffffffffa66=( a60 - a64 )&amp;0xffffffffffffffffa67=( a62 + 0x273e52f26ceb226b )&amp;0xffffffffffffffffa68=( a64 ^ 0xa1d8a9d784041e4 )&amp;0xffffffffffffffffa69=( a68 + a67 )&amp;0xffffffffffffffffa70=( a67 + 0x54aca4906a29539b )&amp;0xffffffffffffffffa71=( a65 - a69 )&amp;0xffffffffffffffffa72=( a66 + a71 )&amp;0xffffffffffffffffa73=( a71 + a70 )&amp;0xffffffffffffffffa74=( a70 - 0x982a5ed5ad23b3f5 )&amp;0xffffffffffffffffa75=( a72 + 0x29dd2db2114bf812 )&amp;0xffffffffffffffffa76=( a75 - a73 )&amp;0xffffffffffffffffa77=( a76 ^ a73 )&amp;0xffffffffffffffffa78=(rol( a73 , 0xd ))&amp;0xffffffffffffffffa79=( a77 + 0x14051b581ba4a8ec )&amp;0xffffffffffffffffa80=(ror( a74 , 0x3a ))&amp;0xffffffffffffffffa81=( a69 ^ 0x498e0b410bee2b9e )&amp;0xffffffffffffffffa82=( 0x7d ^ 0x7d )&amp;0xffffffffffffffffa83=( 0x8 ^ 0x8 )&amp;0xffffffffffffffffa84=( a83 ^ a79 )&amp;0xffffffffffffffffa85=( a84 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa86=( a83 ^ a84 )&amp;0xffffffffffffffffa87=( a85 ^ 0xba885960 )&amp;0xffffffffffffffffa88=( a87 ^ a86 )&amp;0xffffffffffffffffa89=( a86 ^ a88 )&amp;0xffffffffffffffffa90=( a88 ^ a89 )&amp;0xffffffffffffffffa91=( a90 ^ 0xefac3c8c )&amp;0xffffffffffffffffa92=( a91 ^ a89 )&amp;0xffffffffffffffffa93=( a89 ^ a92 )&amp;0xffffffffffffffffa94=( a92 ^ a93 )&amp;0xffffffffffffffffa95=( a94 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa96=( a95 ^ a93 )&amp;0xffffffffffffffffa97=( a93 ^ a96 )&amp;0xffffffffffffffffa98=( a96 ^ a97 )&amp;0xffffffffffffffffa99=( a98 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa100=( a99 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa101=( a90 ^ a90 )&amp;0xffffffffffffffffa102=( a101 ^ a100 )&amp;0xffffffffffffffffa103=( a102 ^ a97 )&amp;0xffffffffffffffffa1[0]=a103a104=( a102 ^ a102 )&amp;0xffffffffffffffffa105=( a97 ^ a97 )&amp;0xffffffffffffffffa106=( a105 ^ a81 )&amp;0xffffffffffffffffa107=( a106 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa108=( a105 ^ a106 )&amp;0xffffffffffffffffa109=( a107 ^ 0xba885960 )&amp;0xffffffffffffffffa110=( a109 ^ a108 )&amp;0xffffffffffffffffa111=( a108 ^ a110 )&amp;0xffffffffffffffffa112=( a110 ^ a111 )&amp;0xffffffffffffffffa113=( a112 ^ 0xefac3c8c )&amp;0xffffffffffffffffa114=( a113 ^ a111 )&amp;0xffffffffffffffffa115=( a111 ^ a114 )&amp;0xffffffffffffffffa116=( a114 ^ a115 )&amp;0xffffffffffffffffa117=( a116 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa118=( a117 ^ a115 )&amp;0xffffffffffffffffa119=( a115 ^ a118 )&amp;0xffffffffffffffffa120=( a118 ^ a119 )&amp;0xffffffffffffffffa121=( a120 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa122=( a121 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa123=( a112 ^ a112 )&amp;0xffffffffffffffffa124=( a123 ^ a122 )&amp;0xffffffffffffffffa125=( a124 ^ a119 )&amp;0xffffffffffffffffa1[1]=a125a126=( a124 ^ a124 )&amp;0xffffffffffffffffa127=( a119 ^ a119 )&amp;0xffffffffffffffffa128=( a127 ^ a78 )&amp;0xffffffffffffffffa129=( a128 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa130=( a127 ^ a128 )&amp;0xffffffffffffffffa131=( a129 ^ 0xba885960 )&amp;0xffffffffffffffffa132=( a131 ^ a130 )&amp;0xffffffffffffffffa133=( a130 ^ a132 )&amp;0xffffffffffffffffa134=( a132 ^ a133 )&amp;0xffffffffffffffffa135=( a134 ^ 0xefac3c8c )&amp;0xffffffffffffffffa136=( a135 ^ a133 )&amp;0xffffffffffffffffa137=( a133 ^ a136 )&amp;0xffffffffffffffffa138=( a136 ^ a137 )&amp;0xffffffffffffffffa139=( a138 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa140=( a139 ^ a137 )&amp;0xffffffffffffffffa141=( a137 ^ a140 )&amp;0xffffffffffffffffa142=( a140 ^ a141 )&amp;0xffffffffffffffffa143=( a142 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa144=( a143 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa145=( a134 ^ a134 )&amp;0xffffffffffffffffa146=( a145 ^ a144 )&amp;0xffffffffffffffffa147=( a146 ^ a141 )&amp;0xffffffffffffffffa1[2]=a147a148=( a146 ^ a146 )&amp;0xffffffffffffffffa149=( a141 ^ a141 )&amp;0xffffffffffffffffa150=( a149 ^ a80 )&amp;0xffffffffffffffffa151=( a150 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa152=( a149 ^ a150 )&amp;0xffffffffffffffffa153=( a151 ^ 0xba885960 )&amp;0xffffffffffffffffa154=( a153 ^ a152 )&amp;0xffffffffffffffffa155=( a152 ^ a154 )&amp;0xffffffffffffffffa156=( a154 ^ a155 )&amp;0xffffffffffffffffa157=( a156 ^ 0xefac3c8c )&amp;0xffffffffffffffffa158=( a157 ^ a155 )&amp;0xffffffffffffffffa159=( a155 ^ a158 )&amp;0xffffffffffffffffa160=( a158 ^ a159 )&amp;0xffffffffffffffffa161=( a160 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa162=( a161 ^ a159 )&amp;0xffffffffffffffffa163=( a159 ^ a162 )&amp;0xffffffffffffffffa164=( a162 ^ a163 )&amp;0xffffffffffffffffa165=( a164 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa166=( a165 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa167=( a156 ^ a156 )&amp;0xffffffffffffffffa168=( a167 ^ a166 )&amp;0xffffffffffffffffa169=( a168 ^ a163 )&amp;0xffffffffffffffffa1[3]=a169x.add(a1[0]==0x7AB48E39E26BE2A7,a1[1]==0x273AED9AEFD29A3C,a1[2]==0xFDF61CB53A00DAA8,a1[3]==0xFC796489FC8864EE)if x.check() == sat: model = x.model() print(model)result=[7850935417204252765,10748619797969932518,7455671181961192085,3228839933601416712]data=[0x28, 0xb1, 0x61, 0x6e, 0x3, 0x8c, 0x55, 0x33, 0xca, 0x5a, 0xbd, 0xa3, 0x8a, 0xce, 0xa3, 0x85, 0x57, 0x13, 0xee, 0x2f, 0x5d, 0xd8, 0x96, 0xfd, 0x73, 0x8c, 0x7b, 0xfb, 0xae, 0xd9, 0xa7, 0x75]xordata=[int.from_bytes(data[i:i+8],&quot;big&quot;) for i in range(0,len(data),8)]import libnumfor i in range(0,len(result)): result[i]^=xordata[i] print(libnum.n2s(result[i]).decode(),end=&quot;&quot;)"},{"title":"DASCTF 2024暑期挑战赛WP","path":"/2024/07/20/DASCTF-2024暑期挑战赛WP/","content":"DosSnake瞪眼一个异或 123456enc=[0x3F, 0x09, 0x63, 0x34, 0x32, 0x13, 0x2A, 0x2F, 0x2A, 0x37, 0x3C, 0x23, 0x00, 0x2E, 0x20, 0x10, 0x3A, 0x27, 0x2F, 0x24, 0x3A, 0x30, 0x75, 0x67, 0x65, 0x3C]key=&quot;DASCTF&quot;for i in range(len(enc)): print(chr(enc[i]^ord(key[i%len(key)])),end=&quot;&quot;) DASCTF{H0wfUnnytheDosSnakeis!!!} Strangeprograme找到DASCTF段，往上跟 先是smc解密DASCTF段代码，然后注册hook 绕反调试 输入后打硬件断点跟到关键代码，魔改tea，照着解密就行 123456789101112131415161718192021222324252627282930313233from ctypes import *import libnumenc=[-7, 77, 43, -68, 19, -35, 19, 98, -55, -4, -1, -119, 125, 79, -55, 15, 99, 29, 109, 82, 80, -3, 65, -29, 51, 118, 40, -105, 56, 54, -7, 107, -112, 57, 20, -125, 44, -30, 44, 31]for i in range(len(enc)): enc[i]&amp;=0xffenc=[0xF9, 0x4D, 0x2B, 0xBC, 0x13, 0xDD, 0x13, 0x62, 0xC9, 0xFC, 0xFF, 0x89, 0x7D, 0x4F, 0xC9, 0x0F, 0x63, 0x1D, 0x6D, 0x52, 0x50, 0xFD, 0x41, 0xE3, 0x33, 0x76, 0x28, 0x97, 0x38, 0x36, 0xF9, 0x6B, 0x90, 0x39, 0x14, 0x83, 0x2C, 0xE2, 0x2C, 0x1F]a1=[int.from_bytes(enc[i:i+4],&quot;little&quot;) for i in range(0,len(enc),4)]a2=[0x12345678, 0x09101112, 0x13141516, 0x15161718]decode=[]v5=c_uint32(0)times=16delta=0x61C88647for k in range(len(a1)-2,-1,-2): decode.append(a1[k+1] ^ a1[1]) decode.append(a1[k] ^ a1[0]) v5=c_uint32(-delta*times) v1=c_uint32(a1[0]) v2=c_uint32(a1[1]) for i in range(times): v5.value += delta v2.value -= (v1.value + v5.value) ^ ((v1.value*16) + a2[2]) ^ ((v1.value &gt;&gt; 5) + a2[3]) # v2.value -= (a2[(v5.value &gt;&gt; 11) &amp; 3] + v5.value) ^ (v1.value + ((v1.value &gt;&gt; 5) ^ (16 * v1.value))) v1.value -= (v2.value + v5.value) ^ ((v2.value*16) + a2[0]) ^ ((v2.value &gt;&gt; 5) + a2[1]) # v1.value -= (a2[(v5.value) &amp; 3] + v5.value) ^ (v2.value + ((v2.value &gt;&gt; 5) ^ (16 * v2.value))) a1[0]=v1.value a1[1]=v2.valuedecode.append(a1[1])decode.append(a1[0])for i in decode[::-1]: print(libnum.n2s(i).decode()[::-1],end=&quot;&quot;) DASCTF{I4TH0ok_I5S0ooFunny_Isnotit?????} BabyAndroid资源文件找到一个Sex.jpg，直接搜 动态加载类，先用rc4解密一下 aes+base64 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import java.nio.charset.StandardCharsets;import java.security.InvalidKeyException;import java.security.NoSuchAlgorithmException;import java.util.Arrays;import java.util.Base64;import javax.crypto.BadPaddingException;import javax.crypto.Cipher;import javax.crypto.IllegalBlockSizeException;import javax.crypto.NoSuchPaddingException;import javax.crypto.spec.SecretKeySpec;public class RC4 &#123; private static final String KEY = &quot;DSACTF&quot;; private static byte[] customHash(String input) &#123; byte[] keyBytes = new byte[16]; int[] temp = new int[16]; for (int i = 0; i &lt; input.length(); i++) &#123; int charVal = input.charAt(i); for (int j = 0; j &lt; 16; j++) &#123; temp[j] = ((temp[j] * 31) + charVal) % 251; &#125; &#125; for (int i2 = 0; i2 &lt; 16; i2++) &#123; keyBytes[i2] = (byte) (temp[i2] % 256); &#125; return keyBytes; &#125; public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException &#123; byte[] keyBytes = customHash(KEY); // Create the secret key spec SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, &quot;AES&quot;); // Initialize the cipher for decryption Cipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;); cipher.init(Cipher.DECRYPT_MODE, secretKeySpec); // Decode the base64 encoded string byte[] encryptedBytes = Base64.getDecoder().decode(&quot;TwMkYUkg4bYsY0hL99ggYWnVjWyXQrWAdNmToB0eBXbS6wBzL6ktorjNWI9VOroTU4HgIUYyzGLpcHzd1zNGT+bFZZI7IoxJwpcgXfdwW1LSmiNSP+PuSUsqAzNclF1nJ07b4tYyLWg0zTypbzWsLhOIM+6uci3RFZLREUCALafi01M8mS+KMNxX1Pyn8mSP+KKKjQ5S5fasHRSn+L9qBFws0mWavpfI0QEiMgarxv0iGhYU8cfgonWyL70RvoXET5VUDP1vfYWIBLzzzaAqLC0OiMtUK3TTATSU7yijdgXm18OKMcGIke/NZIM6Sr5fL3t6psDOOkw2C/5uYrJVPn+D6U9KTL64bgREppDqMOvhvbhtuf/S3ASW/+rhtPMtoaD8FxDg0wWSLZA53fQfNA==&quot;); // Decrypt the data byte[] decryptedBytes = cipher.doFinal(encryptedBytes); // Convert bytes to string and return System.out.println(new String(decryptedBytes)); &#125;&#125;#458.853181,-18.325492,-18.251911,-2.097520,-21.198660,-22.304648,21.103162,-5.786284,-15.248906,15.329286,16.919499,-19.669045,30.928253,-37.588034,-16.593954,-5.505211,3.014744,6.553616,31.131491,16.472500,6.802400,-78.278577,15.280099,3.893073,56.493581,-34.576344,30.146729,4.445671,6.732204 代码中还调用了sendInit，在native层 扔给gpt秒了 123456789101112131415import numpy as npfrom scipy.fftpack import idct# 定义数据数组data = [458.853181, -18.325492, -18.251911, -2.097520, -21.198660, -22.304648, 21.103162, -5.786284, -15.248906, 15.329286, 16.919499, -19.669045, 30.928253, -37.588034, -16.593954, -5.505211, 3.014744, 6.553616, 31.131491, 16.472500, 6.802400, -78.278577, 15.280099, 3.893073, 56.493581, -34.576344, 30.146729, 4.445671, 6.732204]# 计算逆离散余弦变换inverse_dct = idct(data, norm=&#x27;ortho&#x27;)# 打印结果for i in inverse_dct: print(chr(round(i)),end=&quot;&quot;) DASCTF{Y0u_Ar3Re4lly_H@ck3r!}"},{"path":"/about/index.html","content":"从陌生人到陌生人，你用了多久"}]