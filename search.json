[{"title":"2024相册集","path":"/2025/01/19/2024相册集/","content":"​\t有人说你可以不懂摄影，但一定要记录生活。你拍的不好没有关系，没有记录下来才是最可惜的。因为很多事情过后已经不能凭空想象起来，当按下快门的那一刻时间就停在了这里。–Tim 旅拍什么？一年就旅游了两个城市？我是穷*！ 青岛崂山⛰️ 海🌊 海洋生物🦀 海上日落🌅勉强算吧，虽然被房子挡着了 海洋馆🪼 街拍顶级眩光，oppo findx7u就不会有这种情况了 北京天安门🚩 故宫 街拍 摄影？拍照！日落🌅晚霞🌇 Animal 🙈猫🐱 鸟🦜 狗🐕不怎么见得到，意思意思 大象？🐘 建筑🏛️ 人文👨‍👩‍👧 花草树木🌷 END"},{"title":"llvm安装教程","path":"/2025/01/17/llvm安装教程/","content":"手动编译建议不要用预编译的，后面写pass会发现少了很多文件 选择和自己clang一样版本的llvm 下载后解压 12345cd llvm-projectsudo cmake -S llvm -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS=&quot;clang&quot;cd buildsudo ninja -j8sudo ninja install 如果跑不动建议加磁盘空间和swap空间 扩展磁盘可以先看看剩余磁盘容量，至少剩余15g+ 1df -h 如果磁盘不够就得扩容，得先删掉所有快照，然后在设置里点扩展 然后进入gparted 1gparted 先停用交换空间，然后删除sda2和sda5 再调整sda1的大小 建议留1g+ 设置swap1234sudo fallocate -l 15G /swapfilesudo chmod 600 /swapfilesudo mkswap /swapfilesudo swapon /swapfile 完成后通过free -m查看 然后就可以编译llvm了 编译后若需要删除swap 12sudo swapoff /swapfilesudo rm /swapfile 预编译去https://releases.llvm.org/download.html下载预编译好的包就行 选择和自己clang一样版本的llvm 解压即用"},{"title":"uoftctf2025 WP","path":"/2025/01/14/uoftctf2025-WP/","content":"Highly Optimized取余 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556ops = [0x0000000000000000, 0x00CFFB289AF4B1D1, 0x0000000000000000, 0x0000000000000083, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000083, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x00955F7E7A2ABC09, 0x0000000000000000, 0x0000000000000082, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000082, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x0171D0EEF6E34564, 0x0000000000000000, 0x0000000000000092, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000092, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x01C8C0106F982D2C, 0x0000000000000000, 0x0000000000000078, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000078, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x01A3DF010DB43D50, 0x0000000000000000, 0x0000000000000079, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000079, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x0070D52B655429D4, 0x0000000000000000, 0x00000000000000A0, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x00000000000000A0, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x0086BA083DB4A00E, 0x0000000000000000, 0x000000000000008F, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x000000000000008F, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x01EE6D244821E17E, 0x0000000000000000, 0x0000000000000093, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000093, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x021F3E25788406B2, 0x0000000000000000, 0x000000000000008A, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x000000000000008A, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x013C0021E70D77B4, 0x0000000000000000, 0x00000000000000A3, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x00000000000000A3, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x027EDD2385F658C6, 0x0000000000000000, 0x00000000000000AA, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x00000000000000AA, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x00A07DA21EF9E1B4, 0x0000000000000000, 0x0000000000000034, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000034, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x00D00E8519E9CC06, 0x0000000000000000, 0x0000000000000041, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000041, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x00D6DFC3F1E11375, 0x0000000000000000, 0x0000000000000078, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000078, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x00EFAA53300DA663, 0x0000000000000000, 0x000000000000008D, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x000000000000008D, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x007568123DB27DB8, 0x0000000000000000, 0x0000000000000089, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000089, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x00F174602422164A, 0x0000000000000000, 0x0000000000000087, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000087, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x009B991D46E343EE, 0x0000000000000000, 0x0000000000000075, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000075, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x0016C43FB0F9B780, 0x0000000000000000, 0x0000000000000044, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000044, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x010C7B1796D09C04, 0x0000000000000000, 0x0000000000000044, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000044, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x005F5CFCF58C8717, 0x0000000000000000, 0x000000000000007A, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x000000000000007A, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000000, 0x00D715FDA1220CE0, 0x0000000000000000, 0x0000000000000093, 0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000000093, 0x0000000000000003, 0x0000000000000004, 0x0000000000000009, 0x0000000000000005, 0x0000000000000006]for i in range(len(ops)): if ops[i]&gt;0xff: print(chr(ops[i]%ops[i+2]),end=&quot;&quot;) Py_FlagChecker断在python310.dll的marshal.loads函数就能dump出pyc pycdas看到flag Encrypted Flag爆破时间戳，这时间戳在2034年，我从2025年爆到了1970年，蒙蔽了 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;int main()&#123; int v4 = 64; int v6,v9,i; unsigned int v7; char v10; int v5; int tar[4]=&#123;0xa8, 0xf9, 0xdd, 0x73&#125;; int idx[4]; for(int v5=0;v5&lt;0xffffffff;v5+=1)&#123; srand(v5); if(v5%0x100000==0)&#123; printf(&quot;0x%x &quot;,v5); &#125; v6 = 0; v7 = rand(); char buf[256]=&#123;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF&#125;; do &#123; for ( i = v7&amp;0xff; ; i = (i + 1)&amp;0xff ) &#123; v9 = i; if ( buf[i] == -1 ) break; &#125; idx[v6]=v9; if(idx[v6]!=tar[v6])&#123; break; &#125; v7&gt;&gt;=8; v6+=1; buf[v9]=1; &#125;while ( v6 != 4 ); if(idx[0]==tar[0]&amp;&amp;idx[1]==tar[1]&amp;&amp;idx[2]==tar[2]&amp;&amp;idx[3]==tar[3])&#123; printf(&quot;find:0x%x &quot;,v5); &#125; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201from z3 import *from tqdm import tqdmkey1 = [0x57, 0x2D, 0xAF, 0x32, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x0A, 0x27, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x23, 0x58, 0xDA, 0x47, 0x23, 0x58, 0xDA, 0x47, 0x69, 0x52, 0xFD, 0x39, 0x69, 0x52, 0xFD, 0x39, 0xAE, 0xE4, 0xDE, 0x3A, 0x8D, 0xBC, 0x04, 0x7D, 0xE4, 0xEE, 0xF9, 0x44, 0x8D, 0xBC, 0x04, 0x7D, 0x70, 0x19, 0x59, 0xFA, 0xFD, 0xA5, 0x5D, 0x87, 0x19, 0x4B, 0xA4, 0xC3, 0x94, 0xF7, 0xA0, 0xBE, 0x81, 0x97, 0xF1, 0xE7, 0x7C, 0x32, 0xAC, 0x60, 0x65, 0x79, 0x08, 0xA3, 0xF1, 0x8E, 0xA8, 0x1D, 0xC7, 0x97, 0x6E, 0x31, 0xBB, 0xA5, 0xC2, 0x51, 0xDE, 0xDC, 0xCA, 0xF2, 0x2F, 0x52, 0x62, 0xEF, 0x68, 0x2C, 0x7E, 0x4B, 0xD3, 0x89, 0xBC, 0x1A, 0x0D, 0x55, 0x76, 0xE8, 0x22, 0x07, 0x14, 0x07, 0x97, 0x07, 0xC1, 0xC0, 0x44, 0x8E, 0x7D, 0xDA, 0x49, 0xDB, 0x0B, 0x32, 0x6B, 0xDC, 0x1F, 0x35, 0x5D, 0xCB, 0x85, 0xED, 0x19, 0x45, 0xF8, 0x37, 0x50, 0x9E, 0xF3, 0x05, 0x3B, 0x42, 0xEC, 0x30, 0xC4, 0x23, 0x2E, 0x73, 0xDD, 0x66, 0xD6, 0x44, 0x8D, 0xF8, 0x25, 0x41, 0xB6, 0xBA, 0xC9, 0x71, 0xC4, 0xC6, 0x24, 0x0B, 0x19, 0xA0, 0xF2, 0x4F, 0x94, 0x58, 0xD7, 0x0E, 0x22, 0xE2, 0x1E, 0x7F, 0x75, 0x93, 0x08, 0xE2, 0xFD, 0xFE, 0x0E, 0xBF, 0xFF, 0x17, 0x1F, 0x59, 0x6F, 0xAF, 0x13, 0xA0, 0x66, 0xAD, 0x85, 0x2F, 0x2B, 0x68, 0x9C, 0x3B, 0x5F, 0xB1, 0xBA, 0x14, 0x23, 0x9F, 0xC3, 0xCC, 0x53, 0x4B, 0x8B, 0xD7, 0x35, 0x54, 0xA4, 0x28, 0xC2, 0x1E, 0x32, 0x33, 0x19, 0x96, 0xDD, 0x7A, 0xAB, 0xDE, 0x5B, 0x0B, 0x0F, 0x44, 0x94, 0xEC, 0xF5, 0x04, 0x34, 0x9E, 0xC4, 0xC5, 0x30, 0xB3, 0x20, 0x6D, 0x82, 0x7B, 0x83, 0xA1, 0x92, 0x43, 0x1B, 0x7C, 0xB2, 0xB4, 0xB7, 0x37, 0x0D, 0x26]test = [ord(i) for i in &quot;1234567890abcdef&quot;]buf = [0x75, 0x93, 0x08, 0xE2, 0xFD, 0xFE, 0x0E, 0xBF, 0xFF, 0x17, 0x1F, 0x59, 0x6F, 0xAF, 0x13, 0xA0, 0x66, 0xAD, 0x85, 0x2F, 0x2B, 0x68, 0x9C, 0x3B, 0x5F, 0xB1, 0xBA, 0x14, 0x23, 0x9F, 0xC3, 0xCC, 0x53, 0x4B, 0x8B, 0xD7, 0x35, 0x54, 0xA4, 0x28, 0xC2, 0x1E, 0x32, 0x33, 0x19, 0x96, 0xDD, 0x7A, 0xAB, 0xDE, 0x5B, 0x0B, 0x0F, 0x44, 0x94, 0xEC, 0xF5, 0x04, 0x34, 0x9E, 0xC4, 0xC5, 0x30, 0xB3, 0x20, 0x6D, 0x82, 0x7B, 0x83, 0xA1, 0x92, 0x43, 0x1B, 0x7C, 0xB2, 0xB4, 0xB7, 0x37, 0x0D, 0x26, 0x07, 0x47, 0x8F, 0xAC, 0x3F, 0xC1, 0xCF, 0x3C, 0xD9, 0x12, 0x67, 0x69, 0x9B, 0x25, 0x09, 0x74, 0xA3, 0xB0, 0xBB, 0x42, 0x3E, 0x4F, 0x18, 0xD0, 0x05, 0x7D, 0x29, 0x2D, 0x55, 0x7F, 0x81, 0x71, 0x5A, 0x0A, 0x4C, 0x03, 0x76, 0x27, 0x57, 0x1C, 0x63, 0x6B, 0x73, 0x1A, 0x77, 0x87, 0x5D, 0x97, 0x61, 0x11, 0x21, 0x99, 0x58, 0x9D, 0x0C, 0xA2, 0x8C, 0x38, 0xA7, 0x6C, 0xA6, 0xC0, 0x56, 0xC7, 0x46, 0x51, 0x49, 0xB6, 0x1D, 0xC8, 0x48, 0xC9, 0x2E, 0x3D, 0x52, 0x80, 0x41, 0x50, 0x40, 0x70, 0x8E, 0x64, 0x45, 0x86, 0xCA, 0x16, 0xAE, 0xB5, 0x00, 0x7E, 0x2C, 0xB8, 0xB9, 0xBD, 0xBE, 0x8A, 0xCB, 0xD1, 0xD2, 0xD3, 0x62, 0x6E, 0x78, 0x79, 0x89, 0x84, 0x36, 0xD5, 0xDA, 0xCE, 0xA8, 0xDB, 0xDC, 0x3A, 0x39, 0xDF, 0x9A, 0xE0, 0xE1, 0xE3, 0x2A, 0xE5, 0xE6, 0x72, 0x31, 0xE7, 0x06, 0x5C, 0x88, 0x6A, 0xAA, 0xE9, 0x90, 0xEB, 0x4E, 0xEE, 0xEF, 0xCD, 0xF0, 0x24, 0x4A, 0x02, 0x4D, 0xEA, 0xF1, 0xF3, 0x15, 0xA9, 0x95, 0xF4, 0x65, 0xC6, 0x5E, 0xA5, 0x8D, 0xD8, 0xE8, 0xED, 0xF2, 0x10, 0xF6, 0xD6, 0x22, 0xD4, 0x91, 0xF7, 0xF8, 0xF9, 0xFA, 0x01, 0xE4, 0x60, 0xFB, 0xBC, 0xFC, 0x98]byte1 = [0x00, 0x03, 0x06, 0x05, 0x0C, 0x0F, 0x0A, 0x09, 0x18, 0x1B, 0x1E, 0x1D, 0x14, 0x17, 0x12, 0x11, 0x30, 0x33, 0x36, 0x35, 0x3C, 0x3F, 0x3A, 0x39, 0x28, 0x2B, 0x2E, 0x2D, 0x24, 0x27, 0x22, 0x21, 0x60, 0x63, 0x66, 0x65, 0x6C, 0x6F, 0x6A, 0x69, 0x78, 0x7B, 0x7E, 0x7D, 0x74, 0x77, 0x72, 0x71, 0x50, 0x53, 0x56, 0x55, 0x5C, 0x5F, 0x5A, 0x59, 0x48, 0x4B, 0x4E, 0x4D, 0x44, 0x47, 0x42, 0x41, 0xC0, 0xC3, 0xC6, 0xC5, 0xCC, 0xCF, 0xCA, 0xC9, 0xD8, 0xDB, 0xDE, 0xDD, 0xD4, 0xD7, 0xD2, 0xD1, 0xF0, 0xF3, 0xF6, 0xF5, 0xFC, 0xFF, 0xFA, 0xF9, 0xE8, 0xEB, 0xEE, 0xED, 0xE4, 0xE7, 0xE2, 0xE1, 0xA0, 0xA3, 0xA6, 0xA5, 0xAC, 0xAF, 0xAA, 0xA9, 0xB8, 0xBB, 0xBE, 0xBD, 0xB4, 0xB7, 0xB2, 0xB1, 0x90, 0x93, 0x96, 0x95, 0x9C, 0x9F, 0x9A, 0x99, 0x88, 0x8B, 0x8E, 0x8D, 0x84, 0x87, 0x82, 0x81, 0x9B, 0x98, 0x9D, 0x9E, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8F, 0x8C, 0x89, 0x8A, 0xAB, 0xA8, 0xAD, 0xAE, 0xA7, 0xA4, 0xA1, 0xA2, 0xB3, 0xB0, 0xB5, 0xB6, 0xBF, 0xBC, 0xB9, 0xBA, 0xFB, 0xF8, 0xFD, 0xFE, 0xF7, 0xF4, 0xF1, 0xF2, 0xE3, 0xE0, 0xE5, 0xE6, 0xEF, 0xEC, 0xE9, 0xEA, 0xCB, 0xC8, 0xCD, 0xCE, 0xC7, 0xC4, 0xC1, 0xC2, 0xD3, 0xD0, 0xD5, 0xD6, 0xDF, 0xDC, 0xD9, 0xDA, 0x5B, 0x58, 0x5D, 0x5E, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4F, 0x4C, 0x49, 0x4A, 0x6B, 0x68, 0x6D, 0x6E, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7F, 0x7C, 0x79, 0x7A, 0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2F, 0x2C, 0x29, 0x2A, 0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A]byte2 = [0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6E, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x7E, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8A, 0x8C, 0x8E, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9A, 0x9C, 0x9E, 0xA0, 0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC, 0xAE, 0xB0, 0xB2, 0xB4, 0xB6, 0xB8, 0xBA, 0xBC, 0xBE, 0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE, 0xD0, 0xD2, 0xD4, 0xD6, 0xD8, 0xDA, 0xDC, 0xDE, 0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEC, 0xEE, 0xF0, 0xF2, 0xF4, 0xF6, 0xF8, 0xFA, 0xFC, 0xFE, 0x1B, 0x19, 0x1F, 0x1D, 0x13, 0x11, 0x17, 0x15, 0x0B, 0x09, 0x0F, 0x0D, 0x03, 0x01, 0x07, 0x05, 0x3B, 0x39, 0x3F, 0x3D, 0x33, 0x31, 0x37, 0x35, 0x2B, 0x29, 0x2F, 0x2D, 0x23, 0x21, 0x27, 0x25, 0x5B, 0x59, 0x5F, 0x5D, 0x53, 0x51, 0x57, 0x55, 0x4B, 0x49, 0x4F, 0x4D, 0x43, 0x41, 0x47, 0x45, 0x7B, 0x79, 0x7F, 0x7D, 0x73, 0x71, 0x77, 0x75, 0x6B, 0x69, 0x6F, 0x6D, 0x63, 0x61, 0x67, 0x65, 0x9B, 0x99, 0x9F, 0x9D, 0x93, 0x91, 0x97, 0x95, 0x8B, 0x89, 0x8F, 0x8D, 0x83, 0x81, 0x87, 0x85, 0xBB, 0xB9, 0xBF, 0xBD, 0xB3, 0xB1, 0xB7, 0xB5, 0xAB, 0xA9, 0xAF, 0xAD, 0xA3, 0xA1, 0xA7, 0xA5, 0xDB, 0xD9, 0xDF, 0xDD, 0xD3, 0xD1, 0xD7, 0xD5, 0xCB, 0xC9, 0xCF, 0xCD, 0xC3, 0xC1, 0xC7, 0xC5, 0xFB, 0xF9, 0xFF, 0xFD, 0xF3, 0xF1, 0xF7, 0xF5, 0xEB, 0xE9, 0xEF, 0xED, 0xE3, 0xE1, 0xE7, 0xE5]for i in range(len(test)): test[i] ^= key1[i]get1 = [0xE8, 0x2A, 0x34, 0xBE, 0x63, 0x3B, 0x87, 0xA3, 0xD1, 0x01, 0xDA, 0x6B, 0x74, 0x8C, 0xA2, 0x11]get2 = [0xE8, 0x3B, 0xDA, 0x11, 0x63, 0x01, 0xA2, 0xBE, 0xD1, 0x8C, 0x34, 0xA3, 0x74, 0x2A, 0x87, 0x6B]for k in range(1, 10): ntest = [0] * 16 for i in range(len(test)): ntest[get2.index(get1[i])] = buf[test[i]] test = ntest ntest = [0] * 16 for i in range(0, len(test), 4): temp = test[i:i + 4] ntest[i] = byte1[temp[1]] ^ byte2[temp[0]] ^ temp[3] ^ temp[2] ntest[i + 1] = byte1[temp[2]] ^ byte2[temp[1]] ^ temp[3] ^ temp[0] ntest[i + 2] = byte1[temp[3]] ^ byte2[temp[2]] ^ temp[1] ^ temp[0] ntest[i + 3] = byte1[temp[0]] ^ byte2[temp[3]] ^ temp[2] ^ temp[1] test = ntest for i in range(len(test)): test[i] ^= key1[16 * k + i]ntest = [0] * 16for i in range(len(test)): ntest[get2.index(get1[i])] = buf[test[i]]test = ntestfor i in range(len(test)): test[i] ^= key1[16 * 10 + i]&#x27;&#x27;&#x27;解密&#x27;&#x27;&#x27;def sol(tar): temp = [BitVec(&#x27;%d&#x27; % i, 8) for i in range(4)] x = Solver() byte1Arr = Array(&#x27;byte1&#x27;, BitVecSort(8), BitVecSort(8)) byte2Arr = Array(&#x27;byte2&#x27;, BitVecSort(8), BitVecSort(8)) # 设置 byte1 和 byte2 数组的值 for i in range(256): x.add(byte1Arr[i] == BitVecVal(byte1[i], 8)) # 用你的值替换 byte1_values x.add(byte2Arr[i] == BitVecVal(byte2[i], 8)) # 用你的值替换 byte2_values # 定义目标数组 # 计算 ntest 的每一项，使用条件表达式 ntest = [0] * 4 ntest[0] = Select(byte1Arr, temp[1]) ^ Select(byte2Arr, temp[0]) ^ temp[3] ^ temp[2] ntest[1] = Select(byte1Arr, temp[2]) ^ Select(byte2Arr, temp[1]) ^ temp[3] ^ temp[0] ntest[2] = Select(byte1Arr, temp[3]) ^ Select(byte2Arr, temp[2]) ^ temp[1] ^ temp[0] ntest[3] = Select(byte1Arr, temp[0]) ^ Select(byte2Arr, temp[3]) ^ temp[2] ^ temp[1] for i in range(4): x.add(ntest[i] == tar[i]) ans = [] if x.check() == sat: model = x.model() for i in range(4): ans.append(model[temp[i]].as_long().real) return anstests=list(bytes.fromhex(&#x27;&#x27;&#x27;96 14 91 D5 1A B3 31 F3 89 A5 A1 55 3D 74 4E C9 E6 05 86 7F 71 3F 44 10 E6 50 DE 1A 49 20 35 AA&#x27;&#x27;&#x27;))for _ in range(0,len(tests),16): test=tests[_:_+16] for i in range(len(test)): test[i] ^= key1[16 * 10 + i] ntest = [0] * 16 for i in range(len(test)): ntest[i] = test[get2.index(get1[i])] ntest[i] = buf.index(ntest[i]) test = ntest for k in range(9, 0, -1): for i in range(len(test)): test[i] ^= key1[16 * k + i] for i in range(0,16,4): ans=sol(test[i:i+4]) test[i:i+4]=ans ntest = [0] * 16 for i in range(len(test)): ntest[i] = test[get2.index(get1[i])] ntest[i] = buf.index(ntest[i]) test = ntest for i in range(len(test)): test[i] ^= key1[i] print(&quot;&quot;.join(map(chr,test)),end=&quot;&quot;)"},{"title":"Iris2025 WP","path":"/2025/01/14/Iris2025-WP/","content":"Now this will run on my 486?动调能找到异或 数据拿出来解密 12345import libnumdata1=[0x0BF51B0D7,0x75CC547B,0x4F0FD83A,0x0A2117744,0x0ECD0CEC6,0x2E19F9FA,0x32EA83D9,0x0E5EB61E0,]data2=[0x0CC38C2BE,0x0EAA2018,0x1078B74D,0x0DB631232,0x98A0A199,0x42789493,0x5685E086,0x98CA4085,]for i in range(len(data1)): print(libnum.n2s(data1[i]^data2[i]).decode()[::-1],end=&quot;&quot;) Crispy Kelp复现完算法解密即可 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&#x27;&#x27;&#x27;加密&#x27;&#x27;&#x27;data1 = 1111rd = [0x00000016, 0x0000006E, 0x00000008, 0x0000009F, 0x0000005D, 0x00000069, 0x00000001, 0x000000F8, 0x000000C0, 0x0000006D, 0x000000A7, 0x00000021]test = [ord(i) for i in &quot;flagflagflag&quot;]for i in range(len(test)): test[i] = (test[i] ^ rd[i]) + data1test2 = [0] * len(test)for i in range(len(test)): test2[i] = (test[i] ^ rd[i]) + data1runes = test + [data1] + test2# 将 Unicode 码点转换为字符串string = &#x27;&#x27;.join(chr(rune) for rune in runes)# 将字符串编码为 UTF-8 字节utf8_bytes = string.encode(&#x27;utf-8&#x27;)temp = list(utf8_bytes)table = &quot;0123456789abcdef&quot;enc = &quot;&quot;for i in range(len(temp)): enc += table[temp[i] &gt;&gt; 4] + table[temp[i] &amp; 0xf]&#x27;&#x27;&#x27;解密&#x27;&#x27;&#x27;enc=open(r&quot;kelpfile&quot;,&quot;r&quot;).read()temp = []for i in range(0, len(enc), 2): temp.append((table.index(enc[i]) &lt;&lt; 4) + table.index(enc[i + 1]))# 将 UTF-8 字节序列转换为字符串string = bytes(temp).decode(&#x27;utf-8&#x27;)# 将字符串转换为 Unicode 码点列表runes = [ord(char) for char in string]idx = len(runes) // 2test = runes[:idx]data1 = runes[idx]test2 = runes[idx + 1:]rd = []for i in range(len(test)): rd.append((test2[i] - data1) ^ test[i])for i in range(len(test)): test[i] = (test[i] - data1) ^ rd[i]print(&quot;&quot;.join(map(chr, test)))#irisctf&#123;k3lp_1s_4_h34lthy_r3pl4c3m3n7_f0r_ch1p5&#125; bunny jumper慢慢跟算法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188enc=[ &quot;dW1wanVrcGp&quot;, 151986214, &quot;dW1wanZtcGp&quot;, 168894767, &quot;dW1wahVtcGp&quot;, 143414, &quot;dW1wanVtEGp&quot;, 202515241, &quot;dW1x6nVtcGp&quot;, 219753011, &quot;dW1wcn89cGp&quot;, 268849, &quot;dW1xKnVucSp&quot;, 18095146, &quot;dW1xKhU9cGp&quot;, 35464242, &quot;dW1wOnVsMAp&quot;, 51128620, &quot;dW1wQnBtaGp&quot;, 51782960, &quot;dW1x6zVv8Gp&quot;, 68360487, &quot;dW1wCnVt1Wp&quot;, 85665324, &quot;dW1waXVv+mp&quot;, 84281399, &quot;dW1xL3ZtcGp&quot;, 102047534, &quot;dW1wfnVtEG9&quot;, 253767992, &quot;dW1x6nVFcH5&quot;, 118959923, &quot;dW1wanfucH5&quot;, 119284279, &quot;dW1xKPZtcGp&quot;, 135141663, &quot;dW1xKiVtdmp&quot;, 152903206, &quot;dW1xKtVtdmp&quot;, 153103667, &quot;dW1xKn9ucGp&quot;, 168895531, &quot;dW1xL3VucGp&quot;, 185603370, &quot;dW1x6PVtWGp&quot;, 236723758, &quot;dW1wCnVFcG9&quot;, 286799160, &quot;dW1xLHXNcGp&quot;, 387656501, &quot;dW1xKnVFWH5&quot;, 320086583, &quot;dW1xKnVFcS9&quot;, 303307048, &quot;dW1wQtXNWGp&quot;, 170208564,][::-1]import base64def b64d(str1,string1=&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;): return base64.b64decode(str1.translate(str.maketrans(string1,&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;)))def fun(argc): temp=list(b64d(argc)) for i in range(len(temp)): temp[i]^=ord(&quot;jump&quot;[i%4]) bins=[] for i in temp: bins+=list(bin(i)[2:].rjust(8,&quot;0&quot;)) i=0 length=[] while i&lt;len(bins): if bins[i]!=&quot;1&quot;: length.append(0) i+=1 else: length.append(int(&quot;&quot;.join(bins[i+1:i+5][::-1]),2)) i+=5 dic=&#123;&#125; for i in range(len(length)): if length[i]!=0: dic[chr(i)]=length[i] result=&quot;&quot; if len(dic)==1: for j in dic.keys(): result+=j*4 elif len(dic)==3: for j in dic.keys(): if dic[j]==1: result+=j*2 else: result+=j else: result+=&quot;&quot;.join(dic.keys()) return resultdef fun2(data): return list(data.to_bytes(4,&quot;little&quot;))for i in range(0,len(enc),2): s=fun(&quot;anVtcGp1bXBq&quot;+enc[i+1]+&quot;1bXBqdW1wanVtcGp1bXBqdQ==&quot;) idx=fun2(enc[i]) print(idx,s)# 输入数据data = [ ([52, 45, 37, 10], &quot;bdhn&quot;), ([40, 25, 20, 18], &quot;_nwy&quot;), ([55, 34, 20, 19], &quot;_nrw&quot;), ([53, 43, 27, 23], &quot;_aah&quot;), ([56, 53, 24, 17], &quot;aan&#125;&quot;), ([46, 30, 28, 14], &quot;__br&quot;), ([42, 21, 16, 11], &quot;_ann&quot;), ([43, 36, 17, 10], &quot;_hnn&quot;), ([51, 45, 32, 9], &quot;_duu&quot;), ([38, 30, 29, 9], &quot;_euu&quot;), ([31, 25, 14, 8], &quot;_bff&quot;), ([55, 34, 28, 7], &quot;nrr&#123;&quot;), ([51, 47, 23, 7], &quot;__n&#123;&quot;), ([56, 49, 32, 15], &quot;cuu&#125;&quot;), ([46, 31, 21, 6], &quot;_aff&quot;), ([55, 8, 6, 5], &quot;ffrt&quot;), ([44, 38, 27, 5], &quot;aatu&quot;), ([39, 25, 19, 4], &quot;__cn&quot;), ([48, 37, 22, 3], &quot;biss&quot;), ([44, 41, 12, 3], &quot;asyy&quot;), ([50, 36, 29, 2], &quot;_eei&quot;), ([42, 28, 20, 1], &quot;_rrw&quot;), ([49, 26, 4, 0], &quot;cchi&quot;), ([51, 42, 25, 13], &quot;____&quot;), ([41, 35, 18, 12], &quot;yyyy&quot;), ([54, 48, 2, 0], &quot;iiii&quot;), ([47, 33, 17, 10], &quot;nnnn&quot;), ([38, 32, 15, 9], &quot;uuuu&quot;),][::-1]# 初始化 flag 的数组flag = [&#x27;&#x27;] * 57 # 假设 flag 长度为 57def solve(index, flag): print(index,&quot;&quot;.join(flag)) # 递归结束条件：所有组都处理完 if index == len(data): return &#x27;&#x27;.join(flag) # 返回拼接结果 positions, chars = data[index] unique_permutations = set() # 用于存储唯一排列 # 手动生成去重排列 def generate_permutations(chars, path): if len(path) == len(chars): unique_permutations.add(tuple(path)) return for i, c in enumerate(chars): if i &gt; 0 and chars[i] == chars[i - 1] and not used[i - 1]: continue if not used[i]: used[i] = True generate_permutations(chars, path + [c]) used[i] = False # 标记数组，用于控制排列生成 chars = sorted(chars) # 排序以便去重处理 used = [False] * len(chars) generate_permutations(chars, []) for perm in unique_permutations: # 遍历所有唯一排列 temp_flag = flag[:] # 创建 flag 的临时副本 valid = True # 尝试将排列填入对应位置 for pos, char in zip(positions, perm): if temp_flag[pos] == &#x27;&#x27; or temp_flag[pos] == char: temp_flag[pos] = char else: valid = False # 冲突时标记为无效 break if valid: # 如果当前排列有效，则递归尝试下一个组 result = solve(index + 1, temp_flag) if result: # 如果找到解，则返回结果 return result return None # 无法找到解时返回 None# 调用递归函数，从第 0 组开始result = solve(0, flag)print(&quot;Recovered flag:&quot;, result)#irisctf&#123;funny_bunny_was_a_hare_funny_bunny_had_nice_hair&#125;"},{"title":"idapython获取cpython数据","path":"/2024/12/24/idapython获取cpython数据/","content":"cpython中使用结构体封装数据，简单写了个脚本快速转化获取数据 可以获取选中地址的数据，或者所有寄存器的值 输出内容如下：import idaapiimport ida_bytesimport ida_funcsimport ida_namefrom ida_bytes import get_bytes, patch_byte, patch_dwordfrom idautils import CodeRefsToimport ida_kernwinimport ida_bytesimport idcimport ida_naltimport osREGS = [&quot;RAX&quot;, &quot;RBX&quot;, &quot;RCX&quot;, &quot;RDX&quot;, &quot;R8&quot;, &quot;R9&quot;, &quot;R10&quot;, &quot;R11&quot;, &quot;R12&quot;, &quot;R13&quot;, &quot;R14&quot;, &quot;R15&quot;]ACTION_GETMEMDATA = &quot;devil:getmemdata&quot;ACTION_GETREGDATA = &quot;devil:getregdata&quot;ACTION_GETIMPORTFUN = &quot;devil:getimportfun&quot;ACTION_EXPORTSTRUCTURE = &quot;devil:getexportstructures&quot;def export_structures(): &quot;&quot;&quot;导出所有结构体定义到指定目录，每个结构体一个文件&quot;&quot;&quot; output_dir=&quot;structures_output&quot; if not os.path.exists(output_dir): os.makedirs(output_dir) sid = idaapi.get_first_struc_idx() while sid != idaapi.BADADDR: struc_id = idaapi.get_struc_by_idx(sid) struct = idaapi.get_struc(struc_id) if struct: struct_name = idaapi.get_struc_name(struct.id) safe_struct_name = struct_name.replace(&quot;::&quot;, &quot;_&quot;).replace(&quot;&lt;&quot;, &quot;_&quot;).replace(&quot;&gt;&quot;, &quot;_&quot;) output_file = os.path.join(output_dir, f&quot;&#123;safe_struct_name&#125;.h&quot;) try: with open(output_file, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f: f.write(f&quot;struct &#123;struct_name&#125; &#123;&#123; &quot;) for member in struct.members: m_name = idaapi.get_member_name(member.id) or &quot;unnamed_member&quot; m_offset = member.soff m_size = idaapi.get_member_size(member) tif = idaapi.tinfo_t() if idaapi.get_member_tinfo(tif, member): m_type_str = tif.dstr() else: m_type_str = &quot;unknown&quot; f.write(f&quot; &#123;m_type_str&#125; &#123;m_name&#125;; // offset: 0x&#123;m_offset:X&#125;, size: &#123;m_size&#125; &quot;) f.write(&quot;&#125;; &quot;) print(f&quot;结构体 &#123;struct_name&#125; 已导出到 &#123;output_file&#125;&quot;) except OSError as e: print(f&quot;无法导出结构体 &#123;struct_name&#125; 到文件 &#123;output_file&#125;: &#123;e&#125;&quot;) sid = idaapi.get_next_struc_idx(sid)def get_external_functions(): if not idaapi.is_debugger_on(): return nimps = idaapi.get_import_module_qty() for i in range(nimps): # 获取模块名称 module_name = idaapi.get_import_module_name(i) if not module_name: continue # 使用回调函数处理每个导入函数 def imp_cb(ea, name, ordinal): if name: print(f&quot;Address: &#123;hex(ida_bytes.get_qword(ea))&#125;, Function: &#123;name&#125;&quot;) return True # 枚举该模块的所有导入函数 idaapi.enum_import_names(i, imp_cb)&#x27;&#x27;&#x27;相当于2**30进制，转化一下数据&#x27;&#x27;&#x27;def convert2Long(data, length): result = 0 for i in range(length): result += (data[i] &lt;&lt; (30 * i)) return result&#x27;&#x27;&#x27;获取PyLong&#x27;&#x27;&#x27;def getLong(addr): ispyd = idaapi.get_root_filename().endswith(&quot;pyd&quot;) addr += 0x8 length = ida_bytes.get_qword(addr + 0x8) if ispyd: length//=8 data = [ida_bytes.get_dword(addr + 0x8 * 2 + 0x4 * (i)) for i in range(length)] data = convert2Long(data, length) return data&#x27;&#x27;&#x27;获取PyList&#x27;&#x27;&#x27;def getList(addr): addr+=0x8 length = ida_bytes.get_qword(addr + 0x8) listAddr = ida_bytes.get_qword(addr + 0x10) test=ida_bytes.get_qword(listAddr) if test==0: return [] data = [getLong(ida_bytes.get_qword(listAddr + 0x8 * i)) for i in range(length)] return datadef getTuple(addr): length=ida_bytes.get_qword(addr+0x10) if length==0: return [] data=[getLong(ida_bytes.get_qword(addr+0x18+0x8*i)) for i in range(length)] return datadef getRange(addr): addr+=0x8 data = [getLong(ida_bytes.get_qword(addr + 0x8 + 0x8 * i)) for i in range(3)] return datadef getString(addr): strtype = ida_nalt.STRTYPE_C max_length = ida_bytes.get_max_strlit_length(addr, ida_nalt.STRTYPE_C) string = ida_bytes.get_strlit_contents(addr, max_length, strtype) if string: return string.decode(&#x27;utf-8&#x27;)def getBytes(addr): addr+=8 length=ida_bytes.get_qword(addr+0x8) result=ida_bytes.get_bytes(addr+0x18,length) return resultdef read_ptr(ea): if idaapi.get_inf_structure().is_64bit(): return idaapi.get_qword(ea) return idaapi.get_dword(ea)def getMemData(selected_address=None, info=&quot;&quot;,tag=&quot;&quot;): # 获取当前选中的地址 if selected_address == None: selected_address = ida_kernwin.get_screen_ea() try: type = idc.get_name(ida_bytes.get_qword(selected_address + 0x8)) except: return if type and type.startswith(&quot;python&quot;): if info != &quot;&quot;: info = info + &quot;--&gt;&quot; if type.endswith(&quot;PyLong_Type&quot;): print(info + &quot;PyLong_Type:&quot;, hex(getLong(selected_address))) if type.endswith(&quot;PyList_Type&quot;): data = getList(selected_address) print(info + &quot;PyList_Type:[&quot;+&quot;,&quot;.join(map(hex, data))+&quot;]&quot;) if type.endswith(&quot;PyRange_Type&quot;): print(info + &quot;PyRange_Type:&quot;, end=&quot;&quot;) print(&quot;(&quot;+&quot;,&quot;.join(map(hex,getRange(selected_address)))+&quot;)&quot;) if type.endswith(&quot;PyType_Type&quot;): print(info + &quot;PyType_Type:&quot;, end=&quot;&quot;) print(getString(ida_bytes.get_qword(selected_address+0x18))) if type.endswith(&quot;PyBytes_Type&quot;): print(info + &quot;PyBytes_Type:&quot;, end=&quot;&quot;) print(str(getBytes(selected_address))) if type.endswith(&quot;PyUnicode_Type&quot;): print(info + &quot;PyUnicode_Type:&quot;, end=&quot;&quot;) print(getString(selected_address+0x28)) if type.endswith(&quot;PyTuple_Type&quot;): print(info + &quot;PyTuple_Type:&quot;, end=&quot;&quot;) print(&quot;(&quot;+&quot;,&quot;.join(map(hex, getTuple(selected_address)))+&quot;)&quot;) else: if tag==&quot;&quot;: getMemData(read_ptr(selected_address),info,&quot;tag&quot;)def getRegData(): print(&quot; ----------------reg&#x27;s data------------------------&quot;) for reg in REGS: getMemData(idc.get_reg_value(reg), reg)class menu_action_handler_t(idaapi.action_handler_t): &quot;&quot;&quot; Action handler for menu actions &quot;&quot;&quot; def __init__(self, action): idaapi.action_handler_t.__init__(self) self.action = action def activate(self, ctx): if self.action == ACTION_GETMEMDATA: getMemData() if self.action == ACTION_GETREGDATA: getRegData() if self.action == ACTION_GETIMPORTFUN: get_external_functions() if self.action == ACTION_EXPORTSTRUCTURE: export_structures() def update(self, ctx): return idaapi.AST_ENABLE_ALWAYSclass UI_Hook(idaapi.UI_Hooks): def __init__(self): idaapi.UI_Hooks.__init__(self) def finish_populating_widget_popup(self, form, popup): form_type = idaapi.get_widget_type(form) # 判断窗口 if form_type == idaapi.BWN_DISASM or form_type == idaapi.BWN_DUMP: # 用于获取当前活动窗口（view）中的选定区域，并将选定区域的起始地址和结束地址分别存储在 t0 和 t1 中 # t0, t1, view = idaapi.twinpos_t(), idaapi.twinpos_t(), idaapi.get_current_viewer() # if idaapi.read_selection(view, t0, t1) or idc.get_item_size(idc.get_screen_ea()) &gt; 1: idaapi.attach_action_to_popup(form, popup, ACTION_GETMEMDATA, &quot;devil/&quot;) idaapi.attach_action_to_popup(form, popup, ACTION_GETREGDATA, &quot;devil/&quot;) idaapi.attach_action_to_popup(form, popup, ACTION_GETIMPORTFUN, &quot;devil/&quot;) idaapi.attach_action_to_popup(form, popup, ACTION_EXPORTSTRUCTURE, &quot;devil/&quot;)def PLUGIN_ENTRY(): return MyIDAPlugin()class MyIDAPlugin(idaapi.plugin_t): flags = idaapi.PLUGIN_KEEP comment = &quot;Devil&#x27;s plugin&quot; help = &quot;Devil&#x27;s plugin&quot; wanted_name = &quot;Devil&#x27;s plugin&quot; wanted_hotkey = &quot;Ctrl-F8&quot; def init(self): self.hexrays_inited = False self.registered_actions = [] self.registered_hx_actions = [] global ARCH global BITS ARCH = idaapi.ph_get_id() info = idaapi.get_inf_structure() if info.is_64bit(): BITS = 64 elif info.is_32bit(): BITS = 32 else: BITS = 16 # Register menu actions menu_actions = ( idaapi.action_desc_t(ACTION_GETMEMDATA, &quot;GetMemData&quot;, menu_action_handler_t(ACTION_GETMEMDATA), None, None, 80), idaapi.action_desc_t(ACTION_GETREGDATA, &quot;GetRegData&quot;, menu_action_handler_t(ACTION_GETREGDATA), None, None, 80), idaapi.action_desc_t(ACTION_GETIMPORTFUN, &quot;GetImportFun&quot;, menu_action_handler_t(ACTION_GETIMPORTFUN), None, None, 80), idaapi.action_desc_t(ACTION_EXPORTSTRUCTURE, &quot;ExportStructures&quot;, menu_action_handler_t(ACTION_EXPORTSTRUCTURE), None, None, 80), ) for action in menu_actions: idaapi.register_action(action) self.registered_actions.append(action.name) self.ui_hook = UI_Hook() self.ui_hook.hook() # 件已成功加载，并且将在 IDA Pro 运行期间保持活动状态。如果一个插件的 init 方法返回此值，那么插件的 run 方法可以在任何时候被调用。 return idaapi.PLUGIN_KEEP def run(self, arg): pass def term(self): if hasattr(self, &quot;ui_hook&quot;): self.ui_hook.unhook() # Unregister actions for action in self.registered_actions: idaapi.unregister_action(action) if self.hexrays_inited: # Unregister hexrays actions for action in self.registered_hx_actions: idaapi.unregister_action(action) if self.hx_hook: idaapi.remove_hexrays_callback(self.hx_hook.callback) idaapi.term_hexrays_plugin()"},{"title":"2024国城杯wp","path":"/2024/12/08/2024国城杯wp/","content":"Crush’s_secretxxtea 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667from ctypes import *import libnumdef MX(z, y, sum1, k, p, e): return c_uint32(((z.value &gt;&gt; 5 ^ y.value &lt;&lt; 2) + (y.value &gt;&gt; 3 ^ z.value &lt;&lt; 4)) ^ ( (sum1.value ^ y.value) + (k[(p &amp; 3) ^ e.value] ^ z.value)))def btea(v, k, n, delta): if n &gt; 1: sum1 = c_uint32(0) z = c_uint32(v[n - 1]) rounds = 6 + 52 // n e = c_uint32(0) while rounds &gt; 0: sum1.value += delta e.value = ((sum1.value &gt;&gt; 2) &amp; 3) for p in range(n - 1): y = c_uint32(v[p + 1]) v[p] = c_uint32(v[p] + MX(z, y, sum1, k, p, e).value).value z.value = v[p] y = c_uint32(v[0]) v[n - 1] = c_uint32(v[n - 1] + MX(z, y, sum1, k, n - 1, e).value).value z.value = v[n - 1] rounds -= 1 else: sum1 = c_uint32(0) n = -n rounds = 6 + 52 // n sum1.value = rounds * delta y = c_uint32(v[0]) e = c_uint32(0) while rounds &gt; 0: e.value = ((sum1.value &gt;&gt; 2) &amp; 3) for p in range(n - 1, 0, -1): z = c_uint32(v[p - 1]) v[p] = c_uint32(v[p] - MX(z, y, sum1, k, p, e).value).value y.value = v[p] z = c_uint32(v[n - 1]) v[0] = c_uint32(v[0] - MX(z, y, sum1, k, 0, e).value).value y.value = v[0] sum1.value -= delta rounds -= 1 return vif __name__ == &#x27;__main__&#x27;: enc = [1517703050, 95477623, 4043431785, 4190195444, 670053776, 2113090127, 775040372, 2401896892, 2883756247, 204081662, 898182066, 1403763218] flag = &#x27;&#x27; for i in range(0, len(enc), 2): a = enc[i:i + 2] k = [85988116, 1375809856, 85988116, 1375809856] delta = -0x61C88647 n = len(a) res = btea(a, k, -n, delta) for i in res: flag += (libnum.n2s(i)[::-1].decode()) print(flag) roundbase部分就中间两位调换了 round部分可以诸位爆破，因为每一位都可能多解，那就得递归 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109public class Round &#123; /* loaded from: classes.dex */ public static class Result &#123; private int num; private int rip; public Result(int i, int i2) &#123; this.num = i; this.rip = i2; &#125; public int getNum() &#123; return this.num; &#125; public int getRip() &#123; return this.rip; &#125; &#125; public static boolean round(int[] iArr, String str) &#123; Result add; int length = str.length(); int[] iArr2 = new int[length]; int[] iArr3 = &#123;352, 646, 752, 882, 65, 0, 122, 0, 0, 7, 350, 360&#125;; int i = 33; for (int i2 = 0; i2 &lt; str.length(); i2++) &#123; int charAt = str.charAt(i2); for (int i3 = 0; i3 &lt; 32; i3++) &#123; int i4 = (((iArr[i] ^ charAt) % 5) + 5) % 5; if (i4 == 0) &#123; add = add(iArr, charAt, i); &#125; else if (i4 == 1) &#123; add = sub(iArr, charAt, i); &#125; else if (i4 == 2) &#123; add = xor(iArr, charAt, i); &#125; else if (i4 == 3) &#123; add = shl(charAt, i); &#125; else if (i4 == 4) &#123; add = shr(charAt, i); &#125; else &#123; add = new Result(charAt, i); &#125; charAt = add.getNum(); i = add.getRip(); &#125; iArr2[i2] = charAt; &#125; for (int i5 = 0; i5 &lt; length; i5++) &#123; if (iArr2[i5] != iArr3[i5]) &#123; return false; &#125; &#125; return true; &#125; public static Result add(int[] iArr, int i, int i2) &#123; int i3 = (((i + iArr[i2]) % 1024) + 1024) % 1024; return new Result(i3, (i2 + i3) % 1024); &#125; public static Result sub(int[] iArr, int i, int i2) &#123; int i3 = (((i - iArr[i2]) % 1024) + 1024) % 1024; return new Result(i3, (i2 + i3) % 1024); &#125; public static Result xor(int[] iArr, int i, int i2) &#123; int i3 = (iArr[i2] ^ i) % 1024; return new Result(i3, (i2 + i3) % 1024); &#125; public static Result shl(int i, int i2) &#123; int i3 = (i &gt;&gt; 3) % 1024; return new Result(i3, (i2 + i3) % 1024); &#125; public static Result shr(int i, int i2) &#123; int i3 = (i &lt;&lt; 3) % 1024; return new Result(i3, (i2 + i3) % 1024); &#125; public static boolean isValidInput(String str) &#123; return str.matches(&quot;[a-zA-Z_]*&quot;); &#125; public static void crack(int level, String base,int[] iArr) &#123; if(level==12)&#123; System.out.println(base); return; &#125; for (int i = 0; i &lt;= 128; i++) &#123; char ch = (char) i; // 判断是否是可打印字符 if (!Character.isISOControl(ch) &amp;&amp; !Character.isWhitespace(ch)) &#123; String test=base.concat(String.valueOf(ch)); if(round(iArr,test) &amp;&amp; isValidInput(test))&#123; crack(level+1,test,iArr); &#125; &#125; &#125; &#125; public static void main(String[] args) &#123; int[] iArr=&#123;924, 967, 912, 973, 921, 936, 916, 926, 942, 963, 930, 927, 912, 971, 924, 961, 909, 956, 896, 906, 946, 991, 958, 899, 900, 991, 904, 981, 897, 944, 908, 902, 902, 1003, 906, 951, 952, 995, 948, 1001, 949, 900, 952, 946, 906, 999, 902, 955, 940, 1015, 928, 1021, 937, 920, 932, 942, 926, 1011, 914, 943, 928, 1019, 940, 1009, 989, 1004, 976, 986, 994, 911, 1006, 979, 980, 911, 984, 901, 977, 992, 988, 982, 1014, 923, 1018, 967, 968, 915, 964, 921, 965, 1012, 968, 962, 1018, 919, 1014, 971, 1020, 935, 1008, 941, 1017, 968, 1012, 1022, 974, 931, 962, 1023, 1008, 939, 1020, 929, 1005, 988, 992, 1002, 978, 959, 990, 995, 996, 959, 1000, 949, 993, 976, 1004, 998, 806, 843, 810, 791, 792, 835, 788, 841, 789, 804, 792, 786, 810, 839, 806, 795, 780, 855, 768, 861, 777, 824, 772, 782, 830, 851, 818, 783, 768, 859, 780, 849, 829, 780, 816, 826, 770, 879, 782, 819, 820, 879, 824, 869, 817, 768, 828, 822, 790, 891, 794, 807, 808, 883, 804, 889, 805, 788, 808, 802, 794, 887, 790, 811, 860, 775, 848, 781, 857, 872, 852, 862, 878, 771, 866, 863, 848, 779, 860, 769, 845, 892, 832, 842, 882, 799, 894, 835, 836, 799, 840, 789, 833, 880, 844, 838, 838, 811, 842, 887, 888, 803, 884, 809, 885, 836, 888, 882, 842, 807, 838, 891, 876, 823, 864, 829, 873, 856, 868, 878, 862, 819, 850, 879, 864, 827, 876, 817, 669, 684, 656, 666, 674, 719, 686, 659, 660, 719, 664, 709, 657, 672, 668, 662, 694, 731, 698, 647, 648, 723, 644, 729, 645, 692, 648, 642, 698, 727, 694, 651, 700, 743, 688, 749, 697, 648, 692, 702, 654, 739, 642, 703, 688, 747, 700, 737, 685, 668, 672, 682, 658, 767, 670, 675, 676, 767, 680, 757, 673, 656, 684, 678, 742, 651, 746, 727, 728, 643, 724, 649, 725, 740, 728, 722, 746, 647, 742, 731, 716, 663, 704, 669, 713, 760, 708, 718, 766, 659, 754, 719, 704, 667, 716, 657, 765, 716, 752, 762, 706, 687, 718, 755, 756, 687, 760, 677, 753, 704, 764, 758, 726, 699, 730, 743, 744, 691, 740, 697, 741, 724, 744, 738, 730, 695, 726, 747, 540, 583, 528, 589, 537, 552, 532, 542, 558, 579, 546, 543, 528, 587, 540, 577, 525, 572, 512, 522, 562, 607, 574, 515, 516, 607, 520, 597, 513, 560, 524, 518, 518, 619, 522, 567, 568, 611, 564, 617, 565, 516, 568, 562, 522, 615, 518, 571, 556, 631, 544, 637, 553, 536, 548, 558, 542, 627, 530, 559, 544, 635, 556, 625, 605, 620, 592, 602, 610, 527, 622, 595, 596, 527, 600, 517, 593, 608, 604, 598, 630, 539, 634, 583, 584, 531, 580, 537, 581, 628, 584, 578, 634, 535, 630, 587, 636, 551, 624, 557, 633, 584, 628, 638, 590, 547, 578, 639, 624, 555, 636, 545, 621, 604, 608, 618, 594, 575, 606, 611, 612, 575, 616, 565, 609, 592, 620, 614, 422, 459, 426, 407, 408, 451, 404, 457, 405, 420, 408, 402, 426, 455, 422, 411, 396, 471, 384, 477, 393, 440, 388, 398, 446, 467, 434, 399, 384, 475, 396, 465, 445, 396, 432, 442, 386, 495, 398, 435, 436, 495, 440, 485, 433, 384, 444, 438, 406, 507, 410, 423, 424, 499, 420, 505, 421, 404, 424, 418, 410, 503, 406, 427, 476, 391, 464, 397, 473, 488, 468, 478, 494, 387, 482, 479, 464, 395, 476, 385, 461, 508, 448, 458, 498, 415, 510, 451, 452, 415, 456, 405, 449, 496, 460, 454, 454, 427, 458, 503, 504, 419, 500, 425, 501, 452, 504, 498, 458, 423, 454, 507, 492, 439, 480, 445, 489, 472, 484, 494, 478, 435, 466, 495, 480, 443, 492, 433, 285, 300, 272, 282, 290, 335, 302, 275, 276, 335, 280, 325, 273, 288, 284, 278, 310, 347, 314, 263, 264, 339, 260, 345, 261, 308, 264, 258, 314, 343, 310, 267, 316, 359, 304, 365, 313, 264, 308, 318, 270, 355, 258, 319, 304, 363, 316, 353, 301, 284, 288, 298, 274, 383, 286, 291, 292, 383, 296, 373, 289, 272, 300, 294, 358, 267, 362, 343, 344, 259, 340, 265, 341, 356, 344, 338, 362, 263, 358, 347, 332, 279, 320, 285, 329, 376, 324, 334, 382, 275, 370, 335, 320, 283, 332, 273, 381, 332, 368, 378, 322, 303, 334, 371, 372, 303, 376, 293, 369, 320, 380, 374, 342, 315, 346, 359, 360, 307, 356, 313, 357, 340, 360, 354, 346, 311, 342, 363, 156, 199, 144, 205, 153, 168, 148, 158, 174, 195, 162, 159, 144, 203, 156, 193, 141, 188, 128, 138, 178, 223, 190, 131, 132, 223, 136, 213, 129, 176, 140, 134, 134, 235, 138, 183, 184, 227, 180, 233, 181, 132, 184, 178, 138, 231, 134, 187, 172, 247, 160, 253, 169, 152, 164, 174, 158, 243, 146, 175, 160, 251, 172, 241, 221, 236, 208, 218, 226, 143, 238, 211, 212, 143, 216, 133, 209, 224, 220, 214, 246, 155, 250, 199, 200, 147, 196, 153, 197, 244, 200, 194, 250, 151, 246, 203, 252, 167, 240, 173, 249, 200, 244, 254, 206, 163, 194, 255, 240, 171, 252, 161, 237, 220, 224, 234, 210, 191, 222, 227, 228, 191, 232, 181, 225, 208, 236, 230, 38, 75, 42, 23, 24, 67, 20, 73, 21, 36, 24, 18, 42, 71, 38, 27, 12, 87, 0, 93, 9, 56, 4, 14, 62, 83, 50, 15, 0, 91, 12, 81, 61, 12, 48, 58, 2, 111, 14, 51, 52, 111, 56, 101, 49, 0, 60, 54, 22, 123, 26, 39, 40, 115, 36, 121, 37, 20, 40, 34, 26, 119, 22, 43, 92, 7, 80, 13, 89, 104, 84, 94, 110, 3, 98, 95, 80, 11, 92, 1, 77, 124, 64, 74, 114, 31, 126, 67, 68, 31, 72, 21, 65, 112, 76, 70, 70, 43, 74, 119, 120, 35, 116, 41, 117, 68, 120, 114, 74, 39, 70, 123, 108, 55, 96, 61, 105, 88, 100, 110, 94, 51, 82, 111, 96, 59, 108, 49&#125;; crack(0,&quot;&quot;,iArr); &#125;&#125;"},{"title":"2024-word-wide-ctf WP","path":"/2024/12/01/2024-word-wide-ctf-WP/","content":"Flag Checker利用长度为4的pbInput的md5值解密资源文件 导出资源文件 大量重复的字节，说明是和0异或的，就是hash的一部分，利用这部分去爆破hash 12345678910111213from itertools import *import hashlibfrom tqdm import tqdmimport stringdef getdigest(content): return hashlib.md5(str(content).encode(&#x27;utf-8&#x27;)).hexdigest()for test in tqdm(product(string.printable,repeat=4)): if &quot;0F4D0DB3668DD58C&quot;.lower() in getdigest(&quot;&quot;.join(list(test))): print(&quot;&quot;.join(list(test))) exit() #FLAG 利用得到的字节解密资源文件 找到关键代码，发现aes加密，动调拿到密钥和iv都是REVERSE ENGINEER（这里不知道怎么动调，附加进程不行，直接改rip跳的） 解密拿到flag wwf{Try_t0_c0mmun1c4t3_by_p1p3_H0p3_Y0u_L1k3_It} Ransom Waifujs解混淆， https://tool.yuanrenxue.cn/decode_obfuscator 解出来可以发现是vm 这里是每个opcode对应的操作 在每个opcode中添加console.log输出日志 最终js为 12345678910111213141516171819202122232425262728293031323334353637383940414243444546function check(_0x25883e) &#123; const _0x55b20f = [3, 0, 4, 0, 5, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 6, 0, 7, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 8, 1, 9, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 10, 2, 11, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 12, 0, 13, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 14, 0, 15, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 16, 1, 17, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 18, 2, 19, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 20, &#x27;6&#x27;, &#x27;11&#x27;, 21, &#x27;4&#x27;, 22, &#x27;8&#x27;, 23, 0, 24, 0, 25, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 26, 0, 27, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 28, 1, 29, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 30, 2, 31, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 32, 0, 33, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 34, 0, 35, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 36, 1, 37, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 38, 2, 39, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 40, &#x27;6&#x27;, &#x27;11&#x27;, 41, &#x27;4&#x27;, 42, &#x27;8&#x27;, &#x27;13&#x27;, 43, 0, 44, 0, 45, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 46, 0, 47, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 48, 1, 49, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 50, 2, 51, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 52, 0, 53, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 54, 0, 55, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 56, 1, 57, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 58, 2, 59, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 60, &#x27;6&#x27;, &#x27;11&#x27;, 61, &#x27;4&#x27;, 62, &#x27;8&#x27;, &#x27;13&#x27;, 63, 0, 64, 0, 65, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 66, 0, 67, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 68, 1, 69, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 70, 2, 71, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 72, 0, 73, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 74, 0, 75, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 76, 1, 77, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 78, 2, 79, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 80, &#x27;6&#x27;, &#x27;11&#x27;, 81, &#x27;4&#x27;, 82, &#x27;8&#x27;, &#x27;13&#x27;, 83, 0, 84, 0, 85, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 86, 0, 87, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 88, 1, 89, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 90, 2, 91, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 92, 0, 93, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 94, 0, 95, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 96, 1, 97, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 98, 2, 99, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 100, &#x27;6&#x27;, &#x27;11&#x27;, 101, &#x27;4&#x27;, 102, &#x27;8&#x27;, &#x27;13&#x27;, 103, 0, 104, 0, 105, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 106, 0, 107, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 108, 1, 109, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 110, 2, 111, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 112, 0, 113, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 114, 0, 115, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 116, 1, 117, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 118, 2, 119, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 120, &#x27;6&#x27;, &#x27;11&#x27;, 121, &#x27;4&#x27;, 122, &#x27;8&#x27;, &#x27;13&#x27;, 123, 0, 124, 0, 125, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 126, 0, 127, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 128, 1, 129, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 130, 2, 131, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 132, 0, 133, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 134, 0, 135, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 136, 1, 137, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 138, 2, 139, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 140, &#x27;6&#x27;, &#x27;11&#x27;, 141, &#x27;4&#x27;, 142, &#x27;8&#x27;, &#x27;13&#x27;, 143, 0, 144, 0, 145, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 146, 0, 147, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 148, 1, 149, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 150, 2, 151, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 152, 0, 153, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 154, 0, 155, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 156, 1, 157, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 158, 2, 159, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 160, &#x27;6&#x27;, &#x27;11&#x27;, 161, &#x27;4&#x27;, 162, &#x27;8&#x27;, &#x27;13&#x27;, 163, 0, 164, 0, 165, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 166, 0, 167, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 168, 1, 169, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 170, 2, 171, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 172, 0, 173, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 174, 0, 175, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 176, 1, 177, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 178, 2, 179, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 180, &#x27;6&#x27;, &#x27;11&#x27;, 181, &#x27;4&#x27;, 182, &#x27;8&#x27;, &#x27;13&#x27;, 183, 0, 184, 0, 185, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 186, 0, 187, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 188, 1, 189, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 190, 2, 191, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 192, 0, 193, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 194, 0, 195, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 196, 1, 197, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 198, 2, 199, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 200, &#x27;6&#x27;, &#x27;11&#x27;, 201, &#x27;4&#x27;, 202, &#x27;8&#x27;, &#x27;13&#x27;, 203, 0, 204, 0, 205, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 206, 0, 207, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 208, 1, 209, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 210, 2, 211, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 212, 0, 213, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 214, 0, 215, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 216, 1, 217, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 218, 2, 219, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 220, &#x27;6&#x27;, &#x27;11&#x27;, 221, &#x27;4&#x27;, 222, &#x27;8&#x27;, &#x27;13&#x27;, 223, 0, 224, 0, 225, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 226, 0, 227, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 228, 1, 229, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 230, 2, 231, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 232, 0, 233, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 234, 0, 235, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 236, 1, 237, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 238, 2, 239, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 240, &#x27;6&#x27;, &#x27;11&#x27;, 241, &#x27;4&#x27;, 242, &#x27;8&#x27;, &#x27;13&#x27;, 243, 0, 244, 0, 245, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 246, 0, 247, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 248, 1, 249, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 250, 2, 251, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 252, 0, 253, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 254, 0, 255, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 256, 1, 257, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 258, 2, 259, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 260, &#x27;6&#x27;, &#x27;11&#x27;, 261, &#x27;4&#x27;, 262, &#x27;8&#x27;, &#x27;13&#x27;, 263, 0, 264, 0, 265, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 266, 0, 267, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 268, 1, 269, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 270, 2, 271, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 272, 0, 273, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 274, 0, 275, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 276, 1, 277, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 278, 2, 279, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 280, &#x27;6&#x27;, &#x27;11&#x27;, 281, &#x27;4&#x27;, 282, &#x27;8&#x27;, &#x27;13&#x27;, 283, 0, 284, 0, 285, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 286, 0, 287, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 288, 1, 289, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 290, 2, 291, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 292, 0, 293, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 294, 0, 295, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 296, 1, 297, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 298, 2, 299, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 300, &#x27;6&#x27;, &#x27;11&#x27;, 301, &#x27;4&#x27;, 302, &#x27;8&#x27;, &#x27;13&#x27;, 303, 0, 304, 0, 305, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 306, 0, 307, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 308, 1, 309, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 310, 2, 311, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 312, 0, 313, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 314, 0, 315, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 316, 1, 317, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 318, 2, 319, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 320, &#x27;6&#x27;, &#x27;11&#x27;, 321, &#x27;4&#x27;, 322, &#x27;8&#x27;, &#x27;13&#x27;, 323, 0, 324, 0, 325, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 326, 0, 327, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 328, 1, 329, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 330, 2, 331, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 332, 0, 333, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 334, 0, 335, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 336, 1, 337, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 338, 2, 339, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 340, &#x27;6&#x27;, &#x27;11&#x27;, 341, &#x27;4&#x27;, 342, &#x27;8&#x27;, &#x27;13&#x27;, 343, 0, 344, 0, 345, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 346, 0, 347, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 348, 1, 349, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 350, 2, 351, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 352, 0, 353, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 354, 0, 355, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 356, 1, 357, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 358, 2, 359, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 360, &#x27;6&#x27;, &#x27;11&#x27;, 361, &#x27;4&#x27;, 362, &#x27;8&#x27;, &#x27;13&#x27;, 363, 0, 364, 0, 365, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 366, 0, 367, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 368, 1, 369, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 370, 2, 371, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 372, 0, 373, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 374, 0, 375, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 376, 1, 377, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 378, 2, 379, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 380, &#x27;6&#x27;, &#x27;11&#x27;, 381, &#x27;4&#x27;, 382, &#x27;8&#x27;, &#x27;13&#x27;, 383, 0, 384, 0, 385, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 386, 0, 387, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 388, 1, 389, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 390, 2, 391, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 392, 0, 393, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 394, 0, 395, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 396, 1, 397, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 398, 2, 399, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 400, &#x27;6&#x27;, &#x27;11&#x27;, 401, &#x27;4&#x27;, 402, &#x27;8&#x27;, &#x27;13&#x27;, 403, 0, 404, 0, 405, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 406, 0, 407, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 408, 1, 409, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 410, 2, 411, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 412, 0, 413, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 414, 0, 415, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 416, 1, 417, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 418, 2, 419, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 420, &#x27;6&#x27;, &#x27;11&#x27;, 421, &#x27;4&#x27;, 422, &#x27;8&#x27;, &#x27;13&#x27;, 423, 0, 424, 0, 425, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 426, 0, 427, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 428, 1, 429, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 430, 2, 431, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 432, 0, 433, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 434, 0, 435, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 436, 1, 437, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 438, 2, 439, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 440, &#x27;6&#x27;, &#x27;11&#x27;, 441, &#x27;4&#x27;, 442, &#x27;8&#x27;, &#x27;13&#x27;, 443, 0, 444, 0, 445, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 446, 0, 447, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 448, 1, 449, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 450, 2, 451, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 452, 0, 453, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 454, 0, 455, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 456, 1, 457, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 458, 2, 459, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 460, &#x27;6&#x27;, &#x27;11&#x27;, 461, &#x27;4&#x27;, 462, &#x27;8&#x27;, &#x27;13&#x27;, 463, 0, 464, 0, 465, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 466, 0, 467, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 468, 1, 469, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 470, 2, 471, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 472, 0, 473, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 474, 0, 475, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 476, 1, 477, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 478, 2, 479, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 480, &#x27;6&#x27;, &#x27;11&#x27;, 481, &#x27;4&#x27;, 482, &#x27;8&#x27;, &#x27;13&#x27;, 483, 0, 484, 0, 485, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 486, 0, 487, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 488, 1, 489, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 490, 2, 491, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 492, 0, 493, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 494, 0, 495, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 496, 1, 497, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 498, 2, 499, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 500, &#x27;6&#x27;, &#x27;11&#x27;, 501, &#x27;4&#x27;, 502, &#x27;8&#x27;, &#x27;13&#x27;, 503, 0, 504, 0, 505, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 506, 0, 507, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 508, 1, 509, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 510, 2, 511, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 512, 0, 513, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 514, 0, 515, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 516, 1, 517, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 518, 2, 519, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 520, &#x27;6&#x27;, &#x27;11&#x27;, 521, &#x27;4&#x27;, 522, &#x27;8&#x27;, &#x27;13&#x27;, 523, 0, 524, 0, 525, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 526, 0, 527, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 528, 1, 529, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 530, 2, 531, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 532, 0, 533, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 534, 0, 535, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 536, 1, 537, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 538, 2, 539, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 540, &#x27;6&#x27;, &#x27;11&#x27;, 541, &#x27;4&#x27;, 542, &#x27;8&#x27;, &#x27;13&#x27;, 543, 0, 544, 0, 545, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 546, 0, 547, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 548, 1, 549, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 550, 2, 551, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 552, 0, 553, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 554, 0, 555, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 556, 1, 557, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 558, 2, 559, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 560, &#x27;6&#x27;, &#x27;11&#x27;, 561, &#x27;4&#x27;, 562, &#x27;8&#x27;, &#x27;13&#x27;, 563, 0, 564, 0, 565, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 566, 0, 567, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 568, 1, 569, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 570, 2, 571, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 572, 0, 573, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 574, 0, 575, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 576, 1, 577, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 578, 2, 579, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 580, &#x27;6&#x27;, &#x27;11&#x27;, 581, &#x27;4&#x27;, 582, &#x27;8&#x27;, &#x27;13&#x27;, 583, 0, 584, 0, 585, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 586, 0, 587, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 588, 1, 589, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 590, 2, 591, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 592, 0, 593, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 594, 0, 595, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 596, 1, 597, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 598, 2, 599, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 600, &#x27;6&#x27;, &#x27;11&#x27;, 601, &#x27;4&#x27;, 602, &#x27;8&#x27;, &#x27;13&#x27;, 603, 0, 604, 0, 605, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 606, 0, 607, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 608, 1, 609, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 610, 2, 611, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 612, 0, 613, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 614, 0, 615, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 616, 1, 617, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 618, 2, 619, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 620, &#x27;6&#x27;, &#x27;11&#x27;, 621, &#x27;4&#x27;, 622, &#x27;8&#x27;, &#x27;13&#x27;, 623, 0, 624, 0, 625, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 626, 0, 627, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 628, 1, 629, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 630, 2, 631, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 632, 0, 633, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 634, 0, 635, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 636, 1, 637, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 638, 2, 639, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 640, &#x27;6&#x27;, &#x27;11&#x27;, 641, &#x27;4&#x27;, 642, &#x27;8&#x27;, &#x27;13&#x27;, 643, 0, 644, 0, 645, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 646, 0, 647, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 648, 1, 649, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 650, 2, 651, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 652, 0, 653, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 654, 0, 655, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 656, 1, 657, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 658, 2, 659, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 660, &#x27;6&#x27;, &#x27;11&#x27;, 661, &#x27;4&#x27;, 662, &#x27;8&#x27;, &#x27;13&#x27;, 663, 0, 664, 0, 665, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 666, 0, 667, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 668, 1, 669, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 670, 2, 671, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 672, 0, 673, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 674, 0, 675, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 676, 1, 677, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 678, 2, 679, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 680, &#x27;6&#x27;, &#x27;11&#x27;, 681, &#x27;4&#x27;, 682, &#x27;8&#x27;, &#x27;13&#x27;, 683, 0, 684, 0, 685, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 686, 0, 687, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 688, 1, 689, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 690, 2, 691, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 692, 0, 693, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 694, 0, 695, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 696, 1, 697, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 698, 2, 699, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 700, &#x27;6&#x27;, &#x27;11&#x27;, 701, &#x27;4&#x27;, 702, &#x27;8&#x27;, &#x27;13&#x27;, 703, 0, 704, 0, 705, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 706, 0, 707, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 708, 1, 709, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 710, 2, 711, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 712, 0, 713, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 714, 0, 715, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 716, 1, 717, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 718, 2, 719, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 720, &#x27;6&#x27;, &#x27;11&#x27;, 721, &#x27;4&#x27;, 722, &#x27;8&#x27;, &#x27;13&#x27;, 723, 0, 724, 0, 725, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 726, 0, 727, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 728, 1, 729, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 730, 2, 731, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 732, 0, 733, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 734, 0, 735, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 736, 1, 737, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 738, 2, 739, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 740, &#x27;6&#x27;, &#x27;11&#x27;, 741, &#x27;4&#x27;, 742, &#x27;8&#x27;, &#x27;13&#x27;, 743, 0, 744, 0, 745, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 746, 0, 747, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;11&#x27;, 1, 748, 1, 749, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 2, 750, 2, 751, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;6&#x27;, &#x27;11&#x27;, 0, 752, 0, 753, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, 0, 754, 0, 755, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, 1, 756, 1, 757, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;11&#x27;, 2, 758, 2, 759, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, 760, &#x27;6&#x27;, &#x27;11&#x27;, 761, &#x27;4&#x27;, 762, &#x27;8&#x27;, &#x27;13&#x27;], _0x5ab57e = [&quot;1DwVRiEiGWjuyupm&quot;, &quot;vYb2h2aIafJZwgFX&quot;, &quot;6kbUutVIpZMxQYvc&quot;, &quot;7QakoJNVWhG5ymIp&quot;, &quot;poB7FQorqiVyhK5t&quot;, &quot;7W2gzK0RBrwugCj1&quot;, &quot;XIpQkMw4ISxevkCX&quot;, &quot;LOEYrHUc1FSi3472&quot;, &quot;3JkFWJMpwKlUqWqQ&quot;, &quot;l5wN4Rh3eeS8DRsr&quot;, &quot;6eMeF1wcAxpjHw10&quot;, &quot;ZOVFVc4IYO42SqW4&quot;, &quot;sBZO1SnyyWECqtfA&quot;, &quot;HbHq2ZbQRVaAQn2s&quot;, &quot;mLONgGjM6o1iN4TF&quot;], _0x11a6b6 = &#123; &quot;1DwVRiEiGWjuyupm&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKICAgICAgICBsZXQgYSA9IHlbeC5wb3AoKV0sIGIgPSB5W3gucG9wKCldCgljb25zb2xlLmxvZyhhLGIsImJbYV09IixiW2FdKQogICAgICAgIHJldHVybiBiW2FdCiAgICB9&quot;, &quot;vYb2h2aIafJZwgFX&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKCWxldCBhPXlbeC5wb3AoKV07Cgljb25zb2xlLmxvZyhhLCJhdCgwKT0iLGEuY2hhckNvZGVBdCgwKSk7CiAgICAgICAgcmV0dXJuIGEuY2hhckNvZGVBdCgwKQogICAgfQ==&quot;, &quot;6kbUutVIpZMxQYvc&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKCWxldCBhPXlbeC5wb3AoKV07Cgljb25zb2xlLmxvZyhhLCIhYT0iLCFhKTsKICAgICAgICByZXR1cm4gIWEKICAgIH0=&quot;, &quot;7QakoJNVWhG5ymIp&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKICAgICAgICBsZXQgYSA9IHlbeC5wb3AoKV0sIGIgPSB5W3gucG9wKCldCgljb25zb2xlLmxvZyhhLGIsImIlYT0iLGIlYSk7CiAgICAgICAgcmV0dXJuIGIgJSBhCiAgICB9&quot;, &quot;poB7FQorqiVyhK5t&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKCWxldCBhPXlbeC5wb3AoKV0sYj15W3gucG9wKCldOwoJY29uc29sZS5sb2coYSxiLCJhKmI9IixhKmIpOwogICAgICAgIHJldHVybiBhKmI7CiAgICB9&quot;, &quot;7W2gzK0RBrwugCj1&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKCWxldCBhPXlbeC5wb3AoKV0sYj15W3gucG9wKCldOwoJY29uc29sZS5sb2coYSxiLCIxIC8gKGEgLyBiKSIsMSAvIChhIC8gYikpCiAgICAgICAgcmV0dXJuIDEgLyAoYSAvIGIpCiAgICB9&quot;, &quot;XIpQkMw4ISxevkCX&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKICAgICAgICBsZXQgYSA9IHlbeC5wb3AoKV0sIGIgPSB5W3gucG9wKCldCiAgICAgICAgbGV0IGNhcnJ5ID0gYSAmIGI7CiAgICAgICAgbGV0IHJlc3VsdCA9IGEgXiBiOwogICAgICAgIHdoaWxlIChjYXJyeSAhPSAwKSB7CiAgICAgICAgICAgIGxldCBzaGlmdGVkY2FycnkgPSBjYXJyeSA8PCAxOwogICAgICAgICAgICBjYXJyeSA9IHJlc3VsdCAmIHNoaWZ0ZWRjYXJyeTsKICAgICAgICAgICAgcmVzdWx0IF49IHNoaWZ0ZWRjYXJyeTsKICAgICAgICB9CmNvbnNvbGUubG9nKGEsYiwiZnVuMT0iLHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgfQ==&quot;, &quot;LOEYrHUc1FSi3472&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKICAgICAgICBsZXQgYiA9IHlbeC5wb3AoKV0sIGEgPSB5W3gucG9wKCldCiAgICAgICAgbGV0IGNhcnJ5ID0gYSAmICh+YiArIDEpOwogICAgICAgIGxldCByZXN1bHQgPSBhIF4gKH5iICsgMSk7CiAgICAgICAgd2hpbGUgKGNhcnJ5ICE9IDApIHsKICAgICAgICAgICAgbGV0IHNoaWZ0ZWRjYXJyeSA9IGNhcnJ5IDw8IDE7CiAgICAgICAgICAgIGNhcnJ5ID0gcmVzdWx0ICYgc2hpZnRlZGNhcnJ5OwogICAgICAgICAgICByZXN1bHQgXj0gc2hpZnRlZGNhcnJ5OwogICAgICAgIH0KY29uc29sZS5sb2coYSxiLCJmdW4yPSIscmVzdWx0KTsKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICB9&quot;, //judge &quot;3JkFWJMpwKlUqWqQ&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKbGV0IGE9eVt4LnBvcCgpXSxiPXlbeC5wb3AoKV07CmNvbnNvbGUubG9nKGEsYiwiYT09Yj0iLGE9PT1iKTsKICAgICAgICByZXR1cm4gYT09PWIKICAgIH0=&quot;, &quot;l5wN4Rh3eeS8DRsr&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKCWxldCBhPSB5W3gucG9wKCldLGI9IHlbeC5wb3AoKV07CmNvbnNvbGUubG9nKGEsYiwiYSE9Yj0iLGEhPT1iKTsKICAgICAgICByZXR1cm4gYSAhPT0gYgogICAgfQ==&quot;, &quot;6eMeF1wcAxpjHw10&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKbGV0IGE9eVt4LnBvcCgpXSxiPXlbeC5wb3AoKV07CmNvbnNvbGUubG9nKGEsYiwiYSZiPSIsYSZiKTsKICAgICAgICByZXR1cm4gYSZiOwogICAgfQ==&quot;, &quot;ZOVFVc4IYO42SqW4&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKICAgICAgICBsZXQgYT15W3gucG9wKCldLGI9eVt4LnBvcCgpXTsKY29uc29sZS5sb2coYSxiLCJhXmI9IixhXmIpOwogICAgICAgIHJldHVybiBhXmI7CgogICAgfQ==&quot;, &quot;sBZO1SnyyWECqtfA&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKbGV0IGE9eVt4LnBvcCgpXSxiPXlbeC5wb3AoKV07CmNvbnNvbGUubG9nKGEsYiwiYXxiPSIsYXxiKTsKICAgICAgICByZXR1cm4gYXxiOwoKICAgIH0=&quot;, &quot;HbHq2ZbQRVaAQn2s&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKbGV0IGE9eVt4LnBvcCgpXSxiPXlbeC5wb3AoKV07CmNvbnNvbGUubG9nKGEsYiwiYSYmYj0iLGEmJmIpOwogICAgICAgIHJldHVybiBhJiZiOwoKICAgIH0=&quot;, &quot;mLONgGjM6o1iN4TF&quot;: &quot;ZnVuY3Rpb24gKHgsIHkpIHsKbGV0IGE9eVt4LnBvcCgpXSxiPXlbeC5wb3AoKV07CmNvbnNvbGUubG9nKGEsYiwiYXx8Yj0iLGF8fGIpOwogICAgICAgIHJldHVybiBhfHxiOwoKICAgIH0=&quot; &#125;; const _0x1c72ba = [&quot;d3dme2Zha2VfZmxhZ30=&quot;, &quot;d3dme2Zha2VfZmxhZ30=&quot;, &quot;d3dme2Zha2VfZmxhZ30=&quot;, 14, 38, &quot;length&quot;, 39, &quot;length&quot;, 0, &quot;length&quot;, 0, &quot;length&quot;, 38, &quot;length&quot;, 37, &quot;length&quot;, 0, &quot;length&quot;, 0, &quot;length&quot;, 69, 69, 103569, 188, 39, &quot;length&quot;, 40, &quot;length&quot;, 1, &quot;length&quot;, 1, &quot;length&quot;, 39, &quot;length&quot;, 38, &quot;length&quot;, 1, &quot;length&quot;, 1, &quot;length&quot;, 57, 213, 1410273, 236, 40, &quot;length&quot;, 41, &quot;length&quot;, 2, &quot;length&quot;, 2, &quot;length&quot;, 40, &quot;length&quot;, 39, &quot;length&quot;, 2, &quot;length&quot;, 2, &quot;length&quot;, 38, 182, 1194466, 83, 41, &quot;length&quot;, 42, &quot;length&quot;, 3, &quot;length&quot;, 3, &quot;length&quot;, 41, &quot;length&quot;, 40, &quot;length&quot;, 3, &quot;length&quot;, 3, &quot;length&quot;, 248, 254, 3304794, 168, 42, &quot;length&quot;, 43, &quot;length&quot;, 4, &quot;length&quot;, 4, &quot;length&quot;, 42, &quot;length&quot;, 41, &quot;length&quot;, 4, &quot;length&quot;, 4, &quot;length&quot;, 101, 115, 4250975, 205, 43, &quot;length&quot;, 44, &quot;length&quot;, 5, &quot;length&quot;, 5, &quot;length&quot;, 43, &quot;length&quot;, 42, &quot;length&quot;, 5, &quot;length&quot;, 5, &quot;length&quot;, 162, 144, 1434672, 245, 44, &quot;length&quot;, 45, &quot;length&quot;, 6, &quot;length&quot;, 6, &quot;length&quot;, 44, &quot;length&quot;, 43, &quot;length&quot;, 6, &quot;length&quot;, 6, &quot;length&quot;, 125, 151, 1657074, 49, 45, &quot;length&quot;, 46, &quot;length&quot;, 7, &quot;length&quot;, 7, &quot;length&quot;, 45, &quot;length&quot;, 44, &quot;length&quot;, 7, &quot;length&quot;, 7, &quot;length&quot;, 139, 61, 792390, 72, 46, &quot;length&quot;, 47, &quot;length&quot;, 8, &quot;length&quot;, 8, &quot;length&quot;, 46, &quot;length&quot;, 45, &quot;length&quot;, 8, &quot;length&quot;, 8, &quot;length&quot;, 182, 243, 55890, 239, 47, &quot;length&quot;, 48, &quot;length&quot;, 9, &quot;length&quot;, 9, &quot;length&quot;, 47, &quot;length&quot;, 46, &quot;length&quot;, 9, &quot;length&quot;, 9, &quot;length&quot;, 152, 44, 468292, 121, 48, &quot;length&quot;, 49, &quot;length&quot;, 10, &quot;length&quot;, 10, &quot;length&quot;, 48, &quot;length&quot;, 47, &quot;length&quot;, 10, &quot;length&quot;, 10, &quot;length&quot;, 128, 222, 4570092, 32, 49, &quot;length&quot;, 50, &quot;length&quot;, 11, &quot;length&quot;, 11, &quot;length&quot;, 49, &quot;length&quot;, 48, &quot;length&quot;, 11, &quot;length&quot;, 11, &quot;length&quot;, 209, 226, 4415362, 222, 50, &quot;length&quot;, 51, &quot;length&quot;, 12, &quot;length&quot;, 12, &quot;length&quot;, 50, &quot;length&quot;, 49, &quot;length&quot;, 12, &quot;length&quot;, 12, &quot;length&quot;, 209, 122, 4538278, 34, 51, &quot;length&quot;, 52, &quot;length&quot;, 13, &quot;length&quot;, 13, &quot;length&quot;, 51, &quot;length&quot;, 50, &quot;length&quot;, 13, &quot;length&quot;, 13, &quot;length&quot;, 39, 24, 209304, 69, 52, &quot;length&quot;, 53, &quot;length&quot;, 14, &quot;length&quot;, 14, &quot;length&quot;, 52, &quot;length&quot;, 51, &quot;length&quot;, 14, &quot;length&quot;, 14, &quot;length&quot;, 235, 161, 1588748, 49, 53, &quot;length&quot;, 54, &quot;length&quot;, 15, &quot;length&quot;, 15, &quot;length&quot;, 53, &quot;length&quot;, 52, &quot;length&quot;, 15, &quot;length&quot;, 15, &quot;length&quot;, 58, 208, 3339440, 118, 54, &quot;length&quot;, 55, &quot;length&quot;, 16, &quot;length&quot;, 16, &quot;length&quot;, 54, &quot;length&quot;, 53, &quot;length&quot;, 16, &quot;length&quot;, 16, &quot;length&quot;, 214, 72, 952128, 252, 55, &quot;length&quot;, 56, &quot;length&quot;, 17, &quot;length&quot;, 17, &quot;length&quot;, 55, &quot;length&quot;, 54, &quot;length&quot;, 17, &quot;length&quot;, 17, &quot;length&quot;, 19, 117, 2922543, 134, 56, &quot;length&quot;, 57, &quot;length&quot;, 18, &quot;length&quot;, 18, &quot;length&quot;, 56, &quot;length&quot;, 55, &quot;length&quot;, 18, &quot;length&quot;, 18, &quot;length&quot;, 249, 16, 312864, 63, 57, &quot;length&quot;, 58, &quot;length&quot;, 19, &quot;length&quot;, 19, &quot;length&quot;, 57, &quot;length&quot;, 56, &quot;length&quot;, 19, &quot;length&quot;, 19, &quot;length&quot;, 191, 31, 929380, 109, 58, &quot;length&quot;, 59, &quot;length&quot;, 20, &quot;length&quot;, 20, &quot;length&quot;, 58, &quot;length&quot;, 57, &quot;length&quot;, 20, &quot;length&quot;, 20, &quot;length&quot;, 156, 197, 8851407, 28, 59, &quot;length&quot;, 60, &quot;length&quot;, 21, &quot;length&quot;, 21, &quot;length&quot;, 59, &quot;length&quot;, 58, &quot;length&quot;, 21, &quot;length&quot;, 21, &quot;length&quot;, 125, 155, 1846515, 253, 60, &quot;length&quot;, 61, &quot;length&quot;, 22, &quot;length&quot;, 22, &quot;length&quot;, 60, &quot;length&quot;, 59, &quot;length&quot;, 22, &quot;length&quot;, 22, &quot;length&quot;, 33, 220, 2953720, 207, 61, &quot;length&quot;, 62, &quot;length&quot;, 23, &quot;length&quot;, 23, &quot;length&quot;, 61, &quot;length&quot;, 60, &quot;length&quot;, 23, &quot;length&quot;, 23, &quot;length&quot;, 205, 237, 3463992, 249, 62, &quot;length&quot;, 63, &quot;length&quot;, 24, &quot;length&quot;, 24, &quot;length&quot;, 62, &quot;length&quot;, 61, &quot;length&quot;, 24, &quot;length&quot;, 24, &quot;length&quot;, 101, 44, 1280928, 159, 63, &quot;length&quot;, 64, &quot;length&quot;, 25, &quot;length&quot;, 25, &quot;length&quot;, 63, &quot;length&quot;, 62, &quot;length&quot;, 25, &quot;length&quot;, 25, &quot;length&quot;, 5, 30, 127560, 163, 64, &quot;length&quot;, 65, &quot;length&quot;, 26, &quot;length&quot;, 26, &quot;length&quot;, 64, &quot;length&quot;, 63, &quot;length&quot;, 26, &quot;length&quot;, 26, &quot;length&quot;, 208, 13, 197301, 227, 65, &quot;length&quot;, 66, &quot;length&quot;, 27, &quot;length&quot;, 27, &quot;length&quot;, 65, &quot;length&quot;, 64, &quot;length&quot;, 27, &quot;length&quot;, 27, &quot;length&quot;, 36, 18, 386910, 64, 66, &quot;length&quot;, 67, &quot;length&quot;, 28, &quot;length&quot;, 28, &quot;length&quot;, 66, &quot;length&quot;, 65, &quot;length&quot;, 28, &quot;length&quot;, 28, &quot;length&quot;, 226, 39, 114738, 158, 67, &quot;length&quot;, 68, &quot;length&quot;, 29, &quot;length&quot;, 29, &quot;length&quot;, 67, &quot;length&quot;, 66, &quot;length&quot;, 29, &quot;length&quot;, 29, &quot;length&quot;, 23, 55, 742775, 206, 68, &quot;length&quot;, 69, &quot;length&quot;, 30, &quot;length&quot;, 30, &quot;length&quot;, 68, &quot;length&quot;, 67, &quot;length&quot;, 30, &quot;length&quot;, 30, &quot;length&quot;, 17, 42, 501690, 59, 69, &quot;length&quot;, 70, &quot;length&quot;, 31, &quot;length&quot;, 31, &quot;length&quot;, 69, &quot;length&quot;, 68, &quot;length&quot;, 31, &quot;length&quot;, 31, &quot;length&quot;, 78, 196, 4778284, 96, 70, &quot;length&quot;, 71, &quot;length&quot;, 32, &quot;length&quot;, 32, &quot;length&quot;, 70, &quot;length&quot;, 69, &quot;length&quot;, 32, &quot;length&quot;, 32, &quot;length&quot;, 11, 55, 272085, 122, 71, &quot;length&quot;, 72, &quot;length&quot;, 33, &quot;length&quot;, 33, &quot;length&quot;, 71, &quot;length&quot;, 70, &quot;length&quot;, 33, &quot;length&quot;, 33, &quot;length&quot;, 79, 192, 1371072, 236, 72, &quot;length&quot;, 73, &quot;length&quot;, 34, &quot;length&quot;, 34, &quot;length&quot;, 72, &quot;length&quot;, 71, &quot;length&quot;, 34, &quot;length&quot;, 34, &quot;length&quot;, 32, 148, 2206236, 123, 73, &quot;length&quot;, 74, &quot;length&quot;, 35, &quot;length&quot;, 35, &quot;length&quot;, 73, &quot;length&quot;, 72, &quot;length&quot;, 35, &quot;length&quot;, 35, &quot;length&quot;, 215, 161, 4155088, 182, 74, &quot;length&quot;, 75, &quot;length&quot;, 36, &quot;length&quot;, 36, &quot;length&quot;, 74, &quot;length&quot;, 73, &quot;length&quot;, 36, &quot;length&quot;, 36, &quot;length&quot;, 90, 247, 11333348, 182, 75, &quot;length&quot;, 76, &quot;length&quot;, 37, &quot;length&quot;, 37, &quot;length&quot;, 75, &quot;length&quot;, 74, &quot;length&quot;, 37, &quot;length&quot;, 37, &quot;length&quot;, 116, 130, 2257580, 118, 132, 18, 178, 129, 129, 76, 46, 122, 245, 148, 189, 102, 88, 141, 71, 190, 159, 64, 149, 222, 4, 73, 81, 187, 219, 72, 89, 16, 234, 186, 137, 111, 90, 81, 85, 98, 167, 96, 253, 171, 177, 222, 14, 140, 126, 202, 44, 144, 199, 228, 38, 160, 156, 186, 13, 138, 197, 246, 208, 157, 251, 211, 127, 140, 13, 48, 30, 86, 151, 56, 205, 168, 209, 203, 150, 93, 110, 51, 238, 220, 200, 67, 239, 98, 7, 199, 64, 25, 161, 170, 13, 178, 69, 30, 133, 1, 50, 28, 181, 106, 156, 204, 166, 213, 104, 28, 220, 230, 56, 153, 231, 129, 243, 70, 222, 24, 3, 200, 140, 86, 73, 168, 158, 242, 244, 170, 93, 53, 69, 222, 198, 10, 62, 148, 75, 226, 184, 178, 3, 176, 234, 204, 88, 212, 156, 108, 91, 208, 113, 121, 132, 203, 108, 49, 191, 167, 153, 49, 95, 52, 150, 190, 64, 231, 245, 33, 159, 62, 134, 187, 86, 41, 21, 242, 190, 11, 44, 54, 245, 113, 1, 88, 70, 144, 43, 24, 116, 22, 149, 49, 179, 0, 188, 54, 77, 166, 195, 141, 130, 217, 136, 242, 127, 144, 38, 130, 183, 75, 156, 181, 45, 69, 56, 78, 165, 133, 193, 38, 78, 204, 178, 187, 187, 184, 201, 152, 47, 25, 115, 46, 71, 55, 245, 149, 147, 223, 98, 118, 100, 4, 189, 175, 79, 210, 117, 180, 165, 224, 215, 153, 49, 169, 133, 158, 214, 248, 222, 112, 7, 182, 164, 151, 182, 93, 147, 161, 225, 72, 238, 179, 26, 24, 114, 27, 51, 94, 226, 249, 164, 116, 129, 68, 194, 228, 222, 65, 98, 47, 100, 169, 52, 121, 139, 102, 218, 246, 117, 16, 37, 124, 118, 158, 65, 251, 47, 254, 64, 2, 181, 197, 196, 102, 198, 136, 51, 35, 107, 219, 171, 158, 226, 91, 214, 47, 208, 19, 173, 146, 121, 97, 195, 0, 218, 197, 100, 188, 235, 75, 181, 222, 194, 154, 8, 205, 79, 234, 85, 126, 218, 213, 234, 218, 36, 120, 39, 98, 238, 100, 133, 9, 9, 241, 0, 19, 168, 251, 188, 182, 51, 104, 141, 231, 48, 158, 22, 29, 132, 145, 28, 206, 3, 66, 78, 19, 113, 145, 56, 73, 67, 148, 48, 174, 86, 4, 133, 139, 128, 49, 213, 222, 9, 116, 44, 251, 247, 32, 94, 155, 7, 124, 211, 33, 73, 196, 80, 58, 241, 177, 119, 225, 126, 149, 49, 202, 122, 48, 151, 111, 117, 157, 172, 2, 239, 114, 170, 156, 130, 224, 202, 23, 7, 118, 128, 231, 89, 34, 180, 224, 181, 11, 82, 207, 57, 29, 144, 136, 98, 176, 166, 62, 51, 232, 126, 125, 125, 141, 110, 218, 147, 57, 204, 24, 205, 94, 171, 41, 88, 183, 218, 222, 153, 158, 16, 188, 36, 147, 253, 124, 10, 36, 155, 216, 111, 93, 128, 223, 120, 145, 200]; const _0x584466 = []; for (let _0x4426f4 = 0; _0x4426f4 &lt; _0x25883e[&quot;length&quot;]; _0x4426f4++) &#123; _0x1c72ba[_0x4426f4] = _0x25883e[_0x4426f4]; &#125; function _0x37448b(_0x5f5c9d) &#123; _0x1c72ba[&quot;push&quot;](_0x5f5c9d); return _0x1c72ba[&quot;length&quot;] - 1; &#125; _0x55b20f[&quot;forEach&quot;](_0x5e5b3d =&gt; &#123; if (typeof _0x5e5b3d === &quot;string&quot;) &#123; const _0xc55560 = eval(&#x27;(&#x27; + atob(_0x11a6b6[_0x5ab57e[parseInt(_0x5e5b3d)]]) + &#x27;)&#x27;); _0x584466[&quot;push&quot;](_0x37448b(_0xc55560(_0x584466, _0x1c72ba))); &#125; else &#123; _0x584466[&quot;push&quot;](_0x5e5b3d); &#125; &#125;); return _0x1c72ba[_0x584466[&quot;pop&quot;]()];&#125; 拿到日志，还原加密逻辑，最后爆破一下就能得到flag 1234567891011121314151617181920212223242526272829303132333435test=[ord(i) for i in &quot;wwf&#123;&quot;+&quot;0&quot;*33+&quot;&#125;&quot;]key1 = [252, 174, 221, 116, 74, 140, 110, 29]key2 = [166, 74, 96, 96, 218, 220, 56, 111]data1 = [14, 188, 236, 83, 168, 205, 245, 49, 72, 239, 121, 32, 222, 34, 69, 49, 118, 252, 134, 63, 109, 28, 253, 207, 249, 159, 163, 227, 64, 158, 206, 59, 96, 122, 236, 123, 182, 182]data2 = [69, 57, 38, 248, 101, 162, 125, 139, 182, 152, 128, 209, 209, 39, 235, 58, 214, 19, 249, 191, 156, 125, 33, 205, 101, 5, 208, 36, 226, 23, 17, 78, 11, 79, 32, 215, 90, 116]data3 = [69, 213, 182, 254, 115, 144, 151, 61, 243, 44, 222, 226, 122, 24, 161, 208, 72, 117, 16, 31, 197, 155, 220, 237, 44, 30, 13, 18, 39, 55, 42, 196, 55, 192, 148, 161, 247, 130]enc = [103569, 1410273, 1194466, 3304794, 4250975, 1434672, 1657074, 792390, 55890, 468292, 4570092, 4415362, 4538278, 209304, 1588748, 3339440, 952128, 2922543, 312864, 929380, 8851407, 1846515, 2953720, 3463992, 1280928, 127560, 197301, 386910, 114738, 742775, 501690, 4778284, 272085, 1371072, 2206236, 4155088, 11333348, 2257580]for k in range(4,38): for j in range(128): test[k]=j found=False for i in range(38): temp1=test[i]^test[(i+1)%38] temp2=temp1*key1[i%8]+key2[i%8] temp2^=data1[i] temp3=test[i]+test[i-1] temp4=(temp3^key1[i%8])*key2[i%8]+data2[i] if (((temp4^temp2)*data3[i])==enc[k-1]): found=True print(&quot;&quot;.join(map(chr,test))) break if found: break#wwf&#123;m45h1r0_w41fu_&gt;_&lt;_50_cu73~~_4hw4_&#125; Remind’s Funny Storieshttps://github.com/worawit/blutter 在pp.txt中搜一下界面中出现的文字 看到了一个Winner 可以看到aes和base64 在asm\\truyencuoiremind3\\main.dart中找到密文，密钥和iv Floats z3，不过必须分段求，一把求求不出来v6=[-0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0]from z3 import *from tqdm import tqdmv6 = [FP(f&#x27;x&#123;i&#125;&#x27;, Float32()) for i in range(128)]x = Solver()zero_pos = FPVal(0.0, Float32())zero_neg = FPVal(-0.0, Float32())for i in range(128): x.add(Or(v6[i] == zero_pos, v6[i] == zero_neg))resule=( v6[0] + (((v6[3] + (v6[4] + (v6[5] + (v6[6] + ((v6[8] + ((((v6[12] + ((v6[14] + (v6[15] + ((((v6[19] + (((v6[22] + (v6[23] + (v6[24] + ((v6[26] + (((v6[29] + (((v6[32] + ((v6[34] + (v6[35] + (v6[36] + ((v6[38] + (v6[39] + ((v6[41] + ((v6[43] + (v6[44] + (v6[45] + ((((((v6[51] + (v6[52] + (v6[53] + (v6[54] + (((v6[57] + (v6[58] + (v6[59] + ((v6[61] + (v6[62] + (((v6[65] + ((v6[67] + (((v6[70] + ((v6[72] + ((v6[74] + (((v6[77] + (((v6[80] + ((v6[82] + (v6[83] + (v6[84] + (((v6[87] + (v6[88] + ((v6[90] + (v6[91] + ((((((v6[97] + ((v6[99] + ((((v6[103] + ((v6[105] + (v6[106] + (v6[107] + ((v6[109] + ((v6[111] + (v6[112] + ((v6[114] + ((v6[116] + (v6[117] + (((v6[120] + (v6[121] + ((v6[123] + ((v6[125] + (v6[126] - v6[127])) - v6[124])) - v6[122]))) - v6[119]) - v6[118]))) - v6[115])) - v6[113]))) - v6[110])) - v6[108])))) - v6[104])) - v6[102]) - v6[101]) - v6[100])) - v6[98])) - v6[96]) - v6[95]) - v6[94]) - v6[93]) - v6[92]))) - v6[89]))) - v6[86]) - v6[85])))) - v6[81])) - v6[79]) - v6[78])) - v6[76]) - v6[75])) - v6[73])) - v6[71])) - v6[69]) - v6[68])) - v6[66])) - v6[64]) - v6[63]))) - v6[60])))) - v6[56]) - v6[55]))))) - v6[50]) - v6[49]) - v6[48]) - v6[47]) - v6[46])))) - v6[42])) - v6[40]))) - v6[37])))) - v6[33])) - v6[31]) - v6[30])) - v6[28]) - v6[27])) - v6[25])))) - v6[21]) - v6[20])) - v6[18]) - v6[17]) - v6[16]))) - v6[13])) - v6[11]) - v6[10]) - v6[9])) - v6[7]))))) - v6[2]) - v6[1]))def formated(s): get = s.split(&quot; &quot;) v6 = [0] * 128 for i in get: ins = i.split(&quot;=&quot;) try: v6[eval(ins[0].strip())] = eval(ins[1].strip()) except: pass print(v6) return v6x.add(resule==-0.0)if x.check() == sat: model = x.model() check = formated(str(model).replace(&quot;[&quot;, &quot;&quot;).replace(&quot;x&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;).replace(&quot;]&quot;, &quot;&quot;))else: exit()# check=[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.0]#这里怎么转数组？？拷打gpt没拷打出来def formated(s): get = s.split(&quot; &quot;) v6 = [0] * 128 for i in get: ins = i.split(&quot;=&quot;) try: v6[eval(ins[0].strip())] = eval(ins[1].strip()) except: pass print(v6) return v6for _ in tqdm(range(16)): v6 = [FP(f&#x27;x&#123;i&#125;&#x27;, Float32()) for i in range(128)] x=Solver() zero_pos = FPVal(0.0, Float32()) zero_neg = FPVal(-0.0, Float32()) for i in range(128): x.add(Or(v6[i] == zero_pos, v6[i] == zero_neg)) for j in range(1): v7 = v6[116] + v6[127] v8 = -v6[127] - v6[116] v9 = -(v6[116] + v6[127]) - v8 v10 = v6[115] + v6[126] v11 = -v6[126] - v6[115] v12 = -(v6[115] + v6[126]) - v11 v13 = v6[114] + v6[125] v14 = -v6[125] - v6[114] v15 = -(v6[114] + v6[125]) - v14 v16 = v6[113] + v6[124] v17 = -v6[124] - v6[113] v18 = -(v6[113] + v6[124]) - v17 v19 = v6[112] + v6[123] v20 = -v6[123] - v6[112] v21 = -(v6[112] + v6[123]) - v20 v22 = v6[111] + v6[122] v23 = -v6[122] - v6[111] v24 = -(v6[111] + v6[122]) - v23 v25 = v6[110] + v6[121] v26 = -v6[121] - v6[110] v27 = -(v6[110] + v6[121]) - v26 v28 = v6[109] + v6[120] v29 = -v6[120] - v6[109] v30 = -(v6[109] + v6[120]) - v29 v31 = v6[108] + v6[119] v32 = -v6[119] - v6[108] v33 = -(v6[108] + v6[119]) - v32 v34 = v6[107] + v6[118] v35 = -v6[118] - v6[107] v36 = -(v6[107] + v6[118]) - v35 v37 = v6[106] + v6[117] v38 = -v6[117] - v6[106] v39 = -(v6[106] + v6[117]) - v38 v40 = v6[105] + v6[116] v41 = -v6[116] - v6[105] v42 = -(v6[105] + v6[116]) - v41 v43 = v6[104] + v6[115] v44 = -v6[115] - v6[104] v45 = -(v6[104] + v6[115]) - v44 v46 = v6[103] + v6[114] v47 = -v6[114] - v6[103] v48 = -(v6[103] + v6[114]) - v47 v49 = v6[102] + v6[113] v50 = -v6[113] - v6[102] v51 = -(v6[102] + v6[113]) - v50 v52 = v6[101] + v6[112] v53 = -v6[112] - v6[101] v54 = -(v6[101] + v6[112]) - v53 v55 = v6[100] + v6[111] v56 = -v6[111] - v6[100] v57 = -(v6[100] + v6[111]) - v56 v58 = v6[99] + v6[110] v59 = -v6[110] - v6[99] v60 = -(v6[99] + v6[110]) - v59 v61 = v6[98] + v6[109] v62 = -v6[109] - v6[98] v63 = -(v6[98] + v6[109]) - v62 v64 = v6[97] + v6[108] v65 = -v6[108] - v6[97] v66 = -(v6[97] + v6[108]) - v65 v67 = v6[96] + v6[107] v68 = -v6[107] - v6[96] v69 = -(v6[96] + v6[107]) - v68 v70 = v6[104] + v6[96] v71 = -v6[96] - v6[104] v72 = -(v6[104] + v6[96]) - v71 v73 = v6[105] + v6[97] v74 = -v6[97] - v6[105] v75 = -(v6[105] + v6[97]) - v74 v76 = v6[106] + v6[98] v77 = -v6[98] - v6[106] v78 = -(v6[106] + v6[98]) - v77 v79 = v6[99] - v69 v80 = v69 - v6[99] v81 = -(v6[99] - v69) - (v69 - v6[99]) v82 = v6[100] - v66 v83 = v66 - v6[100] v84 = -(v6[100] - v66) - (v66 - v6[100]) v85 = v6[101] - v63 v86 = v63 - v6[101] v87 = -(v6[101] - v63) - (v63 - v6[101]) v88 = v6[102] - v60 v89 = v60 - v6[102] v90 = -(v6[102] - v60) - (v60 - v6[102]) v91 = v6[103] - v57 v92 = v57 - v6[103] v93 = -(v6[103] - v57) - (v57 - v6[103]) v94 = v6[104] - v54 v95 = v54 - v6[104] v96 = -(v6[104] - v54) - (v54 - v6[104]) v97 = v6[105] - v51 v98 = v51 - v6[105] v99 = -(v6[105] - v51) - (v51 - v6[105]) v100 = v6[106] - v48 v101 = v48 - v6[106] v102 = -(v6[106] - v48) - (v48 - v6[106]) v103 = -v69 - v45 v104 = v45 + v69 v105 = -v103 - (v45 + v69) v106 = -v66 - v42 v107 = v42 + v66 v108 = -v106 - (v42 + v66) v109 = -v63 - v39 v110 = v39 + v63 v111 = -v109 - (v39 + v63) v112 = -v60 - v36 v113 = v36 + v60 v114 = -v112 - (v36 + v60) v115 = -v57 - v33 v116 = v33 + v57 v117 = -v115 - (v33 + v57) v118 = -v54 - v30 v119 = v30 + v54 v120 = -v118 - (v30 + v54) v121 = -v51 - v27 v122 = v27 + v51 v123 = -v121 - (v27 + v51) v124 = -v48 - v24 v125 = v24 + v48 v126 = -v124 - (v24 + v48) v127 = -v45 - v21 v128 = v21 + v45 v129 = -v127 - (v21 + v45) v130 = -v42 - v18 v131 = v18 + v42 v132 = -v130 - (v18 + v42) v133 = -v39 - v15 v134 = v15 + v39 v135 = -v133 - (v15 + v39) v136 = -v36 - v12 v137 = v12 + v36 v138 = -v136 - (v12 + v36) v139 = -v33 - v9 v140 = v9 + v33 v141 = -v139 - (v9 + v33) v142 = v6[31] - v9 v143 = v9 - v6[31] v144 = -(v6[31] - v9) - (v9 - v6[31]) v145 = v6[30] - v12 v146 = v12 - v6[30] v147 = -(v6[30] - v12) - (v12 - v6[30]) v148 = v6[29] - v15 v149 = v15 - v6[29] v150 = -(v6[29] - v15) - (v15 - v6[29]) v151 = v6[28] - v18 v152 = v18 - v6[28] v153 = -(v6[28] - v18) - (v18 - v6[28]) v154 = v6[27] - v21 v155 = v21 - v6[27] v156 = -(v6[27] - v21) - (v21 - v6[27]) v157 = v6[26] - v24 v158 = v24 - v6[26] v159 = -(v6[26] - v24) - (v24 - v6[26]) v160 = v6[25] - v27 v161 = v27 - v6[25] v162 = -(v6[25] - v27) - (v27 - v6[25]) v163 = v6[24] - v30 v164 = v30 - v6[24] v165 = -(v6[24] - v30) - (v30 - v6[24]) v166 = v6[23] - v141 v167 = v141 - v6[23] v168 = -(v6[23] - v141) - (v141 - v6[23]) v169 = v6[22] - v138 v170 = v138 - v6[22] v171 = -(v6[22] - v138) - (v138 - v6[22]) v172 = v6[21] - v135 v173 = v135 - v6[21] v174 = -(v6[21] - v135) - (v135 - v6[21]) v175 = v6[20] - v132 v176 = v132 - v6[20] v177 = -(v6[20] - v132) - (v132 - v6[20]) v178 = v6[19] - v129 v179 = v129 - v6[19] v180 = -(v6[19] - v129) - (v129 - v6[19]) v181 = v6[18] - v126 v182 = v126 - v6[18] v183 = -(v6[18] - v126) - (v126 - v6[18]) v184 = v6[17] - v123 v185 = v123 - v6[17] v186 = -(v6[17] - v123) - (v123 - v6[17]) v187 = v6[16] - v120 v188 = v120 - v6[16] v189 = -(v6[16] - v120) - (v120 - v6[16]) v190 = v6[15] - v117 v191 = v117 - v6[15] v192 = -(v6[15] - v117) - (v117 - v6[15]) v193 = v6[14] - v114 v194 = v114 - v6[14] v195 = -(v6[14] - v114) - (v114 - v6[14]) v196 = v6[13] - v111 v197 = v111 - v6[13] v198 = -(v6[13] - v111) - (v111 - v6[13]) v199 = v6[12] - v108 v200 = v108 - v6[12] v201 = -(v6[12] - v108) - (v108 - v6[12]) v202 = v6[11] - v105 v203 = v105 - v6[11] v204 = -(v6[11] - v105) - (v105 - v6[11]) v205 = v6[10] - v102 v206 = v102 - v6[10] v207 = -(v6[10] - v102) - (v102 - v6[10]) v208 = v6[9] - v99 v209 = v99 - v6[9] v210 = -(v6[9] - v99) - (v99 - v6[9]) v211 = v6[8] - v96 v212 = v96 - v6[8] v213 = -(v6[8] - v96) - (v96 - v6[8]) v214 = v6[7] - v93 v215 = v93 - v6[7] v216 = -(v6[7] - v93) - (v93 - v6[7]) v217 = v6[6] - v90 v218 = v90 - v6[6] v219 = -(v6[6] - v90) - (v90 - v6[6]) v220 = v6[5] - v87 v221 = v87 - v6[5] v222 = -(v6[5] - v87) - (v87 - v6[5]) v223 = v6[4] - v84 v224 = v84 - v6[4] v225 = -(v6[4] - v84) - (v84 - v6[4]) v226 = v6[3] - v81 v227 = v81 - v6[3] v228 = -(v6[3] - v81) - (v81 - v6[3]) v229 = v6[2] - v78 v230 = v78 - v6[2] v231 = -(v6[2] - v78) - (v78 - v6[2]) v232 = v6[1] - v75 v233 = v75 - v6[1] v234 = -(v6[1] - v75) - (v75 - v6[1]) v235 = v6[0] - v72 v236 = v72 - v6[0] v237 = -(v6[0] - v72) - (v72 - v6[0]) v238 = v6[31] - v201 v239 = v201 - v6[31] v240 = -(v6[31] - v201) - (v201 - v6[31]) v241 = v6[30] - v204 v242 = v204 - v6[30] v243 = -(v6[30] - v204) - (v204 - v6[30]) v244 = v6[29] - v207 v245 = v207 - v6[29] v246 = -(v6[29] - v207) - (v207 - v6[29]) v247 = v6[28] - v210 v248 = v210 - v6[28] v249 = -(v6[28] - v210) - (v210 - v6[28]) v250 = v6[27] - v213 v251 = v213 - v6[27] v252 = -(v6[27] - v213) - (v213 - v6[27]) v253 = v6[26] - v216 v254 = v216 - v6[26] v255 = -(v6[26] - v216) - (v216 - v6[26]) v256 = v6[25] - v219 v257 = v219 - v6[25] v258 = -(v6[25] - v219) - (v219 - v6[25]) v259 = v6[24] - v222 v260 = v222 - v6[24] v261 = -(v6[24] - v222) - (v222 - v6[24]) v262 = v6[23] - v225 v263 = v225 - v6[23] v264 = -(v6[23] - v225) - (v225 - v6[23]) v265 = v6[22] - v228 v266 = v228 - v6[22] v267 = -(v6[22] - v228) - (v228 - v6[22]) v268 = v6[21] - v231 v269 = v231 - v6[21] v270 = -(v6[21] - v231) - (v231 - v6[21]) v271 = v6[20] - v234 v272 = v234 - v6[20] v273 = -(v6[20] - v234) - (v234 - v6[20]) v274 = v6[19] - v237 v275 = v237 - v6[19] v276 = -(v6[19] - v237) - (v237 - v6[19]) v6[127] = v6[95] v6[126] = v6[94] v6[125] = v6[93] v6[124] = v6[92] v6[123] = v6[91] v6[122] = v6[90] v6[121] = v6[89] v6[120] = v6[88] v6[119] = v6[87] v6[118] = v6[86] v6[117] = v6[85] v6[116] = v6[84] v6[115] = v6[83] v6[114] = v6[82] v6[113] = v6[81] v6[112] = v6[80] v6[111] = v6[79] v6[110] = v6[78] v6[109] = v6[77] v6[108] = v6[76] v6[107] = v6[75] v6[106] = v6[74] v6[105] = v6[73] v6[104] = v6[72] v6[103] = v6[71] v6[102] = v6[70] v6[101] = v6[69] v6[100] = v6[68] v6[99] = v6[67] v6[98] = v6[66] v6[97] = v6[65] v6[96] = v6[64] v6[95] = v6[63] v6[94] = v6[62] v6[93] = v6[61] v6[92] = v6[60] v6[91] = v6[59] v6[90] = v6[58] v6[89] = v6[57] v6[88] = v6[56] v6[87] = v6[55] v6[86] = v6[54] v6[85] = v6[53] v6[84] = v6[52] v6[83] = v6[51] v6[82] = v6[50] v6[81] = v6[49] v6[80] = v6[48] v6[79] = v6[47] v6[78] = v6[46] v6[77] = v6[45] v6[76] = v6[44] v6[75] = v6[43] v6[74] = v6[42] v6[73] = v6[41] v6[72] = v6[40] v6[71] = v6[39] v6[70] = v6[38] v6[69] = v6[37] v6[68] = v6[36] v6[67] = v6[35] v6[66] = v6[34] v6[65] = v6[33] v6[64] = v6[32] v6[63] = v6[31] v6[62] = v6[30] v6[61] = v6[29] v6[60] = v6[28] v6[59] = v6[27] v6[58] = v6[26] v6[57] = v6[25] v6[56] = v6[24] v6[55] = v6[23] v6[54] = v6[22] v6[53] = v6[21] v6[52] = v6[20] v6[51] = v6[19] v6[50] = v6[18] v6[49] = v6[17] v6[48] = v6[16] v6[47] = v6[15] v6[46] = v6[14] v6[45] = v6[13] v6[44] = v6[12] v6[43] = v6[11] v6[42] = v6[10] v6[41] = v6[9] v6[40] = v6[8] v6[39] = v6[7] v6[38] = v6[6] v6[37] = v6[5] v6[36] = v6[4] v6[35] = v6[3] v6[34] = v6[2] v6[33] = v6[1] v6[32] = v6[0] v6[31] = -v144 v6[30] = -v147 v6[29] = -v150 v6[28] = -v153 v6[27] = -v156 v6[26] = -v159 v6[25] = -v162 v6[24] = -v165 v6[23] = -v168 v6[22] = -v171 v6[21] = -v174 v6[20] = -v177 v6[19] = -v180 v6[18] = -v183 v6[17] = -v186 v6[16] = -v189 v6[15] = -v192 v6[14] = -v195 v6[13] = -v198 v6[12] = -v240 v6[11] = -v243 v6[10] = -v246 v6[9] = -v249 v6[8] = -v252 v6[7] = -v255 v6[6] = -v258 v6[5] = -v261 v6[4] = -v264 v6[3] = -v267 v6[2] = -v270 v6[1] = -v273 v6[0] = -v276 for i in range(128): x.add(v6[i]==check[i]) # x.add(result==-0.0) ans=[] if x.check() == sat: model = x.model() check=formated(str(model).replace(&quot;[&quot;,&quot;&quot;).replace(&quot;x&quot;,&quot;&quot;).replace(&quot;,&quot;,&quot;&quot;).replace(&quot;]&quot;,&quot;&quot;))flag=&quot;&quot;get=check[::-1]for i in get: if str(i)==&quot;-0.0&quot;: flag+=&quot;0&quot; else: flag+=&quot;1&quot;flag1=&quot;&quot;for i in range(0,len(flag),8): flag1+=chr(int(flag[i:i+8],2))print(flag1[::-1]) wwf{no_angr_pls_and_a_long_flag}"},{"title":"鹏城杯WP","path":"/2024/11/10/鹏城杯WP/","content":"joyVBS写脚本处理一下 123456s=&#x27;&#x27;&#x27;chr( 1646-1569 ) &amp; chr( 846170/7358 ) &amp; chr( 569487/5529 ) &amp; chr( 571824/8664 ) &amp; chr( 8409-8298 ) &amp; chr( 2893-2773 ) &amp; chr( 7979-7947 ) &amp; chr( 3597-3563 ) &amp; chr( -515+601 ) &amp; chr( 489456/7416 ) &amp; chr( -4892+4975 ) &amp; chr( 4109-4010 ) &amp; chr( -9287+9401 ) &amp; chr( 1007160/9592 ) &amp; chr( 152656/1363 ) &amp; chr( -2648+2764 ) &amp; chr( 419144/9526 ) &amp; chr( 88416/2763 ) &amp; chr( 8380-8269 ) &amp; chr( 24480/240 ) &amp; chr( -4597+4713 ) &amp; chr( 648-547 ) &amp; chr( -8146+8256 ) &amp; chr( -9478+9510 ) &amp; chr( 2699-2602 ) &amp; chr( -1620+1718 ) &amp; chr( -196+294 ) &amp; chr( -1186+1300 ) &amp; chr( -9642+9743 ) &amp; chr( 614544/5208 ) &amp; chr( -4654+4759 ) &amp; chr( 872612/8996 ) &amp; chr( 6703-6587 ) &amp; chr( -5002+5103 ) &amp; chr( 843300/8433 ) &amp; chr( -3604+3636 ) &amp; chr( -2400+2497 ) &amp; chr( -5531+5646 ) &amp; chr( 304160/9505 ) &amp; chr( 766776/8916 ) &amp; chr( 805-739 ) &amp; chr( -6154+6237 ) &amp; chr( -2525+2569 ) &amp; chr( 198112/6191 ) &amp; chr( 365925/3485 ) &amp; chr( -6317+6432 ) &amp; chr( -3595+3627 ) &amp; chr( 9565-9468 ) &amp; chr( -6705+6815 ) &amp; chr( 974-942 ) &amp; chr( 513585/5085 ) &amp; chr( -294+412 ) &amp; chr( 5815-5714 ) &amp; chr( 509850/4635 ) &amp; chr( -641+757 ) &amp; chr( 3390-3345 ) &amp; chr( -8974+9074 ) &amp; chr( 859104/7536 ) &amp; chr( 968-863 ) &amp; chr( 28792/244 ) &amp; chr( -4591+4692 ) &amp; chr( -9716+9826 ) &amp; chr( -6996+7028 ) &amp; chr( 643216/5743 ) &amp; chr( 4386-4272 ) &amp; chr( 6953-6842 ) &amp; chr( 7389-7286 ) &amp; chr( 2247-2133 ) &amp; chr( 8522-8425 ) &amp; chr( 4185-4076 ) &amp; chr( -964+1073 ) &amp; chr( -4253+4358 ) &amp; chr( -1558+1668 ) &amp; chr( 2281-2178 ) &amp; chr( -4204+4236 ) &amp; chr( 542484/5023 ) &amp; chr( -7327+7424 ) &amp; chr( 2064-1954 ) &amp; chr( 414678/4026 ) &amp; chr( 1098045/9385 ) &amp; chr( 292940/3020 ) &amp; chr( 9468-9365 ) &amp; chr( -3997+4098 ) &amp; chr( 392-360 ) &amp; chr( -4594+4694 ) &amp; chr( 53530/530 ) &amp; chr( -9399+9517 ) &amp; chr( 355318/3518 ) &amp; chr( -2478+2586 ) &amp; chr( 746364/6724 ) &amp; chr( -1641+1753 ) &amp; chr( 2190-2089 ) &amp; chr( -5644+5744 ) &amp; chr( -9344+9376 ) &amp; chr( -3584+3682 ) &amp; chr( 2075-1954 ) &amp; chr( 227936/7123 ) &amp; chr( 390775/5075 ) &amp; chr( 4690-4585 ) &amp; chr( 658845/6655 ) &amp; chr( 978348/8582 ) &amp; chr( -451+562 ) &amp; chr( -5036+5151 ) &amp; chr( -2277+2388 ) &amp; chr( 5990-5888 ) &amp; chr( 897492/7737 ) &amp; chr( 2520-2476 ) &amp; chr( 96160/3005 ) &amp; chr( -3603+3715 ) &amp; chr( 986898/8657 ) &amp; chr( 531195/5059 ) &amp; chr( -4906+5015 ) &amp; chr( -544+641 ) &amp; chr( -419+533 ) &amp; chr( 7914-7809 ) &amp; chr( 2690-2582 ) &amp; chr( 502392/4152 ) &amp; chr( -700+732 ) &amp; chr( 823446/7038 ) &amp; chr( 290835/2529 ) &amp; chr( 569539/5639 ) &amp; chr( 1881-1781 ) &amp; chr( 5498-5466 ) &amp; chr( 951966/9333 ) &amp; chr( 599400/5400 ) &amp; chr( -6244+6358 ) &amp; chr( -7188+7220 ) &amp; chr( 14720/128 ) &amp; chr( 7738-7639 ) &amp; chr( -2188+2302 ) &amp; chr( -2727+2832 ) &amp; chr( 9815-9703 ) &amp; chr( 5583-5467 ) &amp; chr( -7500+7605 ) &amp; chr( 466290/4239 ) &amp; chr( 567015/5505 ) &amp; chr( 188800/5900 ) &amp; chr( 568680/5416 ) &amp; chr( 9897-9787 ) &amp; chr( 2669-2637 ) &amp; chr( 4976-4860 ) &amp; chr( 9146-9042 ) &amp; chr( 9328-9227 ) &amp; chr( 283424/8857 ) &amp; chr( 189486/2178 ) &amp; chr( 7049-6944 ) &amp; chr( 8826-8716 ) &amp; chr( 958100/9581 ) &amp; chr( 6700-6589 ) &amp; chr( 7860-7741 ) &amp; chr( 669070/5818 ) &amp; chr( -2846+2878 ) &amp; chr( -632+733 ) &amp; chr( 5316-5206 ) &amp; chr( 4620-4502 ) &amp; chr( 4584-4479 ) &amp; chr( 702126/6159 ) &amp; chr( -3160+3271 ) &amp; chr( -33+143 ) &amp; chr( 301385/2765 ) &amp; chr( -8221+8322 ) &amp; chr( 1133-1023 ) &amp; chr( 4642-4526 ) &amp; chr( 3823-3777 ) &amp; chr( 1614-1580 ) &amp; chr( 100152/7704 ) &amp; chr( 847-837 ) &amp; chr( 478247/6211 ) &amp; chr( 483230/4202 ) &amp; chr( -7611+7714 ) &amp; chr( 572286/8671 ) &amp; chr( -6309+6420 ) &amp; chr( -3239+3359 ) &amp; chr( -5577+5609 ) &amp; chr( -8996+9030 ) &amp; chr( 3486-3413 ) &amp; chr( -15+131 ) &amp; chr( -1068+1100 ) &amp; chr( -9216+9321 ) &amp; chr( 3969-3854 ) &amp; chr( 144128/4504 ) &amp; chr( 397488/4056 ) &amp; chr( 810726/8358 ) &amp; chr( 7180-7065 ) &amp; chr( 37168/368 ) &amp; chr( -9401+9501 ) &amp; chr( 1391-1359 ) &amp; chr( 87+24 ) &amp; chr( 57420/522 ) &amp; chr( -2584+2616 ) &amp; chr( 574316/4951 ) &amp; chr( 2468-2364 ) &amp; chr( 168670/1670 ) &amp; chr( -3706+3738 ) &amp; chr( 186362/2167 ) &amp; chr( 1480-1375 ) &amp; chr( 9537-9422 ) &amp; chr( 3477-3360 ) &amp; chr( 7541-7444 ) &amp; chr( 756432/7004 ) &amp; chr( 105440/3295 ) &amp; chr( 7197-7131 ) &amp; chr( 1724-1627 ) &amp; chr( 788095/6853 ) &amp; chr( 179655/1711 ) &amp; chr( -758+857 ) &amp; chr( -6936+6968 ) &amp; chr( -1069+1181 ) &amp; chr( -6887+7001 ) &amp; chr( 610500/5500 ) &amp; chr( 2227-2124 ) &amp; chr( -7789+7903 ) &amp; chr( 495-398 ) &amp; chr( 2287-2178 ) &amp; chr( 780113/7157 ) &amp; chr( 796950/7590 ) &amp; chr( 7155-7045 ) &amp; chr( 7268-7165 ) &amp; chr( -8507+8539 ) &amp; chr( 914760/8470 ) &amp; chr( 1086-989 ) &amp; chr( -6783+6893 ) &amp; chr( 4247-4144 ) &amp; chr( -1310+1427 ) &amp; chr( 17945/185 ) &amp; chr( 303644/2948 ) &amp; chr( 8356-8255 ) &amp; chr( 5032-5000 ) &amp; chr( 1590-1493 ) &amp; chr( -6963+7073 ) &amp; chr( -6461+6561 ) &amp; chr( 418-386 ) &amp; chr( 596295/5679 ) &amp; chr( 709205/6167 ) &amp; chr( -1124+1156 ) &amp; chr( -6337+6437 ) &amp; chr( 2518-2417 ) &amp; chr( 7402-7287 ) &amp; chr( -5436+5541 ) &amp; chr( 480289/4663 ) &amp; chr( 581460/5286 ) &amp; chr( 2745-2644 ) &amp; chr( -9523+9623 ) &amp; chr( -4195+4227 ) &amp; chr( -6654+6770 ) &amp; chr( 4717-4606 ) &amp; chr( 4749-4717 ) &amp; chr( 681394/6953 ) &amp; chr( -3161+3262 ) &amp; chr( 22368/699 ) &amp; chr( -8426+8541 ) &amp; chr( 243180/2316 ) &amp; chr( 6431/59 ) &amp; chr( 963312/8601 ) &amp; chr( 329-221 ) &amp; chr( 2553-2452 ) &amp; chr( -6333+6365 ) &amp; chr( -1054+1151 ) &amp; chr( 582010/5291 ) &amp; chr( 714900/7149 ) &amp; chr( 324-292 ) &amp; chr( -1241+1342 ) &amp; chr( -591+688 ) &amp; chr( 1018325/8855 ) &amp; chr( 3975-3854 ) &amp; chr( 234304/7322 ) &amp; chr( 9872-9756 ) &amp; chr( -7560+7671 ) &amp; chr( -7944+7976 ) &amp; chr( -7281+7398 ) &amp; chr( 7363-7248 ) &amp; chr( 642057/6357 ) &amp; chr( 7531-7487 ) &amp; chr( 5064-5032 ) &amp; chr( -4219+4320 ) &amp; chr( 612605/5327 ) &amp; chr( -6009+6121 ) &amp; chr( 3942-3841 ) &amp; chr( 3635-3536 ) &amp; chr( 7758-7653 ) &amp; chr( 1617-1520 ) &amp; chr( 2709-2601 ) &amp; chr( -3757+3865 ) &amp; chr( 4184-4063 ) &amp; chr( 264-232 ) &amp; chr( 343-241 ) &amp; chr( 5795-5684 ) &amp; chr( -7826+7940 ) &amp; chr( 86784/2712 ) &amp; chr( -733+849 ) &amp; chr( 600496/5774 ) &amp; chr( 35964/324 ) &amp; chr( -8204+8319 ) &amp; chr( -8567+8668 ) &amp; chr( 2356-2324 ) &amp; chr( -4810+4912 ) &amp; chr( 31137/321 ) &amp; chr( -2988+3097 ) &amp; chr( -9824+9929 ) &amp; chr( 3163-3055 ) &amp; chr( -784+889 ) &amp; chr( 3789-3692 ) &amp; chr( -4476+4590 ) &amp; chr( 280448/8764 ) &amp; chr( -5985+6104 ) &amp; chr( 542220/5164 ) &amp; chr( 1010824/8714 ) &amp; chr( 385008/3702 ) &amp; chr( 982-950 ) &amp; chr( 2499-2383 ) &amp; chr( 6219-6115 ) &amp; chr( 221392/2192 ) &amp; chr( -4287+4319 ) &amp; chr( 5438-5372 ) &amp; chr( -6947+7012 ) &amp; chr( -6127+6210 ) &amp; chr( 4082-4009 ) &amp; chr( 4380-4313 ) &amp; chr( 3063-3031 ) &amp; chr( 43792/391 ) &amp; chr( 196650/1725 ) &amp; chr( -4430+4541 ) &amp; chr( 227012/2204 ) &amp; chr( 7138-7024 ) &amp; chr( 8172-8075 ) &amp; chr( 168950/1550 ) &amp; chr( 432730/3970 ) &amp; chr( 110985/1057 ) &amp; chr( -7468+7578 ) &amp; chr( 616970/5990 ) &amp; chr( -4142+4174 ) &amp; chr( 5198-5090 ) &amp; chr( -3559+3656 ) &amp; chr( 8777-8667 ) &amp; chr( 170-67 ) &amp; chr( -4267+4384 ) &amp; chr( 3734-3637 ) &amp; chr( 5644-5541 ) &amp; chr( -5205+5306 ) &amp; chr( 1899-1853 ) &amp; chr( -3724+3758 ) &amp; chr( 35516/2732 ) &amp; chr( 4964-4954 ) &amp; chr( 3145-3068 ) &amp; chr( 478400/4160 ) &amp; chr( 1616-1513 ) &amp; chr( 546-480 ) &amp; chr( 139638/1258 ) &amp; chr( -3770+3890 ) &amp; chr( -3284+3316 ) &amp; chr( -4728+4762 ) &amp; chr( -2240+2305 ) &amp; chr( 649330/5903 ) &amp; chr( 472700/4727 ) &amp; chr( -7050+7082 ) &amp; chr( -9648+9750 ) &amp; chr( -1949+2060 ) &amp; chr( 283860/2490 ) &amp; chr( 260064/8127 ) &amp; chr( -9680+9789 ) &amp; chr( 820726/8126 ) &amp; chr( -8459+8503 ) &amp; chr( -4960+4992 ) &amp; chr( 6380-6275 ) &amp; chr( 1017900/8775 ) &amp; chr( 154336/4823 ) &amp; chr( 648795/6179 ) &amp; chr( 657455/5717 ) &amp; chr( -2554+2586 ) &amp; chr( 1004792/8662 ) &amp; chr( -6490+6594 ) &amp; chr( -2178+2279 ) &amp; chr( -7012+7044 ) &amp; chr( 7489-7387 ) &amp; chr( -2447+2552 ) &amp; chr( 2896-2782 ) &amp; chr( 3656-3541 ) &amp; chr( -3407+3523 ) &amp; chr( 6804-6772 ) &amp; chr( -1594+1706 ) &amp; chr( -2260+2374 ) &amp; chr( -9640+9751 ) &amp; chr( 348037/3379 ) &amp; chr( 6296-6182 ) &amp; chr( 751556/7748 ) &amp; chr( 4016-3907 ) &amp; chr( 316754/2906 ) &amp; chr( 1106-1001 ) &amp; chr( 305030/2773 ) &amp; chr( -3882+3985 ) &amp; chr( 7324-7292 ) &amp; chr( 389880/3610 ) &amp; chr( 433202/4466 ) &amp; chr( -3025+3135 ) &amp; chr( 502846/4882 ) &amp; chr( 1065987/9111 ) &amp; chr( -8652+8749 ) &amp; chr( -4558+4661 ) &amp; chr( -5324+5425 ) &amp; chr( -5231+5263 ) &amp; chr( -5335+5451 ) &amp; chr( 7130-7026 ) &amp; chr( -4983+5080 ) &amp; chr( 867680/7480 ) &amp; chr( 105888/3309 ) &amp; chr( -8775+8848 ) &amp; chr( -1371+1410 ) &amp; chr( 452530/3835 ) &amp; chr( 501263/4963 ) &amp; chr( 3934-3902 ) &amp; chr( 8493-8385 ) &amp; chr( 155-54 ) &amp; chr( 190314/1962 ) &amp; chr( -6003+6117 ) &amp; chr( 1496-1380 ) &amp; chr( 153748/4522 ) &amp; chr( -9746+9759 ) &amp; chr( 45810/4581 ) &amp; chr( 2255-2178 ) &amp; chr( 376970/3278 ) &amp; chr( -2612+2715 ) &amp; chr( -8472+8538 ) &amp; chr( 4079-3968 ) &amp; chr( -4899+5019 ) &amp; chr( 9128-9096 ) &amp; chr( 2420-2386 ) &amp; chr( 456768/6344 ) &amp; chr( 6194-6097 ) &amp; chr( 6175-6076 ) &amp; chr( 788-681 ) &amp; chr( -205+306 ) &amp; chr( 629394/5521 ) &amp; chr( 544295/4733 ) &amp; chr( 103455/3135 ) &amp; chr( -3231+3263 ) &amp; chr( 716904/9957 ) &amp; chr( -4955+5052 ) &amp; chr( 9735-9617 ) &amp; chr( 4129-4028 ) &amp; chr( 8757-8725 ) &amp; chr( 1028-926 ) &amp; chr( 602550/5150 ) &amp; chr( 7930-7820 ) &amp; chr( -8771+8803 ) &amp; chr( 5272-5153 ) &amp; chr( 516075/4915 ) &amp; chr( 1382-1266 ) &amp; chr( 9928-9824 ) &amp; chr( 141920/4435 ) &amp; chr( 1073000/9250 ) &amp; chr( -7294+7398 ) &amp; chr( 9185-9080 ) &amp; chr( -4270+4385 ) &amp; chr( -8615+8647 ) &amp; chr( -567+653 ) &amp; chr( -6449+6515 ) &amp; chr( 4600-4517 ) &amp; chr( -8724+8756 ) &amp; chr( 1977-1878 ) &amp; chr( -9629+9733 ) &amp; chr( 315832/3256 ) &amp; chr( 5490-5382 ) &amp; chr( 358776/3322 ) &amp; chr( -8892+8993 ) &amp; chr( 3040-2930 ) &amp; chr( -9385+9488 ) &amp; chr( 368044/3644 ) &amp; chr( 72897/2209 ) &amp; chr( -4740+4774 ) &amp; chr( 2205-2192 ) &amp; chr( 2916-2906 ) &amp; chr( -9851+9953 ) &amp; chr( -3823+3931 ) &amp; chr( 9864-9767 ) &amp; chr( 7681-7578 ) &amp; chr( 14464/452 ) &amp; chr( 271267/4447 ) &amp; chr( 276640/8645 ) &amp; chr( 404201/5537 ) &amp; chr( 504900/4590 ) &amp; chr( 4390-4278 ) &amp; chr( -296+413 ) &amp; chr( -948+1064 ) &amp; chr( 59862/907 ) &amp; chr( 394-283 ) &amp; chr( -6693+6813 ) &amp; chr( 393920/9848 ) &amp; chr( -565+599 ) &amp; chr( 3299-3230 ) &amp; chr( 4855-4745 ) &amp; chr( 462144/3984 ) &amp; chr( 254520/2520 ) &amp; chr( 318060/2790 ) &amp; chr( 40480/1265 ) &amp; chr( 7089-6973 ) &amp; chr( 8281-8177 ) &amp; chr( 2644-2543 ) &amp; chr( -8553+8585 ) &amp; chr( 610540/8722 ) &amp; chr( 511936/6736 ) &amp; chr( -4910+4975 ) &amp; chr( 644183/9073 ) &amp; chr( -485+543 ) &amp; chr( 52-18 ) &amp; chr( 6520-6476 ) &amp; chr( 285-253 ) &amp; chr( 193-159 ) &amp; chr( -7429+7501 ) &amp; chr( 227562/2346 ) &amp; chr( -9707+9806 ) &amp; chr( 6800-6693 ) &amp; chr( 42176/1318 ) &amp; chr( -1685+1787 ) &amp; chr( -458+569 ) &amp; chr( 5792-5678 ) &amp; chr( 40320/1260 ) &amp; chr( 3012-2910 ) &amp; chr( 5652-5535 ) &amp; chr( 445830/4053 ) &amp; chr( 9806-9772 ) &amp; chr( -7692+7733 ) &amp; chr( 2867-2854 ) &amp; chr( 51630/5163 ) &amp; chr( 7076-6957 ) &amp; chr( -7076+7177 ) &amp; chr( -728+830 ) &amp; chr( -3660+3758 ) &amp; chr( -5458+5575 ) &amp; chr( 6191-6072 ) &amp; chr( 307335/2927 ) &amp; chr( 116649/997 ) &amp; chr( 609939/6039 ) &amp; chr( 260896/8153 ) &amp; chr( -2700+2761 ) &amp; chr( -9409+9441 ) &amp; chr( -1388+1422 ) &amp; chr( 82914/1063 ) &amp; chr( 9206-9109 ) &amp; chr( -7953+8061 ) &amp; chr( 2569-2451 ) &amp; chr( -1269+1347 ) &amp; chr( 950-899 ) &amp; chr( 7337-7233 ) &amp; chr( -2434+2509 ) &amp; chr( -9393+9462 ) &amp; chr( 2340-2220 ) &amp; chr( -3673+3739 ) &amp; chr( -2522+2638 ) &amp; chr( 4831-4766 ) &amp; chr( 555864/7314 ) &amp; chr( -5702+5768 ) &amp; chr( -6416+6532 ) &amp; chr( -454+527 ) &amp; chr( -5471+5581 ) &amp; chr( 7994-7914 ) &amp; chr( 643220/5545 ) &amp; chr( -8840+8918 ) &amp; chr( 6649-6577 ) &amp; chr( 6263-6179 ) &amp; chr( 405350/3685 ) &amp; chr( 6093-6018 ) &amp; chr( 370888/5012 ) &amp; chr( 166264/2969 ) &amp; chr( -2569+2617 ) &amp; chr( 6887-6811 ) &amp; chr( 5807-5756 ) &amp; chr( -2024+2098 ) &amp; chr( 773024/6664 ) &amp; chr( -77+190 ) &amp; chr( 8953-8833 ) &amp; chr( -3702+3786 ) &amp; chr( -7703+7801 ) &amp; chr( 438672/3952 ) &amp; chr( 362768/4424 ) &amp; chr( 9723-9658 ) &amp; chr( 711-664 ) &amp; chr( 754754/9802 ) &amp; chr( -7767+7865 ) &amp; chr( -7678+7748 ) &amp; chr( 7592-7541 ) &amp; chr( -8274+8350 ) &amp; chr( 511500/4650 ) &amp; chr( 629328/7492 ) &amp; chr( -3332+3380 ) &amp; chr( 4189-4113 ) &amp; chr( 271400/5428 ) &amp; chr( -4616+4738 ) &amp; chr( 56376/783 ) &amp; chr( 589-513 ) &amp; chr( -955+1005 ) &amp; chr( -6651+6734 ) &amp; chr( 540864/5008 ) &amp; chr( -4766+4879 ) &amp; chr( -7232+7342 ) &amp; chr( 7218-7138 ) &amp; chr( -8855+8971 ) &amp; chr( 3521-3447 ) &amp; chr( -482+558 ) &amp; chr( -950+1015 ) &amp; chr( 8353-8243 ) &amp; chr( 445060/6358 ) &amp; chr( 2025-1927 ) &amp; chr( -9760+9833 ) &amp; chr( 653616/6052 ) &amp; chr( -2585+2661 ) &amp; chr( -2830+2880 ) &amp; chr( 6551-6468 ) &amp; chr( 8391-8281 ) &amp; chr( 371630/5309 ) &amp; chr( 88-4 ) &amp; chr( 11368/203 ) &amp; chr( 8578-8470 ) &amp; chr( 690256/6163 ) &amp; chr( 80+42 ) &amp; chr( 120890/1727 ) &amp; chr( 2938-2816 ) &amp; chr( 64285/989 ) &amp; chr( -4844+4894 ) &amp; chr( 601842/8133 ) &amp; chr( 372312/5171 ) &amp; chr( -4346+4460 ) &amp; chr( 6696-6614 ) &amp; chr( -7839+7923 ) &amp; chr( 2149-2044 ) &amp; chr( -5078+5156 ) &amp; chr( 263344/2416 ) &amp; chr( 504420/6005 ) &amp; chr( -7543+7600 ) &amp; chr( 595-561 ) &amp; chr( -9653+9666 ) &amp; chr( 86910/8691 ) &amp; chr( 112580/8660 ) &amp; chr( 2078-2068 ) &amp; chr( 1003-890 ) &amp; chr( -8583+8702 ) &amp; chr( -9601+9703 ) &amp; chr( 1007273/9973 ) &amp; chr( -8736+8768 ) &amp; chr( 9943/163 ) &amp; chr( 7893-7861 ) &amp; chr( 8539-8482 ) &amp; chr( 48934/1138 ) &amp; chr( 180300/3606 ) &amp; chr( -7881+7924 ) &amp; chr( 754-704 ) &amp; chr( 257613/5991 ) &amp; chr( 1020-971 ) &amp; chr( 7353-7340 ) &amp; chr( 36570/3657 ) &amp; chr( -6466+6479 ) &amp; chr( 611-601 ) &amp; chr( -1140+1210 ) &amp; chr( 381654/3262 ) &amp; chr( 649550/5905 ) &amp; chr( -2149+2248 ) &amp; chr( 7409-7293 ) &amp; chr( 9454-9349 ) &amp; chr( 2844-2733 ) &amp; chr( -1959+2069 ) &amp; chr( 1036-1004 ) &amp; chr( 720-654 ) &amp; chr( -5484+5581 ) &amp; chr( -7513+7628 ) &amp; chr( 517-416 ) &amp; chr( 9872-9818 ) &amp; chr( 427544/8222 ) &amp; chr( 2961-2893 ) &amp; chr( 1355-1254 ) &amp; chr( -8290+8389 ) &amp; chr( 509268/4588 ) &amp; chr( 324200/3242 ) &amp; chr( 2004-1903 ) &amp; chr( 72840/1821 ) &amp; chr( 3863-3765 ) &amp; chr( 44232/456 ) &amp; chr( -8289+8404 ) &amp; chr( -4373+4474 ) &amp; chr( -4943+4997 ) &amp; chr( 7776-7724 ) &amp; chr( 652119/9451 ) &amp; chr( 4725-4615 ) &amp; chr( 265617/2683 ) &amp; chr( -4530+4641 ) &amp; chr( 139900/1399 ) &amp; chr( 951117/9417 ) &amp; chr( 137800/1378 ) &amp; chr( 183181/2207 ) &amp; chr( 3371-3255 ) &amp; chr( 1135326/9959 ) &amp; chr( -690+795 ) &amp; chr( -7720+7830 ) &amp; chr( -1581+1684 ) &amp; chr( -6185+6226 ) &amp; chr( 10426/802 ) &amp; chr( -314+324 ) &amp; chr( 6041-6009 ) &amp; chr( -2078+2110 ) &amp; chr( 6455-6423 ) &amp; chr( 4939-4907 ) &amp; chr( -3138+3206 ) &amp; chr( 513-408 ) &amp; chr( -2730+2839 ) &amp; chr( 8238-8206 ) &amp; chr( 349080/2909 ) &amp; chr( -7717+7826 ) &amp; chr( 495-387 ) &amp; chr( 143176/3254 ) &amp; chr( -2377+2409 ) &amp; chr( -9871+9972 ) &amp; chr( 9667-9559 ) &amp; chr( -4387+4488 ) &amp; chr( 1760-1651 ) &amp; chr( 6377-6364 ) &amp; chr( 6016-6006 ) &amp; chr( 2785-2753 ) &amp; chr( 8270-8238 ) &amp; chr( 173600/5425 ) &amp; chr( 177056/5533 ) &amp; chr( 24983/301 ) &amp; chr( 245329/2429 ) &amp; chr( 1100144/9484 ) &amp; chr( -9070+9102 ) &amp; chr( -5669+5789 ) &amp; chr( 2249-2140 ) &amp; chr( 1055808/9776 ) &amp; chr( 7862-7830 ) &amp; chr( -9219+9280 ) &amp; chr( -7908+7940 ) &amp; chr( 1509-1442 ) &amp; chr( 911316/7994 ) &amp; chr( -7142+7243 ) &amp; chr( 781626/8058 ) &amp; chr( 8647-8531 ) &amp; chr( -5921+6022 ) &amp; chr( 7634-7555 ) &amp; chr( 331044/3378 ) &amp; chr( -8890+8996 ) &amp; chr( -3401+3502 ) &amp; chr( -4399+4498 ) &amp; chr( 282924/2439 ) &amp; chr( 9739-9699 ) &amp; chr( 74052/2178 ) &amp; chr( 289597/3761 ) &amp; chr( 6521-6438 ) &amp; chr( -1317+1405 ) &amp; chr( 688996/8948 ) &amp; chr( 7514-7438 ) &amp; chr( 211400/4228 ) &amp; chr( 3833-3787 ) &amp; chr( 59092/869 ) &amp; chr( 713370/9030 ) &amp; chr( 563409/7317 ) &amp; chr( -357+425 ) &amp; chr( 16872/152 ) &amp; chr( 8544-8445 ) &amp; chr( 569790/4870 ) &amp; chr( -3695+3804 ) &amp; chr( -9064+9165 ) &amp; chr( 769450/6995 ) &amp; chr( 8825-8709 ) &amp; chr( -282+316 ) &amp; chr( -5392+5433 ) &amp; chr( -2388+2401 ) &amp; chr( 83110/8311 ) &amp; chr( -5225+5257 ) &amp; chr( 6669-6637 ) &amp; chr( 3821-3789 ) &amp; chr( 185888/5809 ) &amp; chr( 7916-7833 ) &amp; chr( 566812/5612 ) &amp; chr( 776040/6690 ) &amp; chr( 1027-995 ) &amp; chr( 621554/6154 ) &amp; chr( 5462-5354 ) &amp; chr( 812444/8044 ) &amp; chr( -6205+6314 ) &amp; chr( 71552/2236 ) &amp; chr( -3949+4010 ) &amp; chr( 1227-1195 ) &amp; chr( 1988-1868 ) &amp; chr( 7112-7003 ) &amp; chr( -9779+9887 ) &amp; chr( -848+894 ) &amp; chr( -318+417 ) &amp; chr( 5397-5283 ) &amp; chr( -6345+6446 ) &amp; chr( 804906/8298 ) &amp; chr( -2260+2376 ) &amp; chr( -710+811 ) &amp; chr( 504114/7306 ) &amp; chr( 644868/5971 ) &amp; chr( 917-816 ) &amp; chr( -1121+1230 ) &amp; chr( -1141+1242 ) &amp; chr( 2992-2882 ) &amp; chr( 6580-6464 ) &amp; chr( -3047+3087 ) &amp; chr( 7217-7183 ) &amp; chr( -9291+9407 ) &amp; chr( 294736/2704 ) &amp; chr( 6948-6836 ) &amp; chr( 313344/9216 ) &amp; chr( 2371-2330 ) &amp; chr( -563+576 ) &amp; chr( -1828+1838 ) &amp; chr( -1554+1586 ) &amp; chr( 9869-9837 ) &amp; chr( -3745+3777 ) &amp; chr( 43488/1359 ) &amp; chr( 3792-3691 ) &amp; chr( 704592/6524 ) &amp; chr( 369559/3659 ) &amp; chr( 825348/7572 ) &amp; chr( -5040+5086 ) &amp; chr( -8292+8392 ) &amp; chr( 410407/4231 ) &amp; chr( 760496/6556 ) &amp; chr( 582-485 ) &amp; chr( -7764+7848 ) &amp; chr( -7036+7157 ) &amp; chr( 369264/3297 ) &amp; chr( -4653+4754 ) &amp; chr( -8674+8706 ) &amp; chr( 6821-6760 ) &amp; chr( 6718-6686 ) &amp; chr( -7885+7919 ) &amp; chr( -1087+1185 ) &amp; chr( -4912+5017 ) &amp; chr( -4410+4520 ) &amp; chr( 206-160 ) &amp; chr( 7009-6911 ) &amp; chr( 636417/6561 ) &amp; chr( 978075/8505 ) &amp; chr( 688315/6815 ) &amp; chr( 211464/3916 ) &amp; chr( 191516/3683 ) &amp; chr( 314500/9250 ) &amp; chr( 3407-3375 ) &amp; chr( 21320/1640 ) &amp; chr( -1318+1328 ) &amp; chr( -1240+1272 ) &amp; chr( -458+490 ) &amp; chr( 5958-5926 ) &amp; chr( 67200/2100 ) &amp; chr( -7894+7995 ) &amp; chr( 968436/8967 ) &amp; chr( -3924+4025 ) &amp; chr( -1148+1257 ) &amp; chr( -6700+6746 ) &amp; chr( -4652+4768 ) &amp; chr( -9495+9596 ) &amp; chr( 205680/1714 ) &amp; chr( 436276/3761 ) &amp; chr( -3977+4009 ) &amp; chr( -7640+7701 ) &amp; chr( 9075-9043 ) &amp; chr( -9084+9182 ) &amp; chr( 8063-7966 ) &amp; chr( -9695+9810 ) &amp; chr( 6572-6471 ) &amp; chr( -2003+2057 ) &amp; chr( 419640/8070 ) &amp; chr( -8730+8799 ) &amp; chr( 1086910/9881 ) &amp; chr( -5241+5340 ) &amp; chr( 100677/907 ) &amp; chr( 395000/3950 ) &amp; chr( 2916-2815 ) &amp; chr( 991-891 ) &amp; chr( -3137+3220 ) &amp; chr( 690432/5952 ) &amp; chr( 167238/1467 ) &amp; chr( -4372+4477 ) &amp; chr( 759990/6909 ) &amp; chr( 195597/1899 ) &amp; chr( 310112/9691 ) &amp; chr( -758+771 ) &amp; chr( 40300/4030 ) &amp; chr( 9376/293 ) &amp; chr( 4028-3996 ) &amp; chr( 8383-8351 ) &amp; chr( 57408/1794 ) &amp; chr( 6109-6041 ) &amp; chr( -8441+8546 ) &amp; chr( -4594+4703 ) &amp; chr( 7602-7570 ) &amp; chr( 627325/5455 ) &amp; chr( 18908/163 ) &amp; chr( 1334-1220 ) &amp; chr( 3983-3882 ) &amp; chr( 121929/1257 ) &amp; chr( 362425/3325 ) &amp; chr( 106561/8197 ) &amp; chr( 3421-3411 ) &amp; chr( 242272/7571 ) &amp; chr( -5132+5164 ) &amp; chr( -9809+9841 ) &amp; chr( 127776/3993 ) &amp; chr( -4848+4931 ) &amp; chr( 573-472 ) &amp; chr( 9376-9260 ) &amp; chr( -3590+3622 ) &amp; chr( 5389-5274 ) &amp; chr( -6578+6694 ) &amp; chr( -3359+3473 ) &amp; chr( -5347+5448 ) &amp; chr( -6848+6945 ) &amp; chr( -8824+8933 ) &amp; chr( 268800/8400 ) &amp; chr( 169275/2775 ) &amp; chr( -9664+9696 ) &amp; chr( -4881+4948 ) &amp; chr( -3758+3872 ) &amp; chr( 410666/4066 ) &amp; chr( -9586+9683 ) &amp; chr( 17864/154 ) &amp; chr( -8524+8625 ) &amp; chr( 627102/7938 ) &amp; chr( 438060/4470 ) &amp; chr( 277932/2622 ) &amp; chr( 5399-5298 ) &amp; chr( 808533/8167 ) &amp; chr( 931132/8027 ) &amp; chr( -8039+8079 ) &amp; chr( 5475-5441 ) &amp; chr( -8619+8684 ) &amp; chr( 5797-5729 ) &amp; chr( -4831+4910 ) &amp; chr( -4440+4508 ) &amp; chr( -8508+8574 ) &amp; chr( 9405-9359 ) &amp; chr( 759865/9155 ) &amp; chr( -6742+6858 ) &amp; chr( 807234/7081 ) &amp; chr( 2207-2106 ) &amp; chr( 9606-9509 ) &amp; chr( 82731/759 ) &amp; chr( 8639-8605 ) &amp; chr( 146083/3563 ) &amp; chr( 2339-2326 ) &amp; chr( 3393-3383 ) &amp; chr( 246432/7701 ) &amp; chr( 4765-4733 ) &amp; chr( -6581+6613 ) &amp; chr( 185920/5810 ) &amp; chr( -3966+4081 ) &amp; chr( 350552/3022 ) &amp; chr( 1030218/9037 ) &amp; chr( 810424/8024 ) &amp; chr( -7516+7613 ) &amp; chr( -7135+7244 ) &amp; chr( 410228/8918 ) &amp; chr( 329112/3918 ) &amp; chr( 3443-3322 ) &amp; chr( 2730-2618 ) &amp; chr( 326634/3234 ) &amp; chr( 6321-6289 ) &amp; chr( 6449-6388 ) &amp; chr( 5803-5771 ) &amp; chr( -1570+1619 ) &amp; chr( 58912/1841 ) &amp; chr( 7188-7149 ) &amp; chr( 9801-9735 ) &amp; chr( 1468-1363 ) &amp; chr( 6295-6185 ) &amp; chr( 6193-6096 ) &amp; chr( 9061-8947 ) &amp; chr( -2291+2412 ) &amp; chr( 8850-8837 ) &amp; chr( 8891-8881 ) &amp; chr( 136128/4254 ) &amp; chr( -2336+2368 ) &amp; chr( 263040/8220 ) &amp; chr( 1340-1308 ) &amp; chr( 909075/7905 ) &amp; chr( -1375+1491 ) &amp; chr( -6549+6663 ) &amp; chr( 438340/4340 ) &amp; chr( 830223/8559 ) &amp; chr( 838755/7695 ) &amp; chr( -5356+5402 ) &amp; chr( 718426/9094 ) &amp; chr( -6166+6278 ) &amp; chr( 156752/1552 ) &amp; chr( 9688-9578 ) &amp; chr( -1832+1845 ) &amp; chr( -7523+7533 ) &amp; chr( -1258+1290 ) &amp; chr( -3208+3240 ) &amp; chr( -8992+9024 ) &amp; chr( -166+198 ) &amp; chr( 895965/7791 ) &amp; chr( -4224+4340 ) &amp; chr( 252738/2217 ) &amp; chr( -8457+8558 ) &amp; chr( 930812/9596 ) &amp; chr( 1061660/9740 ) &amp; chr( -3122+3168 ) &amp; chr( -8212+8299 ) &amp; chr( 8016-7902 ) &amp; chr( -100+205 ) &amp; chr( 1018132/8777 ) &amp; chr( 153217/1517 ) &amp; chr( 1593-1561 ) &amp; chr( -5309+5410 ) &amp; chr( 6206-6098 ) &amp; chr( 1813-1712 ) &amp; chr( 226938/2082 ) &amp; chr( 410918/8933 ) &amp; chr( -7233+7343 ) &amp; chr( 8904-8793 ) &amp; chr( 8729-8629 ) &amp; chr( -3158+3259 ) &amp; chr( 410088/4882 ) &amp; chr( 492712/4072 ) &amp; chr( 3136-3024 ) &amp; chr( 482780/4780 ) &amp; chr( 6338-6238 ) &amp; chr( 453134/5269 ) &amp; chr( 4842-4745 ) &amp; chr( 8902-8794 ) &amp; chr( -8975+9092 ) &amp; chr( 1611-1510 ) &amp; chr( -5894+5926 ) &amp; chr( 58565/4505 ) &amp; chr( -6270+6280 ) &amp; chr( -8296+8328 ) &amp; chr( 6387-6355 ) &amp; chr( 55-23 ) &amp; chr( 829-797 ) &amp; chr( -2545+2660 ) &amp; chr( 8597-8481 ) &amp; chr( 7479-7365 ) &amp; chr( -690+791 ) &amp; chr( -7755+7852 ) &amp; chr( 2514-2405 ) &amp; chr( -7408+7454 ) &amp; chr( 4649-4569 ) &amp; chr( -8543+8654 ) &amp; chr( 101775/885 ) &amp; chr( 537390/5118 ) &amp; chr( 648556/5591 ) &amp; chr( -6119+6224 ) &amp; chr( 4449-4338 ) &amp; chr( 4204-4094 ) &amp; chr( 239232/7476 ) &amp; chr( 190625/3125 ) &amp; chr( 5866-5834 ) &amp; chr( 97104/2023 ) &amp; chr( 9013-9000 ) &amp; chr( 83280/8328 ) &amp; chr( 195232/6101 ) &amp; chr( -5420+5452 ) &amp; chr( -9059+9091 ) &amp; chr( 70624/2207 ) &amp; chr( -8408+8523 ) &amp; chr( 4952-4836 ) &amp; chr( 1952-1838 ) &amp; chr( -1444+1545 ) &amp; chr( 401580/4140 ) &amp; chr( 1039315/9535 ) &amp; chr( 1528-1482 ) &amp; chr( 4615-4531 ) &amp; chr( 6768-6647 ) &amp; chr( 2928-2816 ) &amp; chr( 749925/7425 ) &amp; chr( 5791-5759 ) &amp; chr( 7459-7398 ) &amp; chr( -6819+6851 ) &amp; chr( 9271-9221 ) &amp; chr( 39392/1231 ) &amp; chr( -363+402 ) &amp; chr( 7804-7720 ) &amp; chr( -1482+1583 ) &amp; chr( 402360/3353 ) &amp; chr( 849468/7323 ) &amp; chr( -395+408 ) &amp; chr( 93780/9378 ) &amp; chr( -5907+5939 ) &amp; chr( 79424/2482 ) &amp; chr( -3774+3806 ) &amp; chr( 84160/2630 ) &amp; chr( 9324-9209 ) &amp; chr( 7974-7858 ) &amp; chr( 651282/5713 ) &amp; chr( -1421+1522 ) &amp; chr( 464436/4788 ) &amp; chr( 881156/8084 ) &amp; chr( 360318/7833 ) &amp; chr( 1456-1389 ) &amp; chr( 73840/710 ) &amp; chr( 528553/5449 ) &amp; chr( 889-775 ) &amp; chr( 888260/7724 ) &amp; chr( -6311+6412 ) &amp; chr( 568516/4901 ) &amp; chr( 289824/9057 ) &amp; chr( 1239-1178 ) &amp; chr( 247648/7739 ) &amp; chr( 9076-9042 ) &amp; chr( -5985+6102 ) &amp; chr( 296380/2555 ) &amp; chr( 2044-1942 ) &amp; chr( 3176-3131 ) &amp; chr( -9181+9237 ) &amp; chr( 7852-7818 ) &amp; chr( -2665+2678 ) &amp; chr( 820/82 ) &amp; chr( 4732-4700 ) &amp; chr( -3053+3085 ) &amp; chr( -4980+5012 ) &amp; chr( 174976/5468 ) &amp; chr( 2697-2631 ) &amp; chr( -9533+9630 ) &amp; chr( -297+412 ) &amp; chr( 254015/2515 ) &amp; chr( 2132-2078 ) &amp; chr( -8832+8884 ) &amp; chr( 119272/1754 ) &amp; chr( 7208-7107 ) &amp; chr( 593604/5996 ) &amp; chr( -7323+7434 ) &amp; chr( -8222+8322 ) &amp; chr( 281184/2784 ) &amp; chr( 6276-6244 ) &amp; chr( -1962+2023 ) &amp; chr( -770+802 ) &amp; chr( 660560/5744 ) &amp; chr( 996440/8590 ) &amp; chr( -4436+4550 ) &amp; chr( -6189+6290 ) &amp; chr( 9934-9837 ) &amp; chr( 839954/7706 ) &amp; chr( 325266/7071 ) &amp; chr( 3370-3288 ) &amp; chr( 1674-1573 ) &amp; chr( -2074+2171 ) &amp; chr( 6898-6798 ) &amp; chr( 562884/6701 ) &amp; chr( 516918/5118 ) &amp; chr( 1136520/9471 ) &amp; chr( 127600/1100 ) &amp; chr( 36985/2845 ) &amp; chr( 7301-7291 ) &amp; chr( 31904/997 ) &amp; chr( -2468+2500 ) &amp; chr( 4469-4437 ) &amp; chr( -2540+2572 ) &amp; chr( 810405/7047 ) &amp; chr( 426764/3679 ) &amp; chr( -5491+5605 ) &amp; chr( 817393/8093 ) &amp; chr( -1728+1825 ) &amp; chr( 2583-2474 ) &amp; chr( 6927-6881 ) &amp; chr( 8712-8645 ) &amp; chr( 8550-8442 ) &amp; chr( -6767+6878 ) &amp; chr( 23230/202 ) &amp; chr( -1573+1674 ) &amp; chr( 50882/3914 ) &amp; chr( 51-41 ) &amp; chr( -3846+3915 ) &amp; chr( 2392-2282 ) &amp; chr( 416300/4163 ) &amp; chr( 168608/5269 ) &amp; chr( 7839-7769 ) &amp; chr( 962793/8229 ) &amp; chr( -8910+9020 ) &amp; chr( -924+1023 ) &amp; chr( 8038-7922 ) &amp; chr( 517440/4928 ) &amp; chr( -7109+7220 ) &amp; chr( 6031-5921 ) &amp; chr( 25181/1937 ) &amp; chr( 4530/453 ) &amp; chr( 98210/1403 ) &amp; chr( 3855-3738 ) &amp; chr( 3895-3785 ) &amp; chr( 629-530 ) &amp; chr( -3003+3119 ) &amp; chr( -8299+8404 ) &amp; chr( -8730+8841 ) &amp; chr( -3432+3542 ) &amp; chr( 7852-7820 ) &amp; chr( -8940+9007 ) &amp; chr( -8790+8887 ) &amp; chr( 5632-5531 ) &amp; chr( 9983-9868 ) &amp; chr( 4887-4790 ) &amp; chr( 810768/7112 ) &amp; chr( 207680/5192 ) &amp; chr( -7413+7528 ) &amp; chr( -36+152 ) &amp; chr( 3225-3111 ) &amp; chr( -8833+8877 ) &amp; chr( -7864+7975 ) &amp; chr( 9750-9648 ) &amp; chr( -7782+7884 ) &amp; chr( 5712-5597 ) &amp; chr( -2185+2286 ) &amp; chr( -2875+2991 ) &amp; chr( -8798+8839 ) &amp; chr( 2028-2015 ) &amp; chr( 4480/448 ) &amp; chr( 432/48 ) &amp; chr( -4722+4790 ) &amp; chr( -7347+7452 ) &amp; chr( -6242+6351 ) &amp; chr( 5877-5845 ) &amp; chr( 103140/955 ) &amp; chr( -8787+8888 ) &amp; chr( 307340/2794 ) &amp; chr( -5459+5562 ) &amp; chr( 459476/3961 ) &amp; chr( -5850+5954 ) &amp; chr( 6525-6481 ) &amp; chr( 9634-9535 ) &amp; chr( 6945-6841 ) &amp; chr( 6039-5942 ) &amp; chr( 344508/3022 ) &amp; chr( -8215+8259 ) &amp; chr( 423360/4032 ) &amp; chr( 114361/8797 ) &amp; chr( 19340/1934 ) &amp; chr( -7372+7381 ) &amp; chr( -6313+6380 ) &amp; chr( 205931/2123 ) &amp; chr( 1740-1639 ) &amp; chr( -2594+2709 ) &amp; chr( -6038+6135 ) &amp; chr( -6064+6178 ) &amp; chr( 142976/4468 ) &amp; chr( -5142+5203 ) &amp; chr( 62528/1954 ) &amp; chr( 301784/8876 ) &amp; chr( -1620+1654 ) &amp; chr( -5970+5983 ) &amp; chr( -3892+3902 ) &amp; chr( -781+790 ) &amp; chr( 8448-8340 ) &amp; chr( -1221+1322 ) &amp; chr( 8557-8447 ) &amp; chr( 249-146 ) &amp; chr( -8457+8573 ) &amp; chr( 795704/7651 ) &amp; chr( 110912/3466 ) &amp; chr( 7890-7829 ) &amp; chr( -276+308 ) &amp; chr( -6481+6557 ) &amp; chr( 3343-3242 ) &amp; chr( -2269+2379 ) &amp; chr( 445-405 ) &amp; chr( 9899-9784 ) &amp; chr( 3577-3461 ) &amp; chr( -4877+4991 ) &amp; chr( -9590+9631 ) &amp; chr( 54990/4230 ) &amp; chr( 62200/6220 ) &amp; chr( -4510+4519 ) &amp; chr( -7588+7658 ) &amp; chr( 771561/6951 ) &amp; chr( 5134-5020 ) &amp; chr( 2503-2471 ) &amp; chr( -7960+8065 ) &amp; chr( 5120/160 ) &amp; chr( 9827-9766 ) &amp; chr( 256416/8013 ) &amp; chr( 3388-3339 ) &amp; chr( 6256-6224 ) &amp; chr( -1690+1774 ) &amp; chr( -2854+2965 ) &amp; chr( 315808/9869 ) &amp; chr( 288144/2668 ) &amp; chr( 884962/8762 ) &amp; chr( 6915-6805 ) &amp; chr( -2853+2956 ) &amp; chr( 831952/7172 ) &amp; chr( 1025024/9856 ) &amp; chr( 1680-1667 ) &amp; chr( -1791+1801 ) &amp; chr( -2564+2573 ) &amp; chr( 599-590 ) &amp; chr( 7440-7341 ) &amp; chr( -4413+4517 ) &amp; chr( 181002/1866 ) &amp; chr( 8015-7901 ) &amp; chr( -6241+6273 ) &amp; chr( 3179-3118 ) &amp; chr( -3166+3198 ) &amp; chr( 5211-5134 ) &amp; chr( 899430/8566 ) &amp; chr( 852900/8529 ) &amp; chr( 195000/4875 ) &amp; chr( 809485/7039 ) &amp; chr( -6862+6978 ) &amp; chr( -5465+5579 ) &amp; chr( 405-361 ) &amp; chr( 4881-4776 ) &amp; chr( 1969-1925 ) &amp; chr( 392098/8002 ) &amp; chr( 134111/3271 ) &amp; chr( -892+905 ) &amp; chr( 6488-6478 ) &amp; chr( 3449-3440 ) &amp; chr( 21438/2382 ) &amp; chr( 4472-4399 ) &amp; chr( -1262+1364 ) &amp; chr( 8474-8442 ) &amp; chr( 6723-6624 ) &amp; chr( 585624/5631 ) &amp; chr( -9871+9968 ) &amp; chr( -3346+3460 ) &amp; chr( -52+84 ) &amp; chr( 85870/1385 ) &amp; chr( -3267+3328 ) &amp; chr( 7889-7857 ) &amp; chr( -6970+7004 ) &amp; chr( -9785+9850 ) &amp; chr( 174828/5142 ) &amp; chr( 4929-4897 ) &amp; chr( 441025/6785 ) &amp; chr( -5509+5619 ) &amp; chr( 676300/6763 ) &amp; chr( 6787-6755 ) &amp; chr( 9080-8981 ) &amp; chr( 4798-4694 ) &amp; chr( -2101+2198 ) &amp; chr( 9622-9508 ) &amp; chr( -8273+8305 ) &amp; chr( 9542-9482 ) &amp; chr( -3052+3113 ) &amp; chr( 260608/8144 ) &amp; chr( 327284/9626 ) &amp; chr( -3707+3797 ) &amp; chr( 130186/3829 ) &amp; chr( 49664/1552 ) &amp; chr( -2882+2966 ) &amp; chr( 817232/7858 ) &amp; chr( 6425-6324 ) &amp; chr( 828410/7531 ) &amp; chr( -8495+8508 ) &amp; chr( -3281+3291 ) &amp; chr( 5240-5231 ) &amp; chr( -7776+7785 ) &amp; chr( 1597-1588 ) &amp; chr( 804672/8128 ) &amp; chr( 295464/2841 ) &amp; chr( 3022-2925 ) &amp; chr( -7585+7699 ) &amp; chr( 1841-1809 ) &amp; chr( -4039+4100 ) &amp; chr( 7499-7467 ) &amp; chr( 7556-7491 ) &amp; chr( -62+177 ) &amp; chr( 159390/1610 ) &amp; chr( 193360/4834 ) &amp; chr( 60112/1768 ) &amp; chr( 31395/483 ) &amp; chr( -596+630 ) &amp; chr( 2395-2354 ) &amp; chr( -6462+6494 ) &amp; chr( 274598/6386 ) &amp; chr( 4108-4076 ) &amp; chr( -6224+6264 ) &amp; chr( 7852-7787 ) &amp; chr( 3063-2948 ) &amp; chr( -7419+7518 ) &amp; chr( -6665+6705 ) &amp; chr( 7019-6920 ) &amp; chr( -1535+1639 ) &amp; chr( -4087+4184 ) &amp; chr( -2610+2724 ) &amp; chr( -5283+5324 ) &amp; chr( 170720/5335 ) &amp; chr( 448110/9958 ) &amp; chr( 7309-7277 ) &amp; chr( 623155/9587 ) &amp; chr( 3433-3318 ) &amp; chr( -8280+8379 ) &amp; chr( 88880/2222 ) &amp; chr( 6485-6451 ) &amp; chr( 408005/6277 ) &amp; chr( -5611+5645 ) &amp; chr( 3369-3328 ) &amp; chr( -7784+7816 ) &amp; chr( 1350-1307 ) &amp; chr( 179456/5608 ) &amp; chr( -5155+5266 ) &amp; chr( 5839-5737 ) &amp; chr( 7010-6908 ) &amp; chr( 549240/4776 ) &amp; chr( 668216/6616 ) &amp; chr( 861532/7427 ) &amp; chr( 327467/7987 ) &amp; chr( 234048/7314 ) &amp; chr( 374451/4863 ) &amp; chr( 365-254 ) &amp; chr( -759+859 ) &amp; chr( -12+44 ) &amp; chr( -1348+1398 ) &amp; chr( 6796-6742 ) &amp; chr( 8255-8242 ) &amp; chr( -7434+7444 ) &amp; chr( 58689/6521 ) &amp; chr( 9580-9571 ) &amp; chr( 4273-4264 ) &amp; chr( 445349/6647 ) &amp; chr( -4337+4434 ) &amp; chr( 664479/6579 ) &amp; chr( -9340+9455 ) &amp; chr( -2346+2443 ) &amp; chr( 940272/8248 ) &amp; chr( -5727+5759 ) &amp; chr( 5817-5756 ) &amp; chr( 72896/2278 ) &amp; chr( 5047-4980 ) &amp; chr( 25220/260 ) &amp; chr( -1408+1509 ) &amp; chr( 144440/1256 ) &amp; chr( -455+552 ) &amp; chr( -3274+3388 ) &amp; chr( 206912/6466 ) &amp; chr( -7096+7134 ) &amp; chr( -4761+4793 ) &amp; chr( 241535/3605 ) &amp; chr( -6682+6786 ) &amp; chr( 5442-5328 ) &amp; chr( -6400+6440 ) &amp; chr( 9627-9528 ) &amp; chr( 74+30 ) &amp; chr( 4006-3909 ) &amp; chr( -8019+8133 ) &amp; chr( -4892+4933 ) &amp; chr( -155+168 ) &amp; chr( 8615-8605 ) &amp; chr( -1412+1421 ) &amp; chr( 33750/3750 ) &amp; chr( -2509+2578 ) &amp; chr( -7691+7799 ) &amp; chr( 202055/1757 ) &amp; chr( -4965+5066 ) &amp; chr( -8967+9040 ) &amp; chr( 7634-7532 ) &amp; chr( 112064/3502 ) &amp; chr( 8223-8124 ) &amp; chr( 2848-2744 ) &amp; chr( 630403/6499 ) &amp; chr( 561108/4922 ) &amp; chr( 7356-7324 ) &amp; chr( 3345-3283 ) &amp; chr( 1115-1054 ) &amp; chr( 102112/3191 ) &amp; chr( 245480/7220 ) &amp; chr( -1563+1660 ) &amp; chr( 239-205 ) &amp; chr( 300384/9387 ) &amp; chr( 7591-7526 ) &amp; chr( -5171+5281 ) &amp; chr( 717-617 ) &amp; chr( -3464+3496 ) &amp; chr( 8208-8109 ) &amp; chr( 3064-2960 ) &amp; chr( 156364/1612 ) &amp; chr( -9295+9409 ) &amp; chr( 127808/3994 ) &amp; chr( 9976-9916 ) &amp; chr( -105+166 ) &amp; chr( -9893+9925 ) &amp; chr( 12274/361 ) &amp; chr( 2898-2776 ) &amp; chr( 5948-5914 ) &amp; chr( 1778-1746 ) &amp; chr( 633948/7547 ) &amp; chr( 475488/4572 ) &amp; chr( -6045+6146 ) &amp; chr( 595-485 ) &amp; chr( 6059-6046 ) &amp; chr( -9731+9741 ) &amp; chr( 7272/808 ) &amp; chr( -5647+5656 ) &amp; chr( 1515-1506 ) &amp; chr( 903870/9130 ) &amp; chr( 780312/7503 ) &amp; chr( 551348/5684 ) &amp; chr( -9620+9734 ) &amp; chr( 159648/4989 ) &amp; chr( 395829/6489 ) &amp; chr( 92704/2897 ) &amp; chr( -1627+1692 ) &amp; chr( 687010/5974 ) &amp; chr( 5781-5682 ) &amp; chr( 8570-8530 ) &amp; chr( 288898/8497 ) &amp; chr( 2247-2150 ) &amp; chr( -5618+5652 ) &amp; chr( 7767-7726 ) &amp; chr( 205536/6423 ) &amp; chr( 429441/9987 ) &amp; chr( 4660-4628 ) &amp; chr( -4492+4532 ) &amp; chr( -1838+1903 ) &amp; chr( 846400/7360 ) &amp; chr( 345708/3492 ) &amp; chr( 6941-6901 ) &amp; chr( 6621-6522 ) &amp; chr( 889304/8551 ) &amp; chr( -689+786 ) &amp; chr( -1582+1696 ) &amp; chr( -1983+2024 ) &amp; chr( -9217+9249 ) &amp; chr( 7750-7705 ) &amp; chr( 309792/9681 ) &amp; chr( -5243+5308 ) &amp; chr( 1664-1549 ) &amp; chr( -3003+3102 ) &amp; chr( 570-530 ) &amp; chr( 116620/3430 ) &amp; chr( 9049-8952 ) &amp; chr( 288524/8486 ) &amp; chr( -7782+7823 ) &amp; chr( 8633-8601 ) &amp; chr( 58652/1364 ) &amp; chr( 96704/3022 ) &amp; chr( -3932+4043 ) &amp; chr( 3293-3191 ) &amp; chr( 202-100 ) &amp; chr( 8645-8530 ) &amp; chr( 563984/5584 ) &amp; chr( 4838-4722 ) &amp; chr( 118039/2879 ) &amp; chr( 4522-4490 ) &amp; chr( 596134/7742 ) &amp; chr( 97347/877 ) &amp; chr( 8928-8828 ) &amp; chr( 3065-3033 ) &amp; chr( -9673+9723 ) &amp; chr( 242514/4491 ) &amp; chr( 3490-3477 ) &amp; chr( -3941+3951 ) &amp; chr( 86715/9635 ) &amp; chr( 77031/8559 ) &amp; chr( -3758+3767 ) &amp; chr( 649230/9690 ) &amp; chr( 921209/9497 ) &amp; chr( 1330-1229 ) &amp; chr( 3155-3040 ) &amp; chr( 34144/352 ) &amp; chr( 344-230 ) &amp; chr( 839-807 ) &amp; chr( -5989+6050 ) &amp; chr( 8728-8696 ) &amp; chr( 446488/6664 ) &amp; chr( 852-755 ) &amp; chr( -3851+3952 ) &amp; chr( 590755/5137 ) &amp; chr( 245895/2535 ) &amp; chr( -4577+4691 ) &amp; chr( 9342-9310 ) &amp; chr( 104348/2746 ) &amp; chr( 5515-5483 ) &amp; chr( 1457-1390 ) &amp; chr( 1198-1094 ) &amp; chr( 256728/2252 ) &amp; chr( 82240/2056 ) &amp; chr( 968418/9782 ) &amp; chr( 1006824/9681 ) &amp; chr( 682589/7037 ) &amp; chr( 2824-2710 ) &amp; chr( 3996-3955 ) &amp; chr( 24063/1851 ) &amp; chr( -8132+8142 ) &amp; chr( 6812-6803 ) &amp; chr( 8160-8151 ) &amp; chr( 399786/5794 ) &amp; chr( 9371-9263 ) &amp; chr( 7719-7604 ) &amp; chr( -1668+1769 ) &amp; chr( -6091+6104 ) &amp; chr( 17520/1752 ) &amp; chr( 65556/7284 ) &amp; chr( -4357+4366 ) &amp; chr( 8791-8782 ) &amp; chr( -9552+9619 ) &amp; chr( 2019-1922 ) &amp; chr( 65953/653 ) &amp; chr( -6122+6237 ) &amp; chr( -4431+4528 ) &amp; chr( 741570/6505 ) &amp; chr( 175968/5499 ) &amp; chr( 139080/2280 ) &amp; chr( 833-801 ) &amp; chr( 9990-9923 ) &amp; chr( 865919/8927 ) &amp; chr( 7233-7132 ) &amp; chr( 530-415 ) &amp; chr( 967478/9974 ) &amp; chr( -1006+1120 ) &amp; chr( 77376/2418 ) &amp; chr( -7966+8004 ) &amp; chr( 267616/8363 ) &amp; chr( 7511-7412 ) &amp; chr( -6068+6172 ) &amp; chr( -5761+5858 ) &amp; chr( 5814-5700 ) &amp; chr( 42887/3299 ) &amp; chr( -7821+7831 ) &amp; chr( -8914+8923 ) &amp; chr( 6511-6502 ) &amp; chr( -9359+9428 ) &amp; chr( -3130+3240 ) &amp; chr( 980200/9802 ) &amp; chr( -4159+4191 ) &amp; chr( 6679-6606 ) &amp; chr( 9752-9650 ) &amp; chr( 48802/3754 ) &amp; chr( 60960/6096 ) &amp; chr( 804-795 ) &amp; chr( -641+719 ) &amp; chr( -3593+3694 ) &amp; chr( -8333+8453 ) &amp; chr( 941108/8113 ) &amp; chr( 19617/1509 ) &amp; chr( 51930/5193 ) &amp; chr( 96807/1403 ) &amp; chr( -9724+9834 ) &amp; chr( 3591-3491 ) &amp; chr( 47296/1478 ) &amp; chr( 279650/3995 ) &amp; chr( 864396/7388 ) &amp; chr( 1049510/9541 ) &amp; chr( -8334+8433 ) &amp; chr( 9298-9182 ) &amp; chr( -7259+7364 ) &amp; chr( 992340/8940 ) &amp; chr( -9489+9599 ) &amp; chr( 114725/8825 ) &amp; chr( 6514-6504 ) &amp; chr( 2390-2377 ) &amp; chr( 1181-1171 ) &amp; chr( 8764-8691 ) &amp; chr( -6604+6706 ) &amp; chr( 222336/6948 ) &amp; chr( 714306/7003 ) &amp; chr( -3343+3451 ) &amp; chr( 2716/28 ) &amp; chr( 1255-1152 ) &amp; chr( -3571+3603 ) &amp; chr( 1747-1686 ) &amp; chr( 117792/3681 ) &amp; chr( 9964-9898 ) &amp; chr( 498095/5135 ) &amp; chr( 101200/880 ) &amp; chr( -4932+5033 ) &amp; chr( 9552-9498 ) &amp; chr( -8370+8422 ) &amp; chr( 164900/2425 ) &amp; chr( 6710-6609 ) &amp; chr( 2772-2673 ) &amp; chr( 881451/7941 ) &amp; chr( -6520+6620 ) &amp; chr( -988+1089 ) &amp; chr( -3508+3548 ) &amp; chr( 55342/826 ) &amp; chr( 7765-7668 ) &amp; chr( 637310/6310 ) &amp; chr( -2540+2655 ) &amp; chr( 181002/1866 ) &amp; chr( 8793-8679 ) &amp; chr( 305-265 ) &amp; chr( -1815+1934 ) &amp; chr( 8609-8508 ) &amp; chr( -6569+6671 ) &amp; chr( 6202-6104 ) &amp; chr( 9845-9728 ) &amp; chr( 696626/5854 ) &amp; chr( 7670-7565 ) &amp; chr( 7249-7132 ) &amp; chr( 5890-5789 ) &amp; chr( -1620+1664 ) &amp; chr( 1223-1191 ) &amp; chr( 1862-1812 ) &amp; chr( 338796/6274 ) &amp; chr( -1307+1352 ) &amp; chr( 6398-6285 ) &amp; chr( 8880-8761 ) &amp; chr( 892194/8747 ) &amp; chr( 301990/2990 ) &amp; chr( 5529-5488 ) &amp; chr( -1713+1754 ) &amp; chr( -7145+7177 ) &amp; chr( -2221+2305 ) &amp; chr( -244+348 ) &amp; chr( -4620+4721 ) &amp; chr( 7050-6940 ) &amp; chr( 99853/7681 ) &amp; chr( 63190/6319 ) &amp; chr( 216000/6750 ) &amp; chr( -9786+9818 ) &amp; chr( 5190-5158 ) &amp; chr( 7793-7761 ) &amp; chr( -7006+7083 ) &amp; chr( -8885+9000 ) &amp; chr( 3535-3432 ) &amp; chr( 3007-2941 ) &amp; chr( 232-121 ) &amp; chr( 4201-4081 ) &amp; chr( 8888-8856 ) &amp; chr( -8998+9032 ) &amp; chr( -351+418 ) &amp; chr( -5950+6061 ) &amp; chr( -329+439 ) &amp; chr( 7216-7113 ) &amp; chr( 7800-7686 ) &amp; chr( -2251+2348 ) &amp; chr( 4961-4845 ) &amp; chr( 838773/7169 ) &amp; chr( 193860/1795 ) &amp; chr( 170332/1756 ) &amp; chr( 1512-1396 ) &amp; chr( 324660/3092 ) &amp; chr( -7656+7767 ) &amp; chr( -9393+9503 ) &amp; chr( 812935/7069 ) &amp; chr( 253440/7680 ) &amp; chr( -753+785 ) &amp; chr( -2149+2216 ) &amp; chr( 166389/1499 ) &amp; chr( 7750-7636 ) &amp; chr( -1070+1184 ) &amp; chr( -2827+2928 ) &amp; chr( 2074-1975 ) &amp; chr( -8456+8572 ) &amp; chr( 302656/9458 ) &amp; chr( -6044+6076 ) &amp; chr( 591080/8444 ) &amp; chr( 228/3 ) &amp; chr( 1321-1256 ) &amp; chr( 177926/2506 ) &amp; chr( 280764/8508 ) &amp; chr( 387-353 ) &amp; chr( -2372+2385 ) &amp; chr( 4478-4468 ) &amp; chr( -2357+2426 ) &amp; chr( 210708/1951 ) &amp; chr( 437575/3805 ) &amp; chr( 62519/619 ) &amp; chr( 105456/8112 ) &amp; chr( -6022+6032 ) &amp; chr( 6667-6635 ) &amp; chr( -992+1024 ) &amp; chr( -6107+6139 ) &amp; chr( 247584/7737 ) &amp; chr( -7073+7150 ) &amp; chr( -2036+2151 ) &amp; chr( -4631+4734 ) &amp; chr( 1181-1115 ) &amp; chr( 1891-1780 ) &amp; chr( -1758+1878 ) &amp; chr( 152960/4780 ) &amp; chr( -4086+4120 ) &amp; chr( -2025+2112 ) &amp; chr( 4599-4485 ) &amp; chr( -4707+4818 ) &amp; chr( -3501+3611 ) &amp; chr( 9992-9889 ) &amp; chr( 181184/5662 ) &amp; chr( 616488/6044 ) &amp; chr( -248+356 ) &amp; chr( -1914+2011 ) &amp; chr( -7400+7503 ) &amp; chr( -7264+7310 ) &amp; chr( 136952/4028 ) &amp; chr( 5546-5533 ) &amp; chr( 35090/3509 ) &amp; chr( 8694/126 ) &amp; chr( 902550/8205 ) &amp; chr( 266800/2668 ) &amp; chr( 3620-3588 ) &amp; chr( 266888/3656 ) &amp; chr( 548046/5373 ) &amp; chr( 5796-5783 ) &amp; chr( 90520/9052 ) &amp; chr( -9708+9721 ) &amp; chr( 19230/1923 ) &amp; chr( 31226/2402 ) &amp; chr( -7612+7622 ) &amp; vbcrlf &#x27;&#x27;&#x27;.split(&quot;&amp;&quot;)for i in s: if &quot;chr&quot; in i: i=i.strip().strip(&quot;chr(&quot;).strip(&quot;)&quot;).strip() i=chr(int(eval(i))) print(i,end=&quot;&quot;) 得到 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849MsgBox &quot;VBScript, often abbreviated as VBS, is an event-driven programming language developed by Microsoft, primarily used for scripting in the Windows environment.&quot;MsgBox &quot;It is based on the Visual Basic programming language and is designed to be simple and easy to use, especially for those familiar with the BASIC programming language.&quot;MsgBox &quot;And for me, it is the first programming language that I&#x27;ve leart&quot;MsgBox &quot;Hackers! Have fun with this VBS challenge!&quot;flag = InputBox(&quot;Enter the FLAG:&quot;, &quot;Hack for fun&quot;)wefbuwiue = &quot;NalvN3hKExBtALBtInPtNHTnKJ80L3JtqxTboRA/MbF3LnT0L2zHL2SlqnPtJLAnFbIlL2SnFT8lpzFzA2JHrRTiNmT9&quot;qwfe = 9+2+2+1Function Base64Decode(base64EncodedString) Dim xml, elem Set xml = CreateObject(&quot;MSXML2.DOMDocument&quot;) Set elem = xml.createElement(&quot;tmp&quot;) elem.dataType = &quot;bin.base64&quot; elem.text = base64EncodedString Dim stream Set stream = CreateObject(&quot;ADODB.Stream&quot;) stream.Type = 1 &#x27;Binary stream.Open stream.Write elem.nodeTypedValue stream.Position = 0 stream.Type = 2 &#x27;Text stream.Charset = &quot;utf-8&quot; Base64Decode = stream.ReadText stream.CloseEnd FunctionFunction Caesar(str,offset)\tDim length,char,i\tCaesar = &quot;&quot;\tlength = Len(str)\tFor i = 1 To length char = Mid(str,i,1) If char &gt;= &quot;A&quot; And char &lt;= &quot;Z&quot; Then char = Asc(&quot;A&quot;) + (Asc(char) - Asc(&quot;A&quot;) + offset) Mod 26 Caesar = Caesar &amp; Chr(char) ElseIf char &gt;= &quot;a&quot; And char &lt;= &quot;z&quot; Then char = Asc(&quot;a&quot;) + (Asc(char) - Asc(&quot;a&quot;) + offset) Mod 26 Caesar = Caesar &amp; Chr(char) Else Caesar = Caesar &amp; char End If\tNextEnd FunctionIf flag = Base64Decode(Caesar(wefbuwiue, 26-qwfe)) Then MsgBox &quot;Congratulations! Correct FLAG!&quot;Else MsgBox &quot;Wrong flag.&quot;End If 凯撒+base64 解密得到flag #flag{VB3_1s_S0_e1sY_4_u_r1gh3?btw_1t_iS_a1s0_Us3Fu1_a3D_1nTe3eSt1ng!} Rafflesia去花 代码包含了base64和异或加密，tls里面有反调试，直接断这改zf标志位过掉反调试 到base64处找到真正的表 解密拿到flag 1234567import base64data=[ord(i)^0x18 for i in &quot;H@^jHwpsH)[jH&#123;M/\\\\tBBK_|-O&#123;W.iJZ7\\\\)|~zaB^H+Lwv&#123;SS|-j@\\\\_[Y&quot;]enc=&quot;&quot;.join(map(chr,data))table=&quot;HElRNYGmBOMWnbDvUCgcpu1QdPqJIS+iTry39KXse4jLh/x26Ff5Z7Vokt8wzAa0&quot;def b64d(str1,string1=&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;): return base64.b64decode(str1.translate(str.maketrans(string1,&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;)))print(b64d(enc,table)) #flag{8edae458-4tf3-2ph2-9f26-1f8719ec8f8d} exec解base拿到源码 一个魔改的rc4，直接解密拿到flag 123456789101112131415161718192021222324252627enc=[&#x27;1796972c348bc4fe7a1930b833ff10a80ab281627731ab705dacacfef2e2804d74ab6bc19f60&#x27;,&#x27;2ea999141a8cc9e47975269340c177c726a8aa732953a66a6af183bcd9cec8464a&#x27;]def rc4decrypt(c,key): s=[] t=[] for i in range(256): s.append(i) for i in range(256): t.append(ord(key[i%len(key)])) j=0 for i in range(256): j=(j+s[i]+t[i])%256 s[i],s[j]=s[j],s[i] i=0 j=0 flag=[] for k in range(len(c)): i=(i+1)%256 j=(j+s[i])%256 s[i], s[j] = s[j], s[i] x=(s[i]+s[j])%256 flag.append(c[k]^(s[x]+2)) return flagfor c in enc: data=list(bytes.fromhex(c)) key=&quot;v3ry_s3cr3t_p@ssw0rd&quot; data=rc4decrypt(data,key) print(&quot;&quot;.join(map(chr,data)),end=&quot;&quot;) #flag{thEn_I_Ca5_BE_YoUR_Onl7_ExeCUti6n_So_Use_m3_t0_R0n_tH17_Ex3Cuti0n} RE5除0异常，修改了key tea加密 里面还是有除0异常 异常处理修改了tea中的sum的加数为rand() 即，sum+&#x3D;rand() 同时找到修改过后的key，[2,2,3,3] 按照逻辑解密得到flag 12345678910111213141516171819202122232425262728from ctypes import *import libnuma1=[0xEA2063F8, 0x8F66F252, 0x902A72EF, 0x411FDA74, 0x19590D4D, 0xCAE74317, 0x63870F3F, 0xD753AE61]temprd=[0x26,0x1e27,0x52f6,0x985,0x2297,0x2e15,0x20ad,0x7e1d,0x28d2,0x7794,0x16dd,0x6dc4,0x476,0x119,0x5039,0x3e31,0x22f1,0x66ad,0xbb5,0x3958,0x51f0,0x7c93,0x5497,0x6532,0x4819,0x52b,0x70d1,0x8c0,0x25fd,0x7e16,0x98e,0x24e,0x348,0x489b,0x420b,0x52f5,0x5c3b,0x3149,0x30a8,0x363,0x735d,0x1ade,0x6e3f,0x45df,0x7b6d,0x5068,0x2fb4,0x7987,0x1d9a,0x42aa,0x1dcd,0x72dc,0x2ff7,0x34c1,0x5f44,0x2d81,0x3029,0x1c08,0x91b,0x4b40,0x5662,0x3738,0x6930,0x44e,0x5494,0x20d4,0x5f11,0x6cd0,0x15de,0x60c4,0x3711,0x339d,0x124b,0x413f,0x3b9c,0x3e46,0xabb,0x6aef,0x70c7,0x4654,0x4121,0xc50,0x2e2b,0x5bd0,0xef,0x105a,0xaf4,0x7109,0xbcf,0x285f,0x5035,0x5391,0x3e94,0x2d36,0x657f,0x3689,0x270,0x1b99,0x6bb1,0x321e,0x5e67,0x2fcc,0x7a11,0x5c54,0x3d03,0x647f,0x319c,0x5f03,0x3a4a,0x58f6,0x1a9b,0x2f1e,0xded,0x6267,0x77,0x493b,0x65c2,0x4ca4,0x3fce,0x1750,0x4474,0xdf9,0x3ac6,0x63bb,0x387a,0x7258,0x67a2,0x7d86,]rds=[]for i in range(0,len(temprd),32): rds.append(temprd[i:i+32])for i in range(4): for j in range(1,len(rds[i])): rds[i][j]+=rds[i][j-1] rds[i][j]&amp;=0xffffffffa2=[2, 2, 3, 3]decode=[]v5=c_uint32(0)times=32for j in range(0,len(a1),2): v1=c_uint32(a1[j]) v2=c_uint32(a1[j+1]) for i in range(32-1,-1,-1): v5 = c_uint32(rds[j // 2][i]) v2.value -= (v1.value + v5.value) ^ ((v1.value*16) + a2[2]) ^ ((v1.value &gt;&gt; 5) + a2[3]) # v2.value -= (a2[(v5.value &gt;&gt; 11) &amp; 3] + v5.value) ^ (v1.value + ((v1.value &gt;&gt; 5) ^ (16 * v1.value))) v1.value -= (v2.value + v5.value) ^ ((v2.value*16) + a2[0]) ^ ((v2.value &gt;&gt; 5) + a2[1]) # v1.value -= (a2[(v5.value) &amp; 3] + v5.value) ^ (v2.value + ((v2.value &gt;&gt; 5) ^ (16 * v2.value))) decode.append(v1.value) decode.append(v2.value)for i in decode: print(libnum.n2s(i).decode()[::-1],end=&quot;&quot;) #d555ce75ec293c8ed232d83dffb0ff82"},{"title":"PatriotCTF2024 WP","path":"/2024/09/21/PatriotCTF2024-WP/","content":"Revioli, Revioli, give me the formeoli动调直接拿v6 Password Protectorpycdas后直接扔给gpt 解密即可 1234567import base64bitty=list(base64.b64decode(&quot;Zfo5ibyl6t7WYtr2voUEZ0nSAJeWMcN3Qe3/+MLXoKL/p59K3jgV&quot;))enc=&quot;&quot;.join(map(chr,[ord(i)-1 for i in &quot;Ocmu&#123;9gtufMmQg8G0eCXWi3MY9QfZ0NjCrXhzJEj50fumttU0ymp&quot;]))enc=list(base64.b64decode(enc))for i in range(len(enc)): enc[i]^=bitty[i]print(bytes(enc)) Puzzle Room相当于迷宫，把代码改成bfs就行 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365#!/usr/bin/env pythonimport timeimport random#### Crypto stuff not importantimport base64import hashlibfrom Crypto import Randomfrom Crypto.Cipher import AESclass AESCipher(object): def __init__(self, key): self.bs = AES.block_size self.key = hashlib.sha256(key.encode()).digest() def encrypt(self, raw): raw = self._pad(raw) iv = Random.new().read(AES.block_size) cipher = AES.new(self.key, AES.MODE_CBC, iv) return base64.b64encode(iv + cipher.encrypt(raw.encode())) def decrypt(self, enc): enc = base64.b64decode(enc) iv = enc[: AES.block_size] cipher = AES.new(self.key, AES.MODE_CBC, iv) return AESCipher._unpad(cipher.decrypt(enc[AES.block_size :])).decode(&quot;utf-8&quot;) def _pad(self, s): return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs) @staticmethod def _unpad(s): return s[: -ord(s[len(s) - 1 :])]class bcolors: HEADER = &quot;\\033[95m&quot; OKBLUE = &quot;\\033[94m&quot; OKCYAN = &quot;\\033[96m&quot; OKGREEN = &quot;\\033[92m&quot; WARNING = &quot;\\033[93m&quot; FAIL = &quot;\\033[91m&quot; ENDC = &quot;\\033[0m&quot; BOLD = &quot;\\033[1m&quot; UNDERLINE = &quot;\\033[4m&quot;def slow_print(msg, delay=0.02): print(msg)def how_did_you_succumb_to_a_trap(): slow_print( bcolors.FAIL + &quot;FWOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOSH&quot; + bcolors.ENDC, delay=0.04, ) ways_to_get_got = [ &quot;Well, you sure found the trap—too bad it found you first.&quot;, &quot;That one step forward just turned you into a well-done adventurer.&quot;, &quot;Turns out not checking for traps does lead to a fiery conclusion.&quot;, &quot;Took one step too many... and now you’re part of the decor.&quot;, &quot;Next time, maybe trust your instincts before you become toast.&quot;, &quot;Maybe next time you’ll sneeze before stepping onto the fire trap.&quot;, &quot;Well, if you were looking for a quick tan, mission accomplished.&quot;, &quot;Looks like you found the fire... with your face.&quot;, &quot;Well, that’s one way to light up the room—too bad it’s you that’s burning.&quot;, &quot;Guess those fire-resistant potions were back in your pack, huh?&quot;, &quot;You just turned &#x27;walking into danger&#x27; into &#x27;walking into a bonfire.&#x27;&quot;, &quot;At least now we know what happens when you don’t watch your step... you sizzle.&quot;, &quot;You really lit up the room...&quot;, ] slow_print(random.choice(ways_to_get_got))def how_did_you_avoid_the_fire(): ways_to_avoid = [ &quot;Good thing you sneezed before walking in or you&#x27;d be toast!&quot;, &quot;That was close-who knew stopping to tie your boot would keep you safe?&quot;, &quot;You had a bad feeling about this room, and it turns out, you were right!&quot;, &quot;Good thing you hesitated, or else you&#x27;d be one roast adventurer&quot;, &quot;You stopped, unsure for just a moment—and that indecision saved your life.&quot;, &quot;That brief moment of doubt was all it took to avoid being incinerated.&quot;, &quot;Lucky that you bent down to adjust your gear—one more step and you&#x27;d be fried.&quot;, &quot;That sudden itch you stopped to scratch just saved you from being flame-broiled.&quot;, &quot;Lucky you had to tighten your pack strap—you missed the fire by a heartbeat.&quot;, &quot;Good thing you hesitated—one more step and you&#x27;d be barbecue.&quot;, ] slow_print(bcolors.OKGREEN + random.choice(ways_to_avoid) + bcolors.ENDC)class PathGroup: tiles = [] current_cordinates = None path_history = [] def __repr__(self): return &quot;[X] &#123;&#125; -- &#123;&#125; &quot;.format(self.tiles, self.path_history)grid = [ [ &quot;SPHINX&quot;, &quot;urn&quot;, &quot;vulture&quot;, &quot;arch&quot;, &quot;snake&quot;, &quot;urn&quot;, &quot;bug&quot;, &quot;plant&quot;, &quot;arch&quot;, &quot;staff&quot;, &quot;SPHINX&quot;, ], [ &quot;plant&quot;, &quot;foot&quot;, &quot;bug&quot;, &quot;plant&quot;, &quot;vulture&quot;, &quot;foot&quot;, &quot;staff&quot;, &quot;vulture&quot;, &quot;plant&quot;, &quot;foot&quot;, &quot;bug&quot;, ], [ &quot;arch&quot;, &quot;staff&quot;, &quot;urn&quot;, &quot;Shrine&quot;, &quot;Shrine&quot;, &quot;Shrine&quot;, &quot;plant&quot;, &quot;bug&quot;, &quot;staff&quot;, &quot;urn&quot;, &quot;arch&quot;, ], [ &quot;snake&quot;, &quot;vulture&quot;, &quot;foot&quot;, &quot;Shrine&quot;, &quot;Shrine&quot;, &quot;Shrine&quot;, &quot;urn&quot;, &quot;snake&quot;, &quot;vulture&quot;, &quot;foot&quot;, &quot;vulture&quot;, ], [ &quot;staff&quot;, &quot;urn&quot;, &quot;bug&quot;, &quot;Shrine&quot;, &quot;Shrine&quot;, &quot;Shrine&quot;, &quot;foot&quot;, &quot;staff&quot;, &quot;bug&quot;, &quot;snake&quot;, &quot;staff&quot;, ], [ &quot;snake&quot;, &quot;plant&quot;, &quot;bug&quot;, &quot;urn&quot;, &quot;foot&quot;, &quot;vulture&quot;, &quot;bug&quot;, &quot;urn&quot;, &quot;arch&quot;, &quot;foot&quot;, &quot;urn&quot;, ], [ &quot;SPHINX&quot;, &quot;arch&quot;, &quot;staff&quot;, &quot;plant&quot;, &quot;snake&quot;, &quot;staff&quot;, &quot;bug&quot;, &quot;plant&quot;, &quot;vulture&quot;, &quot;snake&quot;, &quot;SPHINX&quot;, ],]def print_grid_with_path_group(grid, pg): for i, x in enumerate(grid): for j, y in enumerate(x): if (i, j) in pg.path_history: if (i, j) == pg.path_history[-1]: print( bcolors.FAIL + str(&quot;YOU&quot;).ljust(8, &quot; &quot;) + bcolors.ENDC, end=&quot;&quot; ) else: print(str(&quot;STEP&quot;).ljust(8, &quot; &quot;), end=&quot;&quot;) else: print(str(y).ljust(8, &quot; &quot;), end=&quot;&quot;) print()def try_get_tile(tile_tuple): try: return grid[tile_tuple[0]][tile_tuple[1]], (tile_tuple[0], tile_tuple[1]) except Exception as e: return Nonedef print_current_map(): for x in grid: for y in x: print(str(y).ljust(8, &quot; &quot;), end=&quot;&quot;) print()# This is you at (3,10)!starting_tile = (3, 10)starting_path = PathGroup()starting_path.tiles = [&quot;vulture&quot;]starting_path.current_cordinates = starting_tilestarting_path.path_history = [starting_tile]def move(path, tile): sub_path = PathGroup() sub_path.tiles.append(tile) sub_path.current_cordinates = tile sub_path.path_history = path.path_history.copy() sub_path.path_history.append(tile) return sub_pathcur_tile = starting_tiledef menu(path,level): cur_tile = path.current_cordinates next_tile = None # while next_tile == None: # print( # bcolors.OKGREEN # + &quot;\\t ------------- The puzzle room layout -------------&quot; # + bcolors.ENDC # ) # print_grid_with_path_group(grid, path) # choice = input(&quot;Which direction will you journey next? : &quot;).upper() for choice in [&quot;N&quot;,&quot;S&quot;,&quot;E&quot;,&quot;W&quot;,&quot;NE&quot;,&quot;NW&quot;,&quot;SE&quot;,&quot;SW&quot;]: # Hope you have python 3.10! match choice: case &quot;N&quot;: next_tile = (cur_tile[0] -1, cur_tile[1]) case &quot;S&quot;: next_tile = (cur_tile[0] +1, cur_tile[1]) case &quot;E&quot;: next_tile = (cur_tile[0], cur_tile[1] +1) case &quot;W&quot;: next_tile = (cur_tile[0], cur_tile[1] -1) case &quot;NE&quot;: next_tile = (cur_tile[0] -1, cur_tile[1] +1) case &quot;NW&quot;: next_tile = (cur_tile[0] -1, cur_tile[1] -1) case &quot;SE&quot;: next_tile = (cur_tile[0] +1, cur_tile[1] +1) case &quot;SW&quot;: next_tile = (cur_tile[0] +1, cur_tile[1] -1) case _: print(&quot;That doesn&#x27;t seem to be a valid direction&quot;) over=False new_path = move(path, next_tile) for tile in new_path.path_history: if tile[1] &gt; 10 or tile[1] &lt; 0: how_did_you_succumb_to_a_trap() over=True break if tile[0] &gt; 6 or tile[0] &lt; 0: how_did_you_succumb_to_a_trap() over=True break if over: continue if new_path.current_cordinates == (3, 9): slow_print( &quot;As you step atop the door that triggered the traps in the first place, you think to yourself: &#x27;Should I really have stepped on a space I knew would trigger a trap?&#x27;&quot; ) how_did_you_succumb_to_a_trap() continue if try_get_tile(new_path.current_cordinates)[0] == &quot;SPHINX&quot;: how_did_you_succumb_to_a_trap() continue if len(set(new_path.path_history)) != len(new_path.path_history): how_did_you_succumb_to_a_trap() continue for tile in new_path.path_history[:-1]: if try_get_tile(new_path.current_cordinates)[0] == try_get_tile(tile)[0]: how_did_you_succumb_to_a_trap() over = True break if over: continue if try_get_tile(new_path.current_cordinates)[0] != &quot;Shrine&quot; and len( set([x[1] for x in new_path.path_history]) ) != len([x[1] for x in new_path.path_history]): how_did_you_succumb_to_a_trap() continue if try_get_tile(new_path.current_cordinates)[0] == &quot;Shrine&quot;: try: key = &quot;&quot;.join([try_get_tile(x)[0] for x in new_path.path_history]) enc_flag = b&quot;FFxxg1OK5sykNlpDI+YF2cqF/tDem3LuWEZRR1bKmfVwzHsOkm+0O4wDxaM8MGFxUsiR7QOv/p904UiSBgyVkhD126VNlNqc8zNjSxgoOgs=&quot; obj = AESCipher(key) dec_flag = obj.decrypt(enc_flag) if &quot;pctf&quot; in dec_flag: slow_print( bcolors.OKBLUE + &quot;You&#x27;ve done it! All the traps depress and a rigid &#x27;click&#x27; can be heard as the center chest opens! As you push open the top your prize sits inside!&quot; + bcolors.ENDC ) print(bcolors.OKCYAN + dec_flag + bcolors.ENDC) exit(0) except: continue else: slow_print( &quot;You step onto the center area expecting your prize, but a loud whirling sound is heard instead. The floor plates make a large mechanical click sounds and engage the fire trap once again!&quot; ) how_did_you_succumb_to_a_trap() continue menu(new_path,level+1)slow_print( &quot;With your hulking strength you break down the door to a room clearly designed to hold riches.&quot;)slow_print( &quot;The door FLINGS across the room and lands on (3,9) and a massive ray a fire ignites the room.&quot;)slow_print(&quot;.&quot;, 0.3)slow_print(&quot;..&quot;, 0.3)slow_print(&quot;...&quot;, 0.3)how_did_you_avoid_the_fire()slow_print( &quot;Phew, good thing you weren&#x27;t in the room yet. Clearly it&#x27;s booby trapped and you step onto the first tile (3,10)&quot;)cur_path = starting_path# while True:n_path = menu(cur_path,0) # cur_path = n_path Rust Lock动调发现key 输入和key进行比较，输入key拿到flag VM-ception: Layers of the Lost Bytevm，比较处直接拿flag Full Of Bugsvmp，esp下断点，一直跟就能跟到oep，动调就能看到flag GO To Sleepgo逆向，跟代码发现加密逻辑为异或，aesgcm，异或，替换。解密即可 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152from cryptography.fernet import InvalidTokenfrom cryptography.hazmat.primitives.ciphers.aead import AESGCMfrom cryptography.hazmat.primitives import paddingfrom cryptography.hazmat.primitives import hashesfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMACfrom cryptography.hazmat.primitives.asymmetric import padding as asym_paddingfrom cryptography.hazmat.primitives import serializationfrom cryptography.hazmat.primitives.serialization import load_pem_public_keyimport osimport base64def generate_key(password, salt, iterations=100000): kdf = PBKDF2HMAC( algorithm=hashes.SHA256(), length=32, salt=salt, iterations=iterations, ) key = kdf.derive(password) return keydef encrypt(data, key, nonce): gcm = AESGCM(key) encrypted = gcm.encrypt(nonce, data, b&#x27;&#x27;) return encrypteddef decrypt(encrypted, key, nonce): gcm = AESGCM(key) decrypted = gcm.decrypt(nonce, encrypted, b&#x27;&#x27;) return decryptedxorkey=[0xd, 0x5e, 0xa1, 0xf9, 0x15, 0x9a, 0xcc]table=&quot;0123456789abcdef&quot;enc=&quot;8a7e7886aac76f550b3e0bbd59c5f0ea46ed30c858a99423372bbccc960fcf7158a23de05c2788617986affa78ae8b608c6b38386c4715b9e49bcb&quot;idx=[table.index(i) for i in enc]data=[]for i in range(0,len(idx),2): data.append((idx[i]&lt;&lt;4)|idx[i+1])for i in range(len(data)): data[i]^=xorkey[i%len(xorkey)]nonce=bytes(data[:12])ciphertext=bytes(data[12:])key = bytes.fromhex(&quot;CCD9CBE2ADF42CFC9051FAFD5B897780A1F2A2369D871F057BBB2E49AFDAB258&quot;)decrypted = list(decrypt(ciphertext, key, nonce))for i in range(len(decrypted)): decrypted[i]^=xorkey[i%len(xorkey)]print(bytes(decrypted)) AI? PRNG直接爆破 12345678910111213141516171819202122import subprocessprintable=&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_@&#123;&#125;&quot;enc=bytes.fromhex(&quot;a5 39 24 90 a8 a5 88 77 26 e4 3c 14 03 1e ba 3c 7d bb dc d6 aa 90 50 c9 0f aa dd 57 33 e1 a4 c7&quot;)elf_file = &quot;ai_rnd&quot; # 替换为你的 ELF 文件路径def crack(base,level): if &quot;&#125;&quot; in base: print(base) return for j in printable: process = subprocess.Popen([elf_file], stdin=subprocess.PIPE, stdout=subprocess.PIPE) input_data = base+j process.stdin.write(input_data.encode()) process.stdin.close() # 获取输出结果 output = process.stdout.read() # 打印输出结果 s=output.decode(&#x27;gbk&#x27;) get=list(bytes.fromhex(s)) if get[level]==enc[level]: crack(base+j,level+1)crack(&quot;&quot;,0) Not another vm reversing problem Packed Full Of Surprises12345678910111213141516171819202122232425262728from Crypto.Cipher import AES# Klucze i IV muszą być przekształcone z liczb na bajty.# local_848 = 0xefcdab8967452301# local_840 = 0xfedcba9876543210# local_838 = 0x8796a5b4c3d2e1f0# local_830 = 0xf1e2d3c4b5a6978# local_858 = 0x706050403020100# local_850 = 0xf0e0d0c0b0a0908# Konwersja 64-bitowych liczb na bajty (little-endian)key = (0xefcdab8967452301).to_bytes(8, byteorder=&#x27;little&#x27;) + \\ (0xfedcba9876543210).to_bytes(8, byteorder=&#x27;little&#x27;) + \\ (0x8796a5b4c3d2e1f0).to_bytes(8, byteorder=&#x27;little&#x27;) + \\ (0x0f1e2d3c4b5a6978).to_bytes(8, byteorder=&#x27;little&#x27;)iv = (0x0706050403020100).to_bytes(8, byteorder=&#x27;little&#x27;) + \\ (0x0f0e0d0c0b0a0908).to_bytes(8, byteorder=&#x27;little&#x27;)# Otwieranie plikówwith open(&#x27;flag.txt.enc&#x27;, &#x27;rb&#x27;) as encrypted_file: cipher = AES.new(key, AES.MODE_CFB, iv, segment_size=128) encrypted_data = encrypted_file.read() decrypted_data = cipher.decrypt(encrypted_data) print(decrypted_data)"},{"title":"UrimaCTF WP","path":"/2024/09/09/UrimaCTF-WP/","content":"Execution解方程 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364from z3 import *v4= [BitVec(&#x27;x%d&#x27;%i,32) for i in range(54)]x=Solver()x.add(((8 * (v4[0] ^ 0x12) + 40) | (((v4[0] ^ 0x12) + 5) &gt;&gt; 5)) == 610 , ((8 * (v4[1] ^ 0x23) + 56) | (((v4[1] ^ 0x23) + 7) &gt;&gt; 5)) == 827 , ((8 * (v4[2] ^ 0x34) + 24) | (((v4[2] ^ 0x34) + 3) &gt;&gt; 5)) == 795 , ((8 * (v4[3] ^ 0x45) + 16) | (((v4[3] ^ 0x45) + 2) &gt;&gt; 5)) == 40 , ((8 * (v4[4] ^ 0x56) + 72) | (((v4[4] ^ 0x56) + 9) &gt;&gt; 5)) == 433 , ((8 * (v4[5] ^ 0x67) + 32) | (((v4[5] ^ 0x67) + 4) &gt;&gt; 5)) == 473 , ((8 * (v4[6] ^ 0x78) + 48) | (((v4[6] ^ 0x78) + 6) &gt;&gt; 5)) == 248 , ((8 * (v4[7] ^ 0x89) + 8) | (((v4[7] ^ 0x89) + 1) &gt;&gt; 5)) == 1517 , ((8 * (v4[8] ^ 0x9A) + 24) | (((v4[8] ^ 0x9A) + 3) &gt;&gt; 5)) == 1421 , ((8 * (v4[9] ^ 0xAB) + 40) | (((v4[9] ^ 0xAB) + 5) &gt;&gt; 5)) == 1782 , ((8 * (v4[10] ^ 0xBC) + 16) | (((v4[10] ^ 0xBC) + 2) &gt;&gt; 5)) == 1774 , ((8 * (v4[11] ^ 0xCD) + 56) | (((v4[11] ^ 0xCD) + 7) &gt;&gt; 5)) == 1413 , ((8 * (v4[12] ^ 0xDE) + 32) | (((v4[12] ^ 0xDE) + 4) &gt;&gt; 5)) == 1566 , ((8 * (v4[13] ^ 0xEF) + 24) | (((v4[13] ^ 0xEF) + 3) &gt;&gt; 5)) == 1790 , ((8 * (v4[14] ^ 0xF0) + 40) | (((v4[14] ^ 0xF0) + 5) &gt;&gt; 5)) == 1445 , ((8 * (v4[15] ^ 1) + 16) | (((v4[15] ^ 1) + 2) &gt;&gt; 5)) == 682 , ((8 * (v4[16] ^ 0x12) + 72) | (((v4[16] ^ 0x12) + 9) &gt;&gt; 5)) == 337 , ((8 * (v4[17] ^ 0x23) + 32) | (((v4[17] ^ 0x23) + 4) &gt;&gt; 5)) == 714 , ((8 * (v4[18] ^ 0x34) + 48) | (((v4[18] ^ 0x34) + 6) &gt;&gt; 5)) == 698 , ((8 * (v4[19] ^ 0x45) + 8) | (((v4[19] ^ 0x45) + 1) &gt;&gt; 5)) == 449 , ((8 * (v4[20] ^ 0x56) + 24) | (((v4[20] ^ 0x56) + 3) &gt;&gt; 5)) == 321 , ((8 * (v4[21] ^ 0x67) + 40) | (((v4[21] ^ 0x67) + 5) &gt;&gt; 5)) == 714 , ((8 * (v4[22] ^ 0x78) + 16) | (((v4[22] ^ 0x78) + 2) &gt;&gt; 5)) == 329 , ((8 * (v4[23] ^ 0x89) + 56) | (((v4[23] ^ 0x89) + 7) &gt;&gt; 5)) == 1566 , ((8 * (v4[24] ^ 0x9A) + 32) | (((v4[24] ^ 0x9A) + 4) &gt;&gt; 5)) == 1855 , ((8 * (v4[25] ^ 0xAB) + 48) | (((v4[25] ^ 0xAB) + 6) &gt;&gt; 5)) == 1638 , ((8 * (v4[26] ^ 0xBC) + 8) | (((v4[26] ^ 0xBC) + 1) &gt;&gt; 5)) == 1790 , ((8 * (v4[27] ^ 0xCD) + 24) | (((v4[27] ^ 0xCD) + 3) &gt;&gt; 5)) == 1325 , ((8 * (v4[28] ^ 0xDE) + 40) | (((v4[28] ^ 0xDE) + 5) &gt;&gt; 5)) == 1469 , ((8 * (v4[29] ^ 0xEF) + 16) | (((v4[29] ^ 0xEF) + 2) &gt;&gt; 5)) == 1092 , ((8 * (v4[30] ^ 0xF0) + 56) | (((v4[30] ^ 0xF0) + 7) &gt;&gt; 5)) == 1236 , ((8 * (v4[31] ^ 1) + 32) | (((v4[31] ^ 1) + 4) &gt;&gt; 5)) == 787 , ((8 * (v4[32] ^ 0x12) + 48) | (((v4[32] ^ 0x12) + 6) &gt;&gt; 5)) == 746 , ((8 * (v4[33] ^ 0x23) + 8) | (((v4[33] ^ 0x23) + 1) &gt;&gt; 5)) == 738 , ((8 * (v4[34] ^ 0x34) + 24) | (((v4[34] ^ 0x34) + 3) &gt;&gt; 5)) == 674 , ((8 * (v4[35] ^ 0x45) + 40) | (((v4[35] ^ 0x45) + 5) &gt;&gt; 5)) == 88 , ((8 * (v4[36] ^ 0x56) + 16) | (((v4[36] ^ 0x56) + 2) &gt;&gt; 5)) == 297 , ((8 * (v4[37] ^ 0x67) + 56) | (((v4[37] ^ 0x67) + 7) &gt;&gt; 5)) == 208 , ((8 * (v4[38] ^ 0x78) + 32) | (((v4[38] ^ 0x78) + 4) &gt;&gt; 5)) == 168 , ((8 * (v4[39] ^ 0x89) + 48) | (((v4[39] ^ 0x89) + 6) &gt;&gt; 5)) == 1895 , ((8 * (v4[40] ^ 0x9A) + 24) | (((v4[40] ^ 0x9A) + 3) &gt;&gt; 5)) == 1983 , ((8 * (v4[41] ^ 0xAB) + 40) | (((v4[41] ^ 0xAB) + 5) &gt;&gt; 5)) == 1999 , ((8 * (v4[42] ^ 0xBC) + 16) | (((v4[42] ^ 0xBC) + 2) &gt;&gt; 5)) == 1911 , ((8 * (v4[43] ^ 0xCD) + 56) | (((v4[43] ^ 0xCD) + 7) &gt;&gt; 5)) == 2088 , ((8 * (v4[44] ^ 0xDE) + 32) | (((v4[44] ^ 0xDE) + 4) &gt;&gt; 5)) == 1389 , ((8 * (v4[45] ^ 0xEF) + 48) | (((v4[45] ^ 0xEF) + 6) &gt;&gt; 5)) == 1156 , ((8 * (v4[46] ^ 0xF0) + 8) | (((v4[46] ^ 0xF0) + 1) &gt;&gt; 5)) == 1052 , ((8 * (v4[47] ^ 1) + 24) | (((v4[47] ^ 1) + 3) &gt;&gt; 5)) == 779 , ((8 * (v4[48] ^ 0x12) + 40) | (((v4[48] ^ 0x12) + 5) &gt;&gt; 5)) == 297 , ((8 * (v4[49] ^ 0x23) + 16) | (((v4[49] ^ 0x23) + 2) &gt;&gt; 5)) == 168 , ((8 * (v4[50] ^ 0x34) + 56) | (((v4[50] ^ 0x34) + 7) &gt;&gt; 5)) == 104 , ((8 * (v4[51] ^ 3) + 40) | (((v4[51] ^ 3) + 5) &gt;&gt; 5)) == 481 , ((8 * (v4[52] ^ 0xBE) + 24) | (((v4[52] ^ 0xBE) + 3) &gt;&gt; 5)) == 1301 , ((8 * (v4[53] ^ 0xFE) + 48) | (((v4[53] ^ 0xFE) + 6) &gt;&gt; 5)) == 1100)ans=[]if x.check() == sat: model = x.model() for i in range(54): ans.append(model[v4[i]].as_long().real)print(&quot;&quot;.join(map(chr,ans)))#UCTF&#123;Pa54rgda3_R3vers3_5ymbolic_ExeCution_P3wer_2024!&#125; ADB利用adb来连接设备和查询联系人信息拿到flag 123adb connect tart.uctf.ir:5554adb shell content query --uri content://contacts/people/#UCTF&#123;M3ym4nd_V1ll4ge&#125; REVNG复现算法爆破随机数 1234567891011121314151617enc=[187, 114, 82, 82, 75, 194, 201, 160, 226, 9, 98, 177, 90, 66, 51, 145, 202, 26, 218, 50, 59, 18, 130, 200, 27, 211, 18, 179, 90, 219, 123, 163, 187, 146, 107, 163, 145, 168, 113, 161, 209, 83, 183, 54, 207, 102]enc=enc[:-4]from tqdm import tqdmfor i in range(len(enc)): enc[i]=((enc[i]&lt;&lt;5)&amp;0xff)|(enc[i]&gt;&gt;3)for k in tqdm(range(0x66DEA80E-1,-1,-1)): a1=[k,0x19660D,0x3C6EF35F,0x0FFFFFFFF] temp=list(range(len(enc))) for i in range(len(enc)): a1[0] = a1[3] &amp; ((a1[2] + ((a1[0] * a1[1])&amp;0xffffffff))&amp;0xffffffff) x=(a1[0]%(len(enc)-i))+i temp[x],temp[i]=temp[i],temp[x] for i in range(len(enc)): temp[i]^=enc[i] get=&quot;&quot;.join(map(chr,temp)) if get.startswith(&quot;UCTF&quot;): print(get) Travel Guidefrida hook contains修改参数，hook codecheck 拿到flag 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748function hook() &#123; Java.perform(function()&#123; var StringClass = Java.use(&#x27;java.lang.String&#x27;); StringClass.contains.overload(&#x27;java.lang.CharSequence&#x27;).implementation = function (cs) &#123; if(cs==&quot;Iran&quot;) return false; var result = this.contains(cs); return result; &#125;; let IranActivity = Java.use(&quot;com.uuctf.travelmanager.IranActivity&quot;); IranActivity[&quot;checkCode&quot;].implementation = function (iArr) &#123; console.log(`IranActivity.checkCode is called: iArr=$&#123;iArr&#125;`); let result = this[&quot;checkCode&quot;](iArr); console.log(`IranActivity.checkCode result=$&#123;result&#125;`); return result; &#125;; IranActivity[&quot;checkCode&quot;].implementation = function (iArr) &#123; console.log(`IranActivity.checkCode is called: iArr=$&#123;iArr&#125;`); let result = this[&quot;checkCode&quot;](iArr); console.log(`IranActivity.checkCode result=$&#123;result&#125;`); return true; &#125;; IranActivity[&quot;getFlag&quot;].implementation = function (str) &#123; console.log(`IranActivity.getFlag is called: str=$&#123;str&#125;`); let result = this[&quot;getFlag&quot;](str); console.log(`IranActivity.getFlag result=$&#123;result&#125;`); return result; &#125;; let c = Java.use(&quot;com.uuctf.travelmanager.c&quot;); c[&quot;a&quot;].implementation = function (iArr) &#123; console.log(`c.a is called: iArr=$&#123;iArr&#125;`); let result = this[&quot;a&quot;]([0,0,1,0,1,1,0]); console.log(`c.a result=$&#123;result&#125;`); return result; &#125;; &#125;)&#125;setImmediate(hook)"},{"title":"第四届“长城杯”网络安全大赛暨京津冀网络安全技能竞赛（初赛）WP","path":"/2024/09/08/第四届“长城杯”网络安全大赛暨京津冀网络安全技能竞赛（初赛）WP/","content":"easyre每一位和下一位异或 12345678data=[ 0x0A, 0x0D, 0x06, 0x1C, 0x1D, 0x05, 0x05, 0x5F, 0x0D, 0x03, 0x04, 0x0A, 0x14, 0x49, 0x05, 0x57, 0x00, 0x1B, 0x19, 0x02, 0x01, 0x54, 0x4E, 0x4C, 0x56, 0x00, 0x51, 0x4B, 0x4F, 0x57, 0x05, 0x54, 0x55, 0x03, 0x53, 0x57, 0x01, 0x03, 0x07, 0x04, 0x4A, 0x77]for i in range(len(data)-1,-1,-1): data[i]^=data[(i+1)%len(data)]print(&quot;&quot;.join(map(chr,data))) flag{fcf94739-da66-467c-a77f-b50d12a67437} tmaze迷宫，应该是个图 找到起点和终点 然后直接idapython递归爆破就行 12345678910111213141516171819from ida_bytes import *start=0x01E140BA1110end=0x01E140BA14D0def crack(addr,path,level,temp): if level&gt;43: return if addr==end: print(&quot;found:&quot;,path) return next=get_qword(addr + 16) if next!=0 and get_byte(addr + 26)!=1 and temp!=next: crack(next,path+&quot;z&quot;,level+1,addr) next = get_qword(addr + 8) if next!=0 and get_byte(addr + 25)!=1 and temp!=next: crack(next,path+&quot;y&quot;,level+1,addr) next = get_qword(addr) if next != 0 and get_byte(addr + 24) != 1 and temp!=next: crack(next, path + &quot;x&quot;, level + 1,addr)crack(start,&quot;&quot;,0,0) flag{4bb5dac3-c578-66a2-d97a-664be7965820}"},{"title":"羊城杯 WP","path":"/2024/08/28/羊城杯-WP/","content":"sedRust_happyVmrust vm逆向 vm看麻了，一层套一层的，最后还没看懂，但是发现可以利用测信道逐3位爆破出来 这里是个base加密，3对4的映射 然后就是这里，会依次对上面base加密后的两位进行校验，最后会生成一个校验位放在rsp+0C88h+var_7EC 也就是 0x65f50c处 每次调用 sub_40ABA0后就会生成一个校验位加到0x65f50c上去，而最后要求总的校验位为0，所以每一次调用 sub_40ABA0 后校验位都必须为0 在第二个校验块的地方，直接在这jmp到后面总的比较的地方，这样就只会校验3个字符的输入，如果正确就会输出相应的提示字符，使用subprocess进行爆破 轻松爆出 然后将得到的字符加上去，然后改成再第四个校验块jmp到总校验，爆破下三个字符，依次类推，拿到flag 123456789101112131415161718import subprocessprintable=&quot;0123456789abcdef&quot;from itertools import *from tqdm import tqdmexecutable_path = &quot;80F96BE110F9736464C5328CA22409E1570993AEFAB84BB3F326DF8B2A631027.exe&quot; # 替换为您的可执行文件的路径for i in tqdm(product(printable,repeat=2)): try_data =&quot;DASCTF&#123;&quot;+(&quot;c669733af3ce4459b88016420b81cb&quot;+&quot;&quot;.join(list(i))).ljust(32,&quot;0&quot;)+&quot;&#125;&quot; process = subprocess.Popen(executable_path, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) input_bytes = try_data.encode(&#x27;utf-8&#x27;) # 将输入数据转换为字节 process.stdin.write(input_bytes) process.stdin.flush() # 刷新输入缓冲区 # 获取输出 output, error = process.communicate() s = output.decode(&#x27;gbk&#x27;) if &quot;You Get FLAG!&quot; in s: print(try_data) print(s) exit() DASCTF{c669733af3ce4459b88016420b81cb15} picgo逆向，go_parser恢复符号 代码审计，不难发现是魔改rc4，复现算法根据png头直接爆破出密钥0173d 输入密钥拿到flag 1234567891011121314151617181920212223242526272829303132from tqdm import tqdmfrom itertools import *target=[137, 80, 78, 71]printable=&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;def rc4decrypt(c,key): s=[] t=[] for i in range(256): s.append(i) for i in range(256): t.append(ord(key[i%len(key)])) j=0 for i in range(256): j=(j+s[i]+t[i])%256 s[i],s[j]=s[j],s[i] i=0 j=0 flag=[] for k in range(len(c)): i=(i+1)%256 j=(j+s[i])%256 s[i], s[j] = s[j], s[i] x=(s[i]+s[j])%256 flag.append(c[k]^s[x]^ord(key[1])^17) return flagfor i in tqdm(product(printable,repeat=5)): data = [0x85,0x43,0x72,0x78] key=&quot;&quot;.join(list(i)) flag=rc4decrypt(data,key) if flag==[137, 80, 78, 71]: print(key) exit() 你这主函数保真吗直接在输入处打硬件断点 运行发现了rot13加密和DCT 12345678910111213141516from scipy.fftpack import idct# 定义数据数组data = [513.355, -37.7986, 8.7316, -10.7832, -1.3097, -20.5779, 6.98641, -29.2989, 15.9422, 21.4138, 29.4754, -2.77161, -6.58794, -4.22332, -7.20771, 8.83506, -4.38138, -19.3898, 18.3453, 6.88259, -14.7652, 14.6102, 24.7414, -11.6222, -9.754759999999999, 12.2424, 13.4343, -34.9307, -35.735, -20.0848, 39.689, 21.879, 26.8296 ]# 计算逆离散余弦变换inverse_dct = idct(data, norm=&#x27;ortho&#x27;)# 打印结果for i in inverse_dct: print(chr(round(i)),end=&quot;&quot;)#QNFPGS&#123;Ju0_1f_Zn1a_@aq_ShaaL_Qpg&#125; DASCTF{Wh0_1s_Ma1n_@nd_FunnY_Dct} dosCrackvba逆向，使用ole_vba拿到源码 https://github.com/decalage2/oletools/wiki/olevba 1olevba protected_secret.docm &gt; log.txt 先是一个简单的异或 然后使用certutil -decode temp1 temp|certutil -decode temp temp.exe解密出一个exe 将xpkdb变量的值存入temp1，然后执行命令得到exe 分析exe，只有一个左移操作 直接解密得到flag 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859v9=54*[0]v9[0] = 4288v9[1] = 4480v9[2] = 5376v9[3] = 4352v9[4] = 5312v9[5] = 4160v9[6] = 7936v9[7] = 5184v9[8] = 6464v9[9] = 6528v9[10] = 5632v9[11] = 3456v9[12] = 7424v9[13] = 5632v9[14] = 6336v9[15] = 6528v9[16] = 6720v9[17] = 6144v9[18] = 6272v9[19] = 7488v9[20] = 6656v9[21] = 7296v9[22] = 7424v9[23] = 2432v9[24] = 2432v9[25] = 2432v9[26] = 5632v9[27] = 4416v9[28] = 3456v9[29] = 7168v9[30] = 6528v9[31] = 7488v9[32] = 6272v9[33] = 5632v9[34] = 3520v9[35] = 6208v9[36] = 5632v9[37] = 4736v9[38] = 6528v9[39] = 6400v9[40] = 7488v9[41] = 3520v9[42] = 5632v9[43] = 5184v9[44] = 3456v9[45] = 7488v9[46] = 7296v9[47] = 3200v9[48] = 6272v9[49] = 7424v9[50] = 2432v9[51] = 2432v9[52] = 2432v9[53] = 7808for i in range(len(v9)): v9[i]&gt;&gt;=6 v9[i]^=7print(&quot;&quot;.join(map(chr,v9))) DASCTF{Vba_1s_dangerous!!!_B1ware_0f_Macr0_V1ru5es!!!}"},{"title":"NepCTF2024 WP","path":"/2024/08/26/NepCTF2024-WP/","content":"OezAndroid点击次数对应s盒混淆次数，直接爆破 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main() &#123; char key[] = &quot;bangboo!Knows!!!&quot;; int s[256], t[256]; int i, j, temp,tempj; for (i = 0; i &lt; 256; i++) &#123; s[i] = i; &#125; for (i = 0; i &lt; 256; i++) &#123; t[i] = key[i % strlen(key)]; &#125; j=0; tempj = 0; for (unsigned int _ = 1; _ &lt; 0xffffffff; _++) &#123; for (i = 0; i &lt; 256; i++) &#123; tempj = (tempj + s[i] + t[i]) % 256; temp = s[i]; s[i] = s[tempj]; s[tempj] = temp; &#125; i = 0; j = 0; int array[10]; int trys[256]; for (int m = 0; m &lt; 256; m++) &#123; trys[m] = s[m]; &#125; for (int k = 0; k &lt; 10; k++) &#123; i = (i + 1) % 256; j = (j + trys[i]) % 256; temp = trys[i]; trys[i] = trys[j]; trys[j] = temp; int x = (trys[i] + trys[j]) % 256; array[k] = trys[x]; &#125; if (array[2] == 126 &amp;&amp; array[3] == 33 &amp;&amp; array[4] == 181 &amp;&amp; array[5] == 112 &amp;&amp; array[6] == 168 &amp;&amp; array[7] == 113 &amp;&amp; array[8] == 56 &amp;&amp; array[9] == 109) &#123; printf(&quot;%u &quot;, _); exit(0); &#125; &#125; return 0;&#125; 爆出来count为10714 这里有个这玩意，会导致点击就闪退，拿出mt管理器给他删了就行 然后frida hook encrypt，将传入的参数改成10714，点击确认就能拿到flag 12345678910111213141516function hook()&#123; Java.perform(function()&#123; let MainActivity = Java.use(&quot;com.example.clickmemore.MainActivity&quot;); MainActivity[&quot;encrypt&quot;].implementation = function (i, str) &#123; console.log(`MainActivity.encrypt is called: i=$&#123;i&#125;, str=$&#123;str&#125;`); let result = this[&quot;encrypt&quot;](10714, str); console.log(`MainActivity.encrypt result=$&#123;result&#125;`); return result; &#125;; &#125;)&#125;setImmediate(hook); ezAndroid主要逻辑在so层，去个花 复现出算法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566from ctypes import *test=&quot;01100101011101100110111101101100&quot;v6=len(test)-1v5=c_uint32(0)for i in range(0xffff): v7=v6 if test[v6]==&quot;1&quot;: v8=len(test) v5.value+=(2**(v8+~v7)) v6=v7-1 if v7-1&lt;0: breakprint(hex(v5.value))v8=v5.valuerds=[0x72478f2c,0x10cd1d5c,0x58c3772b,0x59dad8ac,0x3d39678e,0x3d92e10e]v9=0v10=0v11=0xfffffffardIdx=0c=0xE4BE1307while(1): v12=v11+v9 v13=rds[rdIdx] rdIdx+=1 v14=v13+0x1f if v13&gt;&gt;31==0: v14=v13 v15=(v13-(v14&amp;0xe0))&amp;0xff if (v9&amp;1)!=0: if (v15&amp;1)!=0: v17=(v10&lt;&lt;v15)&amp;0xffffffff print(&quot;v17=(v10&lt;&lt;&#123;&#125;)&amp;0xffffffff&quot;.format(v15)) else: v17=v10&gt;&gt;v15 print(&quot;v17=v10&gt;&gt;&#123;&#125;&quot;.format(v15)) v8=v17^v10 print(&quot;v8=v17^v10&quot;) v7=v17^v10 if v12==0xffffffff: exit() else: if (v15&amp;1)!=0: v16=(v8&lt;&lt;v15)&amp;0xffffffff print(&quot;v16=(v8&lt;&lt;&#123;&#125;)&amp;0xffffffff&quot;.format(v15)) else: v16=v8&gt;&gt;v15 print(&quot;v16=v8&gt;&gt;&#123;&#125;&quot;.format(v15)) v10=v16^v8 print(&quot;v10=v16^v8&quot;) v7=v16^v8 if v12 == 0xffffffff: exit() v9 += 1v16=v8&gt;&gt;12v10=v16^v8v17=v10&gt;&gt;28v8=v17^v10v16=(v8&lt;&lt;11)&amp;0xffffffffv10=v16^v8v17=v10&gt;&gt;12v8=v17^v10v16=v8&gt;&gt;14v10=v16^v8v17=v10&gt;&gt;14v8=v17^v10 然后z3求解就行 1234567891011121314151617from z3 import *v8=BitVec(&quot;v8&quot;,33)v16=v8&gt;&gt;12v10=v16^v8v17=v10&gt;&gt;28v8=v17^v10v16=(v8&lt;&lt;11)&amp;0xffffffffv10=v16^v8v17=v10&gt;&gt;12v8=v17^v10v16=v8&gt;&gt;14v10=v16^v8v17=v10&gt;&gt;14v8=v17^v10solve(v8==0xE4BE1307)print(bin(1702260588)[2:].rjust(32,&quot;0&quot;))#01100101011101100110111101101100 easyobf不会去混淆，只能硬撕汇编 跟到这开始加密了 开始抄汇编 1234567891011121314151617181920212223242526272829303132333435363738394041test=ord(j)test+=4eax=testedx=testedx^=0xFFFFFFFFeax&amp;=0x77A6670Cedx&amp;=0x885998F3eax^=0xFFFFFFFFedx^=0xFFFFFFFFedx&amp;=eaxedx^=0xFFFFFFFFeax=0x35+iesi=0x35+ieax^=0x0FFFFFFFFesi&amp;=0x78899A41eax&amp;=0x877665BEesi^=0x0FFFFFFFFeax^=0x0FFFFFFFFeax&amp;=esieax^=0x0FFFFFFFFesi=edxesi^=0x0FFFFFFFFedi=eaxedi^=0x0FFFFFFFFedx&amp;=edieax&amp;=esiedx^=0x0FFFFFFFFeax^=0x0FFFFFFFFeax&amp;=edxeax^=0x0FFFFFFFFedx=eaxedx^=0x0FFFFFFFFedx&amp;=0x0F2FFD4Deax&amp;=0x0F0D002B2edx^=0x0FFFFFFFFeax^=0x0FFFFFFFFeax&amp;=edxeax^=0xffffffff 在这拿到密文 发现爆破出来答案不对，猜了一下发现差了个^i，应该是有反调试我没跟到吧，汗流浃背了 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950from string import printableenc=[0xffffff98,0xffffffa1,0xffffffbe,0xffffff83,0xffffff9a,0xffffff8a,0xffffffbd,0xffffffb7,0xffffffba,0xffffffb8,0xffffffb0,0xffffffc5,0xffffffd1,0xffffffdd,0xffffffc5,0xffffffd7,0xffffffcf,0xffffffcb,0xffffffc1,0xffffffd7,0xffffffd1,0xffffffc8,0xffffffc1,0xffffffdf,0xffffffcf,0xffffffd5,0xffffffc9,0xffffffcc,0xffffffc1,0xffffffd3,0xffffffda,0xffffffc7,0xffffffe9,0xfffffffb,0xffffffec,0xffffffee,0xfffffffb,0xfffffff7,0xffffffe5,0xffffffe1,0xfffffff2,0xffffffe5,0xfffffff9,0xffffffc6,0xffffff33,0xffffff00,0xffffff00,0xffffff00,0xffffff0b,0xffffff76,0xffffff25,0xffffff1c,0xffffff87,0xffffff59,0xffffff0f,0xffffff77,0xffffff6e,0xffffff43,0xffffffeb,0xffffff45,0xffffffce,0xffffff72,0xffffff48,0xffffffe2]enc=[(enc[i]^0xffffffff)^i for i in range(len(enc))]for i in range(len(enc)): for j in printable: test=ord(j) test+=4 eax=test edx=test edx^=0xFFFFFFFF eax&amp;=0x77A6670C edx&amp;=0x885998F3 eax^=0xFFFFFFFF edx^=0xFFFFFFFF edx&amp;=eax edx^=0xFFFFFFFF eax=0x35+i esi=0x35+i eax^=0x0FFFFFFFF esi&amp;=0x78899A41 eax&amp;=0x877665BE esi^=0x0FFFFFFFF eax^=0x0FFFFFFFF eax&amp;=esi eax^=0x0FFFFFFFF esi=edx esi^=0x0FFFFFFFF edi=eax edi^=0x0FFFFFFFF edx&amp;=edi eax&amp;=esi edx^=0x0FFFFFFFF eax^=0x0FFFFFFFF eax&amp;=edx eax^=0x0FFFFFFFF edx=eax edx^=0x0FFFFFFFF edx&amp;=0x0F2FFD4D eax&amp;=0x0F0D002B2 edx^=0x0FFFFFFFF eax^=0x0FFFFFFFF eax&amp;=edx eax^=0xffffffff if eax==enc[i]: print(j,end=&quot;&quot;)#NepCTF&#123;ollvm_is_a_good_way_to_do_obfuscation&#125; Super Neuro : Escape from Flame!玩一玩，发现能贴墙飞（贴着墙，一直按方向键，然后连点空格），但是经常有障碍物给我卡着 Il2CppDumper后看看函数，这个应该就是生成那些平台的 直接ida给他ret了，然后平台就没了，然后就可以贴墙起飞了"},{"title":"ISG WP","path":"/2024/08/19/ISG-WP/","content":"shell爆破就完了 12345678910111213141516171819202122232425262728from pwn import *from string import printablep=process(&quot;encsh&quot;)p.recvuntil(&quot;&gt;&quot;)p.sendline(&quot;key&quot;)p.sendline(&quot;mykeymykeyhackergoawayyourkeyyou&quot;)flag=&quot;&quot;tryflag=&quot;&quot;idx=0enc=[227, 83, 162, 17, 197, 102, 127, 119, 94, 208, 82, 187, 221, 191, 112, 186, 0, 170, 191, 44, 233, 242, 209, 114, 70, 116, 203, 80, 72, 65, 254, 111, 119, 146, 95, 180, 182, 77, 140, 110, 204, 249, 76, 34, 229, 39, 30, 12, 248, 89, 158, 103, 170]for _ in range(0xff): if tryflag.endswith(&quot;&#125;&quot;): p.close() exit() for j in printable: p.recvuntil(&quot;&gt;&quot;) p.sendline(&quot;enc&quot;) tryflag=flag+j p.sendline(tryflag) out=eval(p.recvline().decode().strip()) if out[idx]==enc[idx]: for i in range(idx,len(enc)): if out[i]!=enc[i]: idx=i break flag=tryflag print(flag) break"},{"title":"极客巅峰 WP","path":"/2024/08/17/极客巅峰-WP/","content":"babyre三位三位加密，而且重叠 先进行sha256，然后异或，异或的值为原来的3位字符 所以直接爆破 得到-48-79-80-bf0bd17719429f37-39a4-748f4a37-472977279380b8a}8fb93794a9a49f8a-8a39a4-ag{b-bbd1bfed17ea-f8afb-feaflag{1lag{19 因为有重叠而且打乱了顺序，这里直接投机，把得到的字符串3个3个的划分，开头肯定是fla，因为有重叠，找到开头为la(lag)的字符，然后把g拼上去，再找ag开头的字符，以此类推，递归爆破 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160import hashlibfrom itertools import productfrom string import printablefrom tqdm import tqdmdic = &#123;&#125;for i in tqdm(product(printable,repeat=3)): key=&quot;&quot;.join(list(i)) data = list(bytes.fromhex(hashlib.sha256(key.encode(&#x27;utf-8&#x27;)).hexdigest() )) akey = list(map(ord, key)) for _ in range(len(data)): data[_] ^= akey[_ % 3] dic[bytes(data)]=keyenc=[ 0xEB, 0x74, 0x46, 0x4F, 0x79, 0x24, 0xC5, 0x62, 0x10, 0xCB, 0xFF, 0xC5, 0xA2, 0x39, 0xBE, 0x03, 0x99, 0xED, 0x2C, 0x8F, 0xB9, 0x54, 0x2B, 0xA7, 0xC5, 0x8A, 0x7E, 0x56, 0x0F, 0x35, 0x2C, 0xA0, 0x3E, 0xE5, 0xE0, 0x0A, 0x6E, 0xA9, 0x38, 0xCF, 0x85, 0xF8, 0x82, 0xC7, 0x99, 0xD7, 0x8B, 0xC6, 0x82, 0x22, 0x54, 0x28, 0xF4, 0xE5, 0x56, 0xD0, 0x47, 0xF1, 0x5E, 0x57, 0x66, 0x85, 0x5C, 0x04, 0x66, 0x0D, 0xC7, 0x21, 0x81, 0x95, 0x4C, 0xF9, 0x97, 0x6E, 0x57, 0x05, 0xCB, 0xAA, 0x48, 0x3D, 0x2A, 0xAB, 0x5A, 0x69, 0x28, 0x3D, 0x68, 0xE4, 0xF7, 0x4C, 0x23, 0xCF, 0xA8, 0xC2, 0x26, 0xD0, 0xF9, 0x41, 0xE7, 0xF4, 0xFF, 0x99, 0x60, 0xF1, 0xDA, 0x67, 0x7E, 0x9D, 0xBF, 0x98, 0x14, 0xB5, 0xB3, 0xE2, 0xD7, 0x99, 0x07, 0x4A, 0xC0, 0x12, 0x0F, 0x21, 0x2F, 0x3A, 0x52, 0xC3, 0x7F, 0xE3, 0x35, 0xD5, 0x6D, 0xB4, 0xBD, 0x21, 0x46, 0x00, 0x04, 0x9F, 0x7F, 0x95, 0x0C, 0x01, 0xFA, 0xBD, 0x86, 0x25, 0x06, 0x56, 0x07, 0x30, 0x4F, 0x17, 0xAE, 0xF3, 0xC0, 0xF0, 0x17, 0x7F, 0x9B, 0x3E, 0xBD, 0xE5, 0x66, 0x33, 0x46, 0x60, 0x6C, 0xB3, 0x07, 0xF1, 0x64, 0x5F, 0x00, 0x6D, 0xB0, 0x88, 0xF3, 0x4F, 0x7D, 0x44, 0xBE, 0x95, 0x43, 0xA1, 0x39, 0x3B, 0x29, 0x50, 0x6D, 0x1D, 0x31, 0x81, 0x44, 0x60, 0xFE, 0x7B, 0xAC, 0x48, 0xBD, 0xBB, 0x8E, 0x35, 0x41, 0x28, 0xE7, 0x53, 0x5C, 0xE7, 0x3B, 0x16, 0x18, 0xC5, 0x94, 0xD9, 0xD1, 0xB9, 0xBF, 0x71, 0x48, 0xA7, 0xD7, 0x70, 0x77, 0xE9, 0xA7, 0xFF, 0xA0, 0xBE, 0x1C, 0xFA, 0x98, 0x00, 0xFE, 0x33, 0x64, 0xF9, 0xE7, 0x30, 0x45, 0x57, 0x97, 0x40, 0x45, 0xE0, 0xC9, 0x50, 0xB8, 0xF3, 0x44, 0x44, 0x32, 0xC1, 0x6A, 0xB7, 0xDD, 0xEE, 0x37, 0x1F, 0x60, 0x26, 0xFA, 0x2D, 0x6F, 0xC1, 0x43, 0x59, 0x8A, 0x9E, 0xE9, 0xE1, 0x27, 0x36, 0xEA, 0xBD, 0x51, 0x5B, 0xAE, 0x24, 0xBB, 0x03, 0xE4, 0xC0, 0x62, 0xDD, 0xC2, 0x63, 0xF4, 0xA1, 0x8C, 0x3E, 0x5C, 0x10, 0xA4, 0xCC, 0x88, 0xE1, 0x9B, 0x04, 0x59, 0x2B, 0x86, 0x4A, 0xC8, 0x83, 0xD8, 0xB9, 0x94, 0xEE, 0xB2, 0xC4, 0x64, 0x96, 0xB3, 0x41, 0x6B, 0x00, 0x0C, 0x9A, 0x34, 0x4A, 0x4F, 0x3C, 0xF2, 0xC3, 0x0D, 0xA6, 0xDD, 0x57, 0xB7, 0xD3, 0x70, 0x1C, 0xDC, 0xB9, 0x41, 0x8E, 0xAE, 0x8A, 0x04, 0x70, 0xC2, 0xAD, 0x26, 0x68, 0xEC, 0xF0, 0xE3, 0xAE, 0x6B, 0x6A, 0x29, 0xF6, 0xAE, 0x3C, 0x23, 0xE3, 0x0F, 0x42, 0x57, 0x1D, 0xFC, 0x50, 0x71, 0x71, 0xD1, 0x73, 0xF9, 0x28, 0x71, 0x8E, 0x2A, 0x5D, 0x18, 0xC4, 0x3F, 0x7A, 0x5B, 0x20, 0xE1, 0x25, 0xA6, 0x42, 0x1E, 0xFB, 0xEF, 0xA5, 0x03, 0x4B, 0xF4, 0x4B, 0x5E, 0x66, 0xEF, 0x90, 0x12, 0x4E, 0xE2, 0xCF, 0xFD, 0x9A, 0xAC, 0xE7, 0xC4, 0x93, 0x56, 0xA6, 0x4A, 0xDF, 0xFB, 0xA0, 0xD4, 0x4D, 0x29, 0xB1, 0x25, 0xAB, 0x8E, 0x98, 0x38, 0x6E, 0xD9, 0x11, 0x29, 0xB0, 0x19, 0x7A, 0xE9, 0xA6, 0x42, 0xC1, 0x73, 0x57, 0x8E, 0xFD, 0x47, 0x84, 0xD1, 0xEE, 0x08, 0x7C, 0xE7, 0x65, 0xA7, 0x14, 0x64, 0x0F, 0x9A, 0xA8, 0x67, 0xA4, 0xAD, 0x87, 0x92, 0x29, 0xF1, 0x71, 0x20, 0x37, 0xD5, 0x22, 0xB5, 0x22, 0x6B, 0x2D, 0xC7, 0x44, 0x0E, 0xFC, 0xB7, 0x53, 0xEC, 0x8A, 0x52, 0xC2, 0x9C, 0xF1, 0xFB, 0x9B, 0xD8, 0x5F, 0xA6, 0x5F, 0xDA, 0x70, 0xB1, 0x26, 0x1E, 0x14, 0x3F, 0x94, 0x06, 0xD0, 0x0D, 0x90, 0xAA, 0x0F, 0x55, 0x31, 0x06, 0x52, 0xF3, 0xF9, 0x08, 0xD7, 0xC1, 0xE5, 0xA8, 0x41, 0xF7, 0x7E, 0xBD, 0x30, 0x14, 0xFC, 0xA2, 0x3C, 0xB2, 0x23, 0xF8, 0x91, 0x5D, 0x77, 0x30, 0xAF, 0xC7, 0x27, 0x6F, 0x1C, 0x0F, 0xC7, 0xEA, 0x33, 0xA3, 0x08, 0x35, 0x53, 0xD2, 0x68, 0x4D, 0x96, 0x4E, 0xC7, 0xE4, 0xA9, 0x20, 0x5D, 0xEE, 0x6F, 0xCF, 0xEA, 0xDA, 0x8B, 0x58, 0x9C, 0xF4, 0x83, 0x26, 0xAF, 0x2D, 0xEB, 0xF5, 0x6D, 0xB4, 0x2A, 0x4D, 0xFD, 0xF7, 0x4B, 0xF9, 0xCB, 0x0A, 0x34, 0xBF, 0xD9, 0x7B, 0x90, 0xB8, 0x3E, 0x17, 0xE3, 0x1F, 0xE0, 0xA4, 0x8B, 0x54, 0xC9, 0x4A, 0xC4, 0x17, 0x5B, 0x46, 0x30, 0x2D, 0x5E, 0x8B, 0x38, 0xD7, 0xCB, 0x42, 0xE6, 0x18, 0xAE, 0xC9, 0x19, 0x7D, 0x43, 0xB1, 0xB3, 0x68, 0x91, 0xA1, 0x8C, 0xDC, 0x5C, 0xA5, 0x7F, 0x20, 0x28, 0x41, 0x87, 0xFE, 0x69, 0x88, 0xD8, 0x60, 0xED, 0x46, 0x07, 0x6F, 0x77, 0x9B, 0x08, 0x8D, 0x2F, 0xA7, 0x8A, 0x79, 0x8A, 0x55, 0xDC, 0xC6, 0xE6, 0x57, 0xE8, 0xB1, 0x01, 0xA2, 0x3B, 0x9F, 0x8A, 0xDE, 0x02, 0xF6, 0x96, 0xD9, 0x05, 0xF6, 0x3C, 0x62, 0x6C, 0x3E, 0x07, 0xFD, 0x06, 0x00, 0x2B, 0x20, 0x30, 0xB2, 0x0F, 0xAF, 0xF0, 0x26, 0x25, 0xD9, 0xB8, 0x75, 0xA4, 0xB7, 0x4D, 0xD4, 0x21, 0xCC, 0xB5, 0x41, 0x1C, 0xC3, 0x09, 0xEB, 0xE7, 0xCC, 0x75, 0xBE, 0xD4, 0x08, 0xF9, 0xF4, 0x86, 0xE6, 0xCF, 0xFF, 0x4F, 0x14, 0xAC, 0x36, 0xDF, 0xFB, 0x64, 0x3C, 0x27, 0x21, 0xA3, 0xAD, 0x4C, 0xA9, 0x54, 0x15, 0xD5, 0x9C, 0xF3, 0xC3, 0xEE, 0x85, 0xFF, 0x75, 0xF2, 0xBC, 0x6F, 0xFD, 0x1F, 0xC0, 0x94, 0x99, 0x54, 0x4B, 0x72, 0x18, 0xF5, 0x93, 0x7E, 0x8B, 0x73, 0xC7, 0x76, 0x4D, 0xEB, 0xC8, 0x40, 0x26, 0x6B, 0x14, 0xF3, 0xD0, 0x49, 0xAE, 0x95, 0x11, 0xAB, 0x13, 0x5C, 0xC7, 0x64, 0xC5, 0xC6, 0xF1, 0x0C, 0x87, 0xC0, 0x87, 0xBC, 0x8D, 0x31, 0x81, 0xD7, 0x47, 0x06, 0x30, 0xD4, 0xA9, 0x83, 0xFE, 0x40, 0x1F, 0x46, 0xC9, 0x9F, 0x4A, 0x52, 0xD8, 0x1E, 0x8D, 0x41, 0x46, 0x21, 0x1B, 0xFA, 0x28, 0xAE, 0x52, 0xC9, 0xD0, 0xE3, 0x97, 0x4A, 0xFB, 0x2D, 0x83, 0x0F, 0x44, 0x31, 0x36, 0xF4, 0x46, 0x4D, 0xDF, 0xEF, 0xA3, 0x06, 0x88, 0xBE, 0x27, 0xA8, 0xA0, 0x15, 0x8A, 0x85, 0xB8, 0x04, 0x0C, 0x2C, 0x04, 0x59, 0x8F, 0x21, 0x11, 0x75, 0x1D, 0x29, 0x6F, 0x86, 0x2F, 0xFE, 0xBC, 0x2F, 0xB5, 0x0D, 0x65, 0x30, 0xFE, 0x6C, 0x09, 0xD7, 0x0F, 0x54, 0x66, 0x4E, 0xD2, 0xF2, 0xC4, 0x43, 0x65, 0xD6, 0x47, 0xB3, 0xE6, 0xD5, 0xBB, 0x45, 0x70, 0x7C, 0x8B, 0x18, 0xC8, 0xA2, 0x48, 0xB1, 0x53, 0x30, 0x96, 0x05, 0xB3, 0x4E, 0xD9, 0xCE, 0xF4, 0x21, 0x72, 0x11, 0x4F, 0x52, 0xAE, 0x47, 0xE8, 0x06, 0x31, 0x31, 0xEF, 0xB2, 0xF1, 0xAD, 0x55, 0x86, 0x8D, 0x64, 0x87, 0x22, 0x11, 0x1B, 0x00, 0xCF, 0xE2, 0x13, 0x24, 0x63, 0xF9, 0x65, 0x9A, 0xA1, 0xF8, 0x29, 0x8E, 0xD2, 0xFB, 0xD1, 0x23, 0x90, 0x71, 0xDC, 0x3A, 0xCF, 0x63, 0x66, 0x1C, 0x77, 0xA5, 0xAC, 0xBB, 0x54, 0x41, 0x0F, 0xF3, 0xF7, 0xCF, 0xA1, 0x70, 0x10, 0x40, 0xBD, 0x2D, 0x2C, 0x8F, 0x72, 0x1A, 0x37, 0xE3, 0x10, 0xA8, 0x46, 0x05, 0x84, 0x5E, 0x72, 0x02, 0xDB, 0x02, 0x1B, 0x23, 0x46, 0xA1, 0xBB, 0x92, 0x0A, 0xE8, 0x0D, 0xD0, 0x06, 0x6F, 0x05, 0xA0, 0x52, 0x4B, 0xC8, 0x03, 0x39, 0xED, 0x99, 0x32, 0x54, 0x28, 0x83, 0x47, 0x3F, 0xEF, 0xCA, 0x18, 0xC1, 0xC8, 0xB8, 0xC9, 0xB0, 0xE3, 0x1B, 0x71, 0x69, 0xBA, 0xC1, 0xF1, 0xB9, 0x69, 0x7B, 0x27, 0x99, 0xBD, 0xB8, 0x69, 0x00, 0x6C, 0x16, 0xC4, 0x9B, 0x77, 0x52, 0x5A, 0xB7, 0x54, 0x6F, 0xE3, 0x34, 0x5E, 0x5F, 0x01, 0xA5, 0xE2, 0x48, 0xFB, 0x96, 0x6B, 0x75, 0x92, 0xD2, 0xA0, 0xDA, 0x0B, 0xED, 0x3E, 0x27, 0xF6, 0xC7, 0x89, 0x64, 0x7F, 0xDE, 0x73, 0xF5, 0x92, 0x58, 0xFF, 0xC6, 0xA6, 0x38, 0x75, 0x86, 0x61, 0x12, 0x6F, 0xC0, 0x3D, 0x24, 0x22, 0x6D, 0xA7, 0x29, 0x5E, 0xBD, 0xF5, 0x0C, 0x52, 0xD9, 0x66, 0x31, 0xB5, 0x80, 0x4D, 0x02, 0xCD, 0xF2, 0xDC, 0x89, 0xFA, 0x60, 0x63, 0xCA, 0x2D, 0x00, 0x95, 0x32, 0x00, 0xBE, 0xD4, 0xBF, 0x73, 0x4C, 0xED, 0xBA, 0x0C, 0x56, 0xA1, 0x85, 0xC4, 0x6C, 0xB6, 0x0A, 0xBC, 0xDD, 0x8C, 0x61, 0x1E, 0x42, 0x03, 0xB4, 0xE0, 0xF2, 0x17, 0xFA, 0x14, 0x38, 0x9F, 0xB1, 0xA4, 0x9C, 0x03, 0x18, 0x0C, 0xC6, 0x16, 0xC7, 0x30, 0xFA, 0x48, 0xB1, 0xB9, 0x6E, 0xB1, 0x7D, 0x7B, 0x3B, 0xDF, 0xD9, 0xB6, 0xA7, 0xD6, 0x46, 0xA5, 0x7C, 0x97, 0x6D, 0xD5, 0x92, 0xA3, 0xF0, 0x22, 0xA1, 0x53, 0x99, 0xA1, 0xC3, 0x71, 0x40, 0xE1, 0x89, 0x7B, 0x23, 0x19, 0x18, 0xDC, 0x2F, 0x22, 0x57, 0xDD, 0x2C, 0xC3, 0x3F, 0xAD, 0xEF, 0x99, 0x93, 0x9C, 0xE9, 0xEB, 0x67, 0x66, 0x74, 0x45, 0x8E, 0xD4, 0x87, 0x98, 0x4E, 0x9F, 0x8D, 0x2C, 0x7D, 0xF2, 0x3D, 0x80, 0x93, 0x94, 0x0F, 0xEA, 0xB5, 0x86, 0xD0, 0xE6, 0x74, 0xB6, 0xB2, 0x41, 0x61, 0x25, 0xDE, 0xD9, 0xC2, 0x38, 0x6A, 0x24, 0x7F, 0x1D, 0x87, 0xBA, 0xD1, 0xCA, 0xB6, 0x40, 0x57, 0x9E, 0xAE, 0x30, 0x50, 0xFF, 0xD0, 0xA8, 0xAE, 0xDF, 0x52, 0x25, 0x4A, 0xA5, 0xE9, 0x18, 0x6F, 0x06, 0x0C, 0x97, 0x15, 0x0E, 0xC2, 0x66, 0x26, 0xCC, 0x84, 0x51, 0xC4, 0x75, 0x69, 0x76, 0x4B, 0x28, 0x16, 0x67, 0xA5, 0x44, 0x28, 0xE0, 0x96, 0xA2, 0x0A, 0x5D, 0x81, 0xEB, 0x4D]for i in range(0,len(enc),32): print(dic[bytes(enc[i:i+32])],end=&quot;&quot;)print()flag=&#x27;&#x27;&#x27;-48-79-80-bf0bd17719429f37-39a4-748f4a37-472977279380b8a&#125;8fb93794a9a49f8a-8a39a4-ag&#123;b-bbd1bfed17ea-f8afb-feaflag&#123;1lag&#123;19&#x27;&#x27;&#x27;flags=[flag[i:i+3] for i in range(0,len(flag),3)]def crack(flag, level): get = flag[-2:] if flag.endswith(&quot;&#125;&quot;): print(flag) exit() for i in flags: if i.startswith(get): flag += i[-1] crack(flag, level + 1)crack(&quot;fla&quot;, 0)#flag&#123;194a39a4-7937-48fb-bfea-80bd17729f8a&#125;"},{"title":"LITCTF WP","path":"/2024/08/14/LITCTF-WP/","content":"forgotten messageida打开就有 Burger Reviewer源码都给了，纯解密 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849data=[0]*42data[13]=ord(&quot;_&quot;)data[17]=95data[19]=ord(&quot;_&quot;)data[26]=190-data[19]data[29]=ord(&quot;_&quot;)data[34]=95data[39]=ord(&quot;_&quot;)m = 41meat=[ord(i) for i in [&#x27;n&#x27;, &#x27;w&#x27;, &#x27;y&#x27;, &#x27;h&#x27;, &#x27;t&#x27;, &#x27;f&#x27;, &#x27;i&#x27;, &#x27;a&#x27;, &#x27;i&#x27;]]dif=[4, 2, 2, 2, 1, 2, 1, 3, 3]for i in range(len(meat)): m-=dif[i] data[m]=meat[i]print(data)sauce=[ord(i) for i in [&#x27;b&#x27;, &#x27;p&#x27;, &#x27;u&#x27;, &#x27;b&#x27;, &#x27;r&#x27;, &#x27;n&#x27;, &#x27;r&#x27;, &#x27;c&#x27;]]a=7b=20veg1=[10, 12, 15, 22, 23, 25, 32, 36, 38, 40]veg=[0]*len(veg1)veg[0]=9veg[1]=5veg[2]=4veg[3]=2veg[4]=veg[3]veg[5] =veg[4]+3veg[7] = 4veg[5]=5veg[6]=3veg[8]=7veg[9]=2for i in range(len(veg1)): data[veg1[i]]=ord(str(veg[i]))data=data[7:]data=data[:-1]index=0for i in range(len(data)): if data[i]==0: print(i)data[0]=sauce[0]data[13]=sauce[1]data[1]=sauce[2]data[11]=sauce[3]data[2]=sauce[4]data[9]=sauce[5]data[4]=sauce[6]data[7]=sauce[7]print(&quot;&quot;.join(map(chr,data)))#bur9r5_c4n_b_pi22a5_if_th3y_w4n7_2 revsite1断在这，点check，就会得到一个正确的字符，手动一个一个拿了拼就行 LITCTF{t0d4y_15_l1t3rally_th3_d4y_b3f0re_the_c0nt3st} revsite2扫一遍内存不难找到存放分数的位置 直接修改会被检测 动调发现这一行都是用来检测的 分析wat代码构造正确的数据过检测就行 123456789101112131415161718192021222324252627282930313233const view = new DataView(wasmMemory.buffer);view.setInt32(0x10320,0xa763ffff,true)view.setInt32(0x00010324,0xde0b6b3,true)view.setInt32(0x10300,0xaebfcd14,true)view.setInt32(0x10304,0xde0b6b3,true)getpoints() //breakpoint at 0x5d9 in wasmview.setInt32(0x10308,0xa7640001,true)view.setInt32(0x1030c,0x536c55c3,true)//breakpoint at 0x616 in wasmview.setInt32(66312,0xa7640001,true)view.setInt32(66316,0x536c55c3,true)view.setInt32(66320,0x93bc0003,true)view.setInt32(66324,0x10fc3d09,true)//前面两组数据的脚本被盖了，不想写了from ctypes import *def suma(a): return a*(a+1)//2def sumaa(a): return a*(a+1)*(2*a+1)//6def sumaaa(a): return (suma(a))**2d66312=c_int64(0x1+3)d66320=c_int64(0x3+8)a=10**18-1d66312.value+=3*sumaa(a)+5*suma(a)+3*ad66320.value+=8*sumaaa(a)+3*sumaa(a)+3*suma(a)+8*aprint(hex(d66312.value&amp;0xffffffffffffffff),hex(d66320.value&amp;0xffffffffffffffff)) hilbert推理证明，第二个证不出来 大佬的证明"},{"title":"TFCCTF WP","path":"/2024/08/06/tfcctf-re-wp/","content":"signal每个Handle函数里的字符拼起来 license1234567891011121314151617181920212223242526from string import printableenc1=list(map(ord,&quot;Xsl3BDxP&quot;))for i in range(8): enc1[i]^=0x33 if i%3==2: enc1[i]+=37 elif i%3==1: enc1[i]-=16 else: enc1[i]^=0x5apayload=bytes(enc1)+b&quot;-&quot;dic=&#123;&#125;for char in printable: if char.islower(): new_char = (ord(char) - 92) % 26 + ord(&#x27;a&#x27;) dic[new_char]=char elif char.isupper(): new_char = (ord(char) - 48) % 26 + ord(&#x27;A&#x27;) dic[new_char] = charfor i in &#x27;mzXaPLzR&#x27;: payload+=dic[ord(i)].encode()print(payload)from pwn import *p=remote(&quot;challs.tfcctf.com&quot;,31541)p.sendline(payload)print(p.recvall()) x8vm，硬跟 发现主要加密逻辑只有一个异或，找到比较处，用idapython写脚本拿flag 1234567891011121314151617181920212223242526272829303132from ida_hexrays import *from ida_dbg import *from idaapi import *from idautils import *from idc import *from ida_kernwin import *&#x27;&#x27;&#x27;自定义调试器钩子类&#x27;&#x27;&#x27;class dbg_hooks_t(ida_dbg.DBG_Hooks): &#x27;&#x27;&#x27;继承自父类DBG_Hooks&#x27;&#x27;&#x27; def init(self): ida_dbg.DBG_Hooks.init(self) def dbg_suspend_process(self): asm=GetDisasm(here()) if &quot;cmp&quot; in asm: print(chr(cpu.cl^get_byte(cpu.rsi+cpu.rax+0x401)),end=&quot;&quot;) else: cpu.al=1 continue_process()&#x27;&#x27;&#x27;安装/卸载钩子&#x27;&#x27;&#x27;if &#x27;tmp_dbg_hooks&#x27; not in dir(): tmp_dbg_hooks = dbg_hooks_t() tmp_dbg_hooks.hook() print(&#x27;[+] tmp dbg hook success&#x27;)else: tmp_dbg_hooks.unhook() del tmp_dbg_hooks print(&#x27;[+] tmp dbg unhook success&#x27;) VIRTUAL-REV自定义指令对寄存器进行操作 例如这里的STF对应的sub_1C40对应的异或操作，分析各个函数 要通过运算让寄存器的值满足下面条件，且每个指令只能用10次 慢慢凑就行了 123456789101112131415161718192021222324252627282930313233OAN laxMISZ lip,laxMISZ l0,laxSTF lax,lipRALK l0,laxRALK l2,laxSTF lax,lipRALK l0,laxRALK l2,laxSTF lax,lipRALK l2,laxOAN lipSTF lax,lipMAZ lipRALK l2,laxSTF lax,lipRALK l2,laxMISZ l3,l2MISZ l4,l2MAZ l3RALK l2,l0MISZ l1,l3MAZ l1MQZL l4,l0MQZL l4,l0OAN l4MISZ lax,l4RALK lax,laxMAZ laxMAZ laxMAZ laxXKA l0,laxFLG MCKNIGHTpyarmor逆向 网上找个bypass去混淆，然后pycdc反编译import sysimport lzmaFLAG_LEN = 17nums = [ 203, 99, 1, 219, 19, 54, 46, 170, 180, 120, 22, 249, 236, 87, 27, 223, 81, 252, 232, 66, 241, 61, 235, 40, 217, 74, 145, 196, 7, 131, 75, 56, 105, 134, 48, 49, 149, 127, 73, 65, 70, 45, 53, 121, 198, 193, 207, 138, 32, 0, 132, 122, 10, 210, 189, 44, 164, 25, 166, 195, 5, 47, 157, 20, 119, 247, 199, 97, 152, 14, 148, 124, 123, 36, 30, 76, 58, 192, 110, 178, 175, 202, 155, 23, 50, 168, 156, 106, 84, 186, 197, 95, 140, 79, 43, 15, 244, 125, 205, 3, 234, 212, 13, 182, 233, 255, 71, 163, 254, 150, 26, 90, 33, 109, 183, 37, 92, 248, 167, 9, 173, 91, 107, 133, 253, 88, 31, 220, 153, 83, 55, 141, 62, 101, 28, 242, 112, 52, 89, 6, 17, 135, 211, 181, 39, 208, 209, 85, 158, 69, 137, 229, 93, 231, 226, 41, 114, 42, 215, 108, 68, 77, 18, 177, 246, 191, 64, 86, 190, 218, 102, 185, 160, 142, 172, 171, 237, 238, 245, 59, 146, 213, 151, 113, 139, 144, 230, 143, 98, 8, 194, 29, 221, 115, 34, 82, 11, 57, 78, 214, 12, 80, 251, 111, 184, 162, 224, 201, 4, 206, 204, 227, 38, 169, 130, 67, 116, 128, 35, 187, 51, 216, 126, 96, 147, 72, 100, 174, 103, 118, 239, 161, 188, 129, 240, 222, 16, 24, 243, 228, 165, 2, 200, 225, 104, 60, 21, 159, 117, 94, 176, 154, 250, 63, 179, 136]def generator(cnt): coeffs = [] for i in range(cnt): aux = [] for j in range(cnt): aux.append(nums[(i + j) * 1337 % 256]) coeffs.append(aux) return coeffscoeffs = generator(FLAG_LEN)def calc_line(k, password): rez = 0 for i in range(len(password)): rez += password[i] * coeffs[k][i] return rezdef hash(password): password = password.encode() rez = [] for i in range(FLAG_LEN): rez.append(calc_line(i, password)) final = [] for k in range(FLAG_LEN): aux = 0 for i in range(FLAG_LEN): aux += coeffs[i][i] * rez[k] ** i final.append(aux) data = &#x27;X&#x27;.join((lambda .0: [ str(i) for i in .0 ])(final)) data = lzma.compress(data.encode()) return datadef protect_pytransform(): passprotect_pytransform()if __name__ == &#x27;__main__&#x27;: if len(sys.argv) != 2: print(&#x27;Usage: python3 hasher.py &lt;password&gt;&#x27;) sys.exit(1) password = sys.argv[1] f = open(&#x27;flag.tfc&#x27;, &#x27;wb&#x27;) f.write(hash(password)) f.close() return None 直接二分爆破+z3求解就行 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768from z3 import *import hashlibcoeffs = [ [203, 25, 183, 185, 103, 131, 156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39], [25, 183, 185, 103, 131, 156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80], [183, 185, 103, 131, 156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1], [185, 103, 131, 156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195], [103, 131, 156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92], [131, 156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142], [156, 181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239], [181, 12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56], [12, 99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84], [99, 166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208], [166, 37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251], [37, 160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251, 219], [160, 118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251, 219, 5], [118, 75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251, 219, 5, 248], [75, 106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251, 219, 5, 248, 172], [106, 39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251, 219, 5, 248, 172, 161], [39, 80, 1, 195, 92, 142, 239, 56, 84, 208, 251, 219, 5, 248, 172, 161, 105]]def crack(data,low=0,high=10000000): mid=(low+high)//2 aux = 0 for i in range(17): aux += coeffs[i][i] * mid ** i if aux==data: return mid elif aux&lt;data: return crack(data,mid,high) else: return crack(data, low, mid)final=[241145859875641838375568265700583468186829263398544757708098347348022022884360837485710, 242902687900260771861607054566947611547896250791705390091915540312199710379559572931505, 118804805583829233872261635093267780736313101343997285490553624486731758902902725780401, 26070700698055451690987757334500139286748700065539668546268641839116937214184857128560, 80124267409396931019414660969297677614518733024335683050341802246590458710526430494155, 69120093458515678156299924155147567260652620409495938721703127474659623787444019635686, 55990617663721070662940577545659770939418406539539326788876102491498967285130967281128, 84978787096451983698491441429950667741555633384940077658282672091443454996648064495511, 23759403351528619406080196311716538538008953312734989705067168926356756839659089725251, 86486490836619119777078113830956983553852469753831999233377245135427130463065664874858, 369155978954842380984597693623469879860148040186483282201761309305365061575611768747298, 1078465608243324842613424723393406987749733612082372832634987529158514755913320850268491, 1005551112473893284689270925024882424646208832128726137262652596080759048126971564689305, 1441265309598955239402339668269380825497187261329350217287260241765013222531063230035525, 2537021592764940720429409315492500096108026182936387769778443082968491519197197436386270, 2323164916211382753227121606965322254296382499455840500352915151579032530394385955313501, 5180002787948231428431978908861257938675855102999849262356280617225584933954485735013570]target_rez=[crack(i) for i in final]x=Solver()password=[Int(&#x27;%d&#x27; % i) for i in range(17)]nums = [203,99,1,219,19,54,46,170,180,120,22,249,236,87,27,223,81,252,232,66,241,61,235,40,217,74,145,196,7,131,75,56,105,134,48,49,149,127,73,65,70,45,53,121,198,193,207,138,32,0,132,122,10,210,189,44,164,25,166,195,5,47,157,20,119,247,199,97,152,14,148,124,123,36,30,76,58,192,110,178,175,202,155,23,50,168,156,106,84,186,197,95,140,79,43,15,244,125,205,3,234,212,13,182,233,255,71,163,254,150,26,90,33,109,183,37,92,248,167,9,173,91,107,133,253,88,31,220,153,83,55,141,62,101,28,242,112,52,89,6,17,135,211,181,39,208,209,85,158,69,137,229,93,231,226,41,114,42,215,108,68,77,18,177,246,191,64,86,190,218,102,185,160,142,172,171,237,238,245,59,146,213,151,113,139,144,230,143,98,8,194,29,221,115,34,82,11,57,78,214,12,80,251,111,184,162,224,201,4,206,204,227,38,169,130,67,116,128,35,187,51,216,126,96,147,72,100,174,103,118,239,161,188,129,240,222,16,24,243,228,165,2,200,225,104,60,21,159,117,94,176,154,250,63,179,136]def generator(cnt): coeffs = [] for i in range(cnt): aux = [] for j in range(cnt): aux.append(nums[(i + j) * 1337 % 256]) coeffs.append(aux) return coeffsrez = []for k in range(17): rezi=0 for i in range(len(password)): rezi += password[i] * coeffs[k][i] rez.append(rezi)for i in range(17): x.add(rez[i]==target_rez[i])def getdigest(content): return hashlib.sha256(str(content).encode(&#x27;utf-8&#x27;)).hexdigest()if x.check()==sat: ans=[] model = x.model() for i in range(17): ans.append(model[password[i]].as_long().real) print(&quot;TFCCTF&#123;&quot;+getdigest(&quot;&quot;.join(map(chr,ans)))+&quot;&#125;&quot;)else: print(&quot;notfound&quot;) BRAVE TRAVELERbfs，更改bfs起点就行 1234567891011121314import subprocessfile = &quot;travel&quot;data=list(open(file,&quot;rb&quot;).read())addr=0x13bebase=&quot;&quot;test=&quot;._oiddleolk&#123;aTF_a5gd_55sQ&quot;for i in test: data[addr]=ord(i) open(file,&quot;wb&quot;).write(bytes(data)) found=False process = subprocess.Popen([file], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) output, error = process.communicate() s = output.decode(&#x27;gbk&#x27;) print(s) FUNCTIONAL函数式编程haskell逆向，用hsdecomp进行反编译，然后再看吧，hsdecomp配不好，东西太久了找不到文章了，逆天"},{"title":"DEADCTF WP","path":"/2024/08/06/deadctf-re-wp/","content":"JavaCPScript通过测试发现每一位加密独立，在下图位置插入语句打印加密后的结果，直接爆破，2h爆出来 12345678910111213141516171819202122232425import subprocessfrom string import ascii_letters,digits,ascii_uppercase,ascii_lowercasefrom tqdm import tqdmenc=[3895813, 3893664,3895583,3893639,3919755,3893694,3871506,3871544,3810527,3921672,3913158,3813122,3869603,3813209,3910936,3911023,3896081,3822626,3913160,3919793,3822653,3895614,3820987,3820987,3932159,3911025,3893657,3921671,3820578,3921709,3921698,3910918,]sign=[0]*32dic=&#x27;&#x27;&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#123;|&#125;-_!&quot;#$%&amp;&#x27;()*+,-.&lt;=&gt;?@[\\]^_`~&#x27;&#x27;&#x27;command = &#x27;node --stack-size=1000000000 main.js&#x27;base=&quot;*&quot;*32for j in tqdm(dic): trydata=base.replace(&quot;*&quot;,j) print(&quot;[!]try:&quot;+trydata) open(&quot;input&quot;,&quot;w&quot;).write(trydata) result = subprocess.run(command, shell=True, text=True, capture_output=True) out=result.stdout.strip(&quot; &quot;).split(&quot; &quot;) data=[eval(i) for i in out][::-1] print(data) for k in range(len(enc)): if enc[k]==data[k] and sign[k]==0: sign[k] = 1 base=base[:k]+j+base[k+1:] if sum(sign)==len(sign): print(&quot;[+]found flag:&quot;,base) exit() else: print(&quot;[!]not found:&quot;,sign.count(0)) FlagChecker解包后查看so，大致可以看出为一个虚拟机 每个执行操作的地方打断点 …… 用脚本打印信息，输入测试flag：DEAD{run_pybyt3c0d3_w1th_C_4P1!}，这里测试的flag就是真的flag，可以拿任意符合格式flag进行测试 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758from ida_hexrays import *from ida_dbg import *from idaapi import *from idautils import *from idc import *from ida_kernwin import *def rol(val, r_bits, max_bits=64): &quot;&quot;&quot;循环左移操作&quot;&quot;&quot; return ((val &lt;&lt; r_bits) &amp; (2**max_bits - 1)) | (val &gt;&gt; (max_bits - r_bits))def ror(val, r_bits, max_bits=64): &quot;&quot;&quot;循环右移操作&quot;&quot;&quot; return (val &gt;&gt; r_bits) | ((val &lt;&lt; (max_bits - r_bits)) &amp; (2**max_bits - 1))&#x27;&#x27;&#x27;自定义调试器钩子类&#x27;&#x27;&#x27;class dbg_hooks_t(ida_dbg.DBG_Hooks): &#x27;&#x27;&#x27;继承自父类DBG_Hooks&#x27;&#x27;&#x27; def __init__(self): ida_dbg.DBG_Hooks.__init__(self) def dbg_suspend_process(self): if here()!=0x7f37e8fd5b3c: op=idc.GetDisasm(here()) tmp=&quot;&quot;.join(op.split()[1:]).split(&quot;,&quot;) op=op.split()[0] ip1=eval(&quot;cpu.&quot;+tmp[0].strip()) ip2 =eval(&quot;cpu.&quot;+tmp[1].strip()) result=0 if op==&quot;add&quot;: result=ip1+ip2 if op==&quot;xor&quot;: result=ip1^ip2 if op==&quot;sub&quot;: result=(ip1-ip2)&amp;0xffffffffffffffff if op==&quot;shl&quot;: result=(ip1&lt;&lt;ip2)&amp;0xffffffffffffffff if op==&quot;shr&quot;: result=(ip1&gt;&gt;ip2)&amp;0xffffffffffffffff if op==&quot;rol&quot;: result=rol(ip1,ip2)&amp;0xffffffffffffffff if op==&quot;ror&quot;: result=ror(ip1,ip2)&amp;0xffffffffffffffff print(&quot;&#123;&#125; &#123;&#125;, &#123;&#125; result=&#123;&#125;&quot;.format(op,hex(ip1),hex(ip2),hex(result))) continue_process()&#x27;&#x27;&#x27;安装/卸载钩子&#x27;&#x27;&#x27;if &#x27;tmp_dbg_hooks&#x27; not in dir(): tmp_dbg_hooks = dbg_hooks_t() tmp_dbg_hooks.hook() print(&#x27;[+] tmp dbg hook success&#x27;)else: tmp_dbg_hooks.unhook() del tmp_dbg_hooks print(&#x27;[+] tmp dbg unhook success&#x27;) 拿到调试信息加密逻辑分为两段 第一段xor 0x0, 0x0 result=0x0xor 0x0, 0x0 result=0x0xor 0x0, 0x0 result=0x0add 0x0, 0x6e75727b44414544 result=0x6e75727b44414544add 0x0, 0x6e75727b44414544 result=0x6e75727b44414544and 0x6e75727b44414544, 0xff result=0x0xor 0x44, 0x28 result=0x6cxor 0x0, 0x6c result=0x6cshl 0x6c, 0x8 result=0x6c00shr 0x6e75727b44414544, 0x8 result=0x6e75727b444145xor 0x6c, 0x6c result=0x0add 0x0, 0x6e75727b444145 result=0x6e75727b444145and 0x6e75727b444145, 0xff result=0x0xor 0x45, 0xb1 result=0xf4xor 0x6c00, 0xf4 result=0x6cf4shl 0x6cf4, 0x8 result=0x6cf400shr 0x6e75727b444145, 0x8 result=0x6e75727b4441xor 0xf4, 0xf4 result=0x0add 0x0, 0x6e75727b4441 result=0x6e75727b4441and 0x6e75727b4441, 0xff result=0x0xor 0x41, 0x61 result=0x20xor 0x6cf400, 0x20 result=0x6cf420shl 0x6cf420, 0x8 result=0x6cf42000shr 0x6e75727b4441, 0x8 result=0x6e75727b44xor 0x20, 0x20 result=0x0add 0x0, 0x6e75727b44 result=0x6e75727b44and 0x6e75727b44, 0xff result=0x0xor 0x44, 0x6e result=0x2axor 0x6cf42000, 0x2a result=0x6cf4202ashl 0x6cf4202a, 0x8 result=0x6cf4202a00shr 0x6e75727b44, 0x8 result=0x6e75727bxor 0x2a, 0x2a result=0x0add 0x0, 0x6e75727b result=0x6e75727band 0x6e75727b, 0xff result=0x0xor 0x7b, 0x3 result=0x78xor 0x6cf4202a00, 0x78 result=0x6cf4202a78shl 0x6cf4202a78, 0x8 result=0x6cf4202a7800shr 0x6e75727b, 0x8 result=0x6e7572xor 0x78, 0x78 result=0x0add 0x0, 0x6e7572 result=0x6e7572and 0x6e7572, 0xff result=0x0xor 0x72, 0x8c result=0xfexor 0x6cf4202a7800, 0xfe result=0x6cf4202a78feshl 0x6cf4202a78fe, 0x8 result=0x6cf4202a78fe00shr 0x6e7572, 0x8 result=0x6e75xor 0xfe, 0xfe result=0x0add 0x0, 0x6e75 result=0x6e75and 0x6e75, 0xff result=0x0xor 0x75, 0x55 result=0x20xor 0x6cf4202a78fe00, 0x20 result=0x6cf4202a78fe20shl 0x6cf4202a78fe20, 0x8 result=0x6cf4202a78fe2000shr 0x6e75, 0x8 result=0x6exor 0x20, 0x20 result=0x0add 0x0, 0x6e result=0x6eand 0x6e, 0xff result=0x0xor 0x6e, 0x33 result=0x5dxor 0x6cf4202a78fe2000, 0x5d result=0x6cf4202a78fe205dxor 0x6e75727b44414544, 0x6e75727b44414544 result=0x0add 0x0, 0x6cf4202a78fe205d result=0x6cf4202a78fe205dxor 0x6e, 0x6e result=0x0xor 0x5d, 0x5d result=0x0xor 0x6cf4202a78fe205d, 0x6cf4202a78fe205d result=0x0add 0x0, 0x633374796279705f result=0x633374796279705fadd 0x0, 0x633374796279705f result=0x633374796279705fand 0x633374796279705f, 0xff result=0x0xor 0x5f, 0xca result=0x95xor 0x0, 0x95 result=0x95shl 0x95, 0x8 result=0x9500shr 0x633374796279705f, 0x8 result=0x63337479627970xor 0x95, 0x95 result=0x0add 0x0, 0x63337479627970 result=0x63337479627970and 0x63337479627970, 0xff result=0x0xor 0x70, 0x5a result=0x2axor 0x9500, 0x2a result=0x952ashl 0x952a, 0x8 result=0x952a00shr 0x63337479627970, 0x8 result=0x633374796279xor 0x2a, 0x2a result=0x0add 0x0, 0x633374796279 result=0x633374796279and 0x633374796279, 0xff result=0x0xor 0x79, 0xbd result=0xc4xor 0x952a00, 0xc4 result=0x952ac4shl 0x952ac4, 0x8 result=0x952ac400shr 0x633374796279, 0x8 result=0x6333747962xor 0xc4, 0xc4 result=0x0add 0x0, 0x6333747962 result=0x6333747962and 0x6333747962, 0xff result=0x0xor 0x62, 0xa3 result=0xc1xor 0x952ac400, 0xc1 result=0x952ac4c1shl 0x952ac4c1, 0x8 result=0x952ac4c100shr 0x6333747962, 0x8 result=0x63337479xor 0xc1, 0xc1 result=0x0add 0x0, 0x63337479 result=0x63337479and 0x63337479, 0xff result=0x0xor 0x79, 0x8a result=0xf3xor 0x952ac4c100, 0xf3 result=0x952ac4c1f3shl 0x952ac4c1f3, 0x8 result=0x952ac4c1f300shr 0x63337479, 0x8 result=0x633374xor 0xf3, 0xf3 result=0x0add 0x0, 0x633374 result=0x633374and 0x633374, 0xff result=0x0xor 0x74, 0xce result=0xbaxor 0x952ac4c1f300, 0xba result=0x952ac4c1f3bashl 0x952ac4c1f3ba, 0x8 result=0x952ac4c1f3ba00shr 0x633374, 0x8 result=0x6333xor 0xba, 0xba result=0x0add 0x0, 0x6333 result=0x6333and 0x6333, 0xff result=0x0xor 0x33, 0xa3 result=0x90xor 0x952ac4c1f3ba00, 0x90 result=0x952ac4c1f3ba90shl 0x952ac4c1f3ba90, 0x8 result=0x952ac4c1f3ba9000shr 0x6333, 0x8 result=0x63xor 0x90, 0x90 result=0x0add 0x0, 0x63 result=0x63and 0x63, 0xff result=0x0xor 0x63, 0x85 result=0xe6xor 0x952ac4c1f3ba9000, 0xe6 result=0x952ac4c1f3ba90e6xor 0x633374796279705f, 0x633374796279705f result=0x0add 0x0, 0x952ac4c1f3ba90e6 result=0x952ac4c1f3ba90e6xor 0x63, 0x63 result=0x0xor 0xe6, 0xe6 result=0x0xor 0x952ac4c1f3ba90e6, 0x952ac4c1f3ba90e6 result=0x0add 0x0, 0x687431775f336430 result=0x687431775f336430add 0x0, 0x687431775f336430 result=0x687431775f336430and 0x687431775f336430, 0xff result=0x0xor 0x30, 0x57 result=0x67xor 0x0, 0x67 result=0x67shl 0x67, 0x8 result=0x6700shr 0x687431775f336430, 0x8 result=0x687431775f3364xor 0x67, 0x67 result=0x0add 0x0, 0x687431775f3364 result=0x687431775f3364and 0x687431775f3364, 0xff result=0x0xor 0x64, 0x13 result=0x77xor 0x6700, 0x77 result=0x6777shl 0x6777, 0x8 result=0x677700shr 0x687431775f3364, 0x8 result=0x687431775f33xor 0x77, 0x77 result=0x0add 0x0, 0x687431775f33 result=0x687431775f33and 0x687431775f33, 0xff result=0x0xor 0x33, 0xee result=0xddxor 0x677700, 0xdd result=0x6777ddshl 0x6777dd, 0x8 result=0x6777dd00shr 0x687431775f33, 0x8 result=0x687431775fxor 0xdd, 0xdd result=0x0add 0x0, 0x687431775f result=0x687431775fand 0x687431775f, 0xff result=0x0xor 0x5f, 0x2f result=0x70xor 0x6777dd00, 0x70 result=0x6777dd70shl 0x6777dd70, 0x8 result=0x6777dd7000shr 0x687431775f, 0x8 result=0x68743177xor 0x70, 0x70 result=0x0add 0x0, 0x68743177 result=0x68743177and 0x68743177, 0xff result=0x0xor 0x77, 0x5d result=0x2axor 0x6777dd7000, 0x2a result=0x6777dd702ashl 0x6777dd702a, 0x8 result=0x6777dd702a00shr 0x68743177, 0x8 result=0x687431xor 0x2a, 0x2a result=0x0add 0x0, 0x687431 result=0x687431and 0x687431, 0xff result=0x0xor 0x31, 0xd8 result=0xe9xor 0x6777dd702a00, 0xe9 result=0x6777dd702ae9shl 0x6777dd702ae9, 0x8 result=0x6777dd702ae900shr 0x687431, 0x8 result=0x6874xor 0xe9, 0xe9 result=0x0add 0x0, 0x6874 result=0x6874and 0x6874, 0xff result=0x0xor 0x74, 0x96 result=0xe2xor 0x6777dd702ae900, 0xe2 result=0x6777dd702ae9e2shl 0x6777dd702ae9e2, 0x8 result=0x6777dd702ae9e200shr 0x6874, 0x8 result=0x68xor 0xe2, 0xe2 result=0x0add 0x0, 0x68 result=0x68and 0x68, 0xff result=0x0xor 0x68, 0xfd result=0x95xor 0x6777dd702ae9e200, 0x95 result=0x6777dd702ae9e295xor 0x687431775f336430, 0x687431775f336430 result=0x0add 0x0, 0x6777dd702ae9e295 result=0x6777dd702ae9e295xor 0x68, 0x68 result=0x0xor 0x95, 0x95 result=0x0xor 0x6777dd702ae9e295, 0x6777dd702ae9e295 result=0x0add 0x0, 0x7d213150345f435f result=0x7d213150345f435fadd 0x0, 0x7d213150345f435f result=0x7d213150345f435fand 0x7d213150345f435f, 0xff result=0x0xor 0x5f, 0x73 result=0x2cxor 0x0, 0x2c result=0x2cshl 0x2c, 0x8 result=0x2c00shr 0x7d213150345f435f, 0x8 result=0x7d213150345f43xor 0x2c, 0x2c result=0x0add 0x0, 0x7d213150345f43 result=0x7d213150345f43and 0x7d213150345f43, 0xff result=0x0xor 0x43, 0x8c result=0xcfxor 0x2c00, 0xcf result=0x2ccfshl 0x2ccf, 0x8 result=0x2ccf00shr 0x7d213150345f43, 0x8 result=0x7d213150345fxor 0xcf, 0xcf result=0x0add 0x0, 0x7d213150345f result=0x7d213150345fand 0x7d213150345f, 0xff result=0x0xor 0x5f, 0x7b result=0x24xor 0x2ccf00, 0x24 result=0x2ccf24shl 0x2ccf24, 0x8 result=0x2ccf2400shr 0x7d213150345f, 0x8 result=0x7d21315034xor 0x24, 0x24 result=0x0add 0x0, 0x7d21315034 result=0x7d21315034and 0x7d21315034, 0xff result=0x0xor 0x34, 0xfb result=0xcfxor 0x2ccf2400, 0xcf result=0x2ccf24cfshl 0x2ccf24cf, 0x8 result=0x2ccf24cf00shr 0x7d21315034, 0x8 result=0x7d213150xor 0xcf, 0xcf result=0x0add 0x0, 0x7d213150 result=0x7d213150and 0x7d213150, 0xff result=0x0xor 0x50, 0xae result=0xfexor 0x2ccf24cf00, 0xfe result=0x2ccf24cffeshl 0x2ccf24cffe, 0x8 result=0x2ccf24cffe00shr 0x7d213150, 0x8 result=0x7d2131xor 0xfe, 0xfe result=0x0add 0x0, 0x7d2131 result=0x7d2131and 0x7d2131, 0xff result=0x0xor 0x31, 0xd9 result=0xe8xor 0x2ccf24cffe00, 0xe8 result=0x2ccf24cffee8shl 0x2ccf24cffee8, 0x8 result=0x2ccf24cffee800shr 0x7d2131, 0x8 result=0x7d21xor 0xe8, 0xe8 result=0x0add 0x0, 0x7d21 result=0x7d21and 0x7d21, 0xff result=0x0xor 0x21, 0xa7 result=0x86xor 0x2ccf24cffee800, 0x86 result=0x2ccf24cffee886shl 0x2ccf24cffee886, 0x8 result=0x2ccf24cffee88600shr 0x7d21, 0x8 result=0x7dxor 0x86, 0x86 result=0x0add 0x0, 0x7d result=0x7dand 0x7d, 0xff result=0x0xor 0x7d, 0x75 result=0x8xor 0x2ccf24cffee88600, 0x8 result=0x2ccf24cffee88608xor 0x7d213150345f435f, 0x7d213150345f435f result=0x0add 0x0, 0x2ccf24cffee88608 result=0x2ccf24cffee88608 不难看出只是个异或逻辑，还原一下算法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758def process(inputs): # 输入的四个64位数 num1 = inputs[0] num2 = inputs[1] num3 = inputs[2] num4 = inputs[3] # 初始化一些变量 result = 0 temp1 = num1 temp2 = num2 temp3 = num3 temp4 = num4 data = [0x28, 0xb1, 0x61, 0x6e, 0x3, 0x8c, 0x55, 0x33, 0xca, 0x5a, 0xbd, 0xa3, 0x8a, 0xce, 0xa3, 0x85, 0x57, 0x13, 0xee, 0x2f, 0x5d, 0xd8, 0x96, 0xfd, 0x73, 0x8c, 0x7b, 0xfb, 0xae, 0xd9, 0xa7, 0x75] results=[] # 对第一个数进行处理 for i in range(8): byte = temp1 &amp; 0xff temp1 &gt;&gt;= 8 xor_result = byte ^ data[0+i] result = (result &lt;&lt; 8) | xor_result results.append(result) result = 0 # 对第二个数进行处理 for i in range(8): byte = temp2 &amp; 0xff temp2 &gt;&gt;= 8 xor_result = byte ^ data[1+i] result = (result &lt;&lt; 8) | xor_result results.append(result) result = 0 # 对第三个数进行处理 for i in range(8): byte = temp3 &amp; 0xff temp3 &gt;&gt;= 8 xor_result = byte ^ data[2+i] result = (result &lt;&lt; 8) | xor_result results.append(result) result = 0 # 对第四个数进行处理 for i in range(8): byte = temp4 &amp; 0xff temp4 &gt;&gt;= 8 xor_result = byte ^ data[3+i] result = (result &lt;&lt; 8) | xor_result results.append(result) return results# 示例输入input=list(map(ord,&quot;DEAD&#123;run_pybyt3c0d3_w1th_C_4P1!&#125;&quot;))input=[int.from_bytes(input[i:i+8],&quot;little&quot;) for i in range(0,len(input),8)]output = process(input)for i in output: print(hex(i)) 第二段123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168sub 0x2ccf24cffee88608, 0x952ac4c1f3ba90e6 result=0x97a4600e0b2df522sub 0x6777dd702ae9e295, 0xa5b577c2fb57f719 result=0xc1c265ad2f91eb7csub 0x6cf4202a78fe205d, 0x97a4600e0b2df522 result=0xd54fc01c6dd02b3badd 0xd54fc01c6dd02b3b, 0x92bfddfec2f52f3b result=0x1680f9e1b30c55a76xor 0xc1c265ad2f91eb7c, 0xcadc9ba99a2ae444 result=0xb1efe04b5bb0f38sub 0x97a4600e0b2df522, 0x37e4241df14718d result=0x94261dcc2c198395xor 0x94261dcc2c198395, 0x952ac4c1f3ba90e6 result=0x10cd90ddfa31373rol 0x10cd90ddfa31373, 0x2d result=0x626e60219b21bbf4sub 0x626e60219b21bbf4, 0x680f9e1b30c55a76 result=0xfa5ec2066a5c617exor 0xb1efe04b5bb0f38, 0xa324444e39c3e7e7 result=0xa83aba4a8c78e8dfror 0x680f9e1b30c55a76, 0x2c result=0xe1b30c55a76680f9ror 0x952ac4c1f3ba90e6, 0x9 result=0x734a956260f9dd48sub 0xe1b30c55a76680f9, 0xa83aba4a8c78e8df result=0x3978520b1aed981aadd 0x734a956260f9dd48, 0xa83aba4a8c78e8df result=0x11b854faced72c627ror 0x1b854faced72c627, 0x34 result=0x54faced72c6271b8sub 0xa83aba4a8c78e8df, 0x5350ea4003b419e1 result=0x54e9d00a88c4cefesub 0xfa5ec2066a5c617e, 0x54faced72c6271b8 result=0xa563f32f3df9efc6add 0xa563f32f3df9efc6, 0x54e9d00a88c4cefe result=0xfa4dc339c6bebec4xor 0xfa4dc339c6bebec4, 0x7d27118487b24a4c result=0x876ad2bd410cf488rol 0x54e9d00a88c4cefe, 0x26 result=0x3133bf953a7402a2sub 0x876ad2bd410cf488, 0x3978520b1aed981a result=0x4df280b2261f5c6exor 0x54faced72c6271b8, 0xb948cbbf8c616936 result=0xedb20568a003188eror 0xedb20568a003188e, 0x3c result=0xdb20568a003188eerol 0x3978520b1aed981a, 0x39 result=0x3472f0a41635db30xor 0x3472f0a41635db30, 0x8c27c187b5925ea7 result=0xb8553123a3a78597sub 0xb8553123a3a78597, 0x4df280b2261f5c6e result=0x6a62b0717d882929add 0xdb20568a003188ee, 0x6a62b0717d882929 result=0x1458306fb7db9b217sub 0x3133bf953a7402a2, 0x6011664a1feadd72 result=0xd122594b1a892530sub 0x4df280b2261f5c6e, 0xc6b76b35dc565f4b result=0x873b157c49c8fd23rol 0x6a62b0717d882929, 0x3a result=0xa5a98ac1c5f620a4ror 0x458306fb7db9b217, 0x38 result=0x8306fb7db9b21745xor 0xd122594b1a892530, 0x873b157c49c8fd23 result=0x56194c375341d813xor 0x56194c375341d813, 0x5d13d65e4a7935dd result=0xb0a9a691938edcexor 0xa5a98ac1c5f620a4, 0xb0a9a691938edce result=0xaea310a8dccecd6arol 0x873b157c49c8fd23, 0x1e result=0x12723f48e1cec55fxor 0xb0a9a691938edce, 0x78f00494b1fd4117 result=0x73fa9efda8c5acd9add 0x73fa9efda8c5acd9, 0xaea310a8dccecd6a result=0x1229dafa685947a43xor 0x8306fb7db9b21745, 0xaea310a8dccecd6a result=0x2da5ebd5657cda2frol 0x2da5ebd5657cda2f, 0xd result=0xbd7aacaf9b45e5b4sub 0xbd7aacaf9b45e5b4, 0x15a37cdf4f1c5ece result=0xa7d72fd04c2986e6rol 0x12723f48e1cec55f, 0x3f result=0x89391fa470e762afrol 0xa7d72fd04c2986e6, 0x1a result=0x4130a61b9a9f5cbfxor 0x89391fa470e762af, 0xaea310a8dccecd6a result=0x279a0f0cac29afc5sub 0xaea310a8dccecd6a, 0x23683b20a006c3f1 result=0x8b3ad5883cc80979sub 0x279a0f0cac29afc5, 0x8b3ad5883cc80979 result=0x9c5f39846f61a64csub 0x4130a61b9a9f5cbf, 0x9c5f39846f61a64c result=0xa4d16c972b3db673ror 0x8b3ad5883cc80979, 0x2a result=0x620f32025e62ceb5add 0x229dafa685947a43, 0x3f3cd0b931fb83ba result=0x61da805fb78ffdfdadd 0x61da805fb78ffdfd, 0x24ace0da2a14ef6d result=0x86876139e1a4ed6asub 0xa4d16c972b3db673, 0x620f32025e62ceb5 result=0x42c23a94ccdae7beror 0x86876139e1a4ed6a, 0x2e result=0x84e78693b5aa1a1dsub 0x620f32025e62ceb5, 0x9e69f9d52fe5a72a result=0xc3a5382d2e7d278bxor 0x9c5f39846f61a64c, 0x42c23a94ccdae7be result=0xde9d0310a3bb41f2rol 0x84e78693b5aa1a1d, 0x39 result=0x3b09cf0d276b5434sub 0xc3a5382d2e7d278b, 0xde9d0310a3bb41f2 result=0xe508351c8ac1e599xor 0x42c23a94ccdae7be, 0x9f0093fa7d70e962 result=0xddc2a96eb1aa0edcsub 0xddc2a96eb1aa0edc, 0xde9d0310a3bb41f2 result=0xff25a65e0deecceaxor 0x3b09cf0d276b5434, 0xe508351c8ac1e599 result=0xde01fa11adaab1adadd 0xe508351c8ac1e599, 0x79584d73a695110c result=0x15e6082903156f6a5sub 0xff25a65e0deeccea, 0xde01fa11adaab1ad result=0x2123ac4c60441b3drol 0xde9d0310a3bb41f2, 0x27 result=0xdda0f96f4e818851rol 0xde01fa11adaab1ad, 0x37 result=0xd6ef00fd08d6d558xor 0x2123ac4c60441b3d, 0xd6ef00fd08d6d558 result=0xf7ccacb16892ce65xor 0xd6ef00fd08d6d558, 0x7b66780079bcf18d result=0xad8978fd716a24d5sub 0x5e6082903156f6a5, 0xf7ccacb16892ce65 result=0x6693d5dec8c42840add 0xdda0f96f4e818851, 0x273e52f26ceb226b result=0x104df4c61bb6caabcxor 0xf7ccacb16892ce65, 0xa1d8a9d784041e4 result=0xfdd1262c10d28f81add 0xfdd1262c10d28f81, 0x4df4c61bb6caabc result=0x102b0728dcc3f3a3dadd 0x4df4c61bb6caabc, 0x54aca4906a29539b result=0x598bf0f22595fe57sub 0xad8978fd716a24d5, 0x2b0728dcc3f3a3d result=0xaad9066fa52aea98add 0x6693d5dec8c42840, 0xaad9066fa52aea98 result=0x1116cdc4e6def12d8add 0xaad9066fa52aea98, 0x598bf0f22595fe57 result=0x10464f761cac0e8efsub 0x598bf0f22595fe57, 0x982a5ed5ad23b3f5 result=0xc161921c78724a62add 0x116cdc4e6def12d8, 0x29dd2db2114bf812 result=0x3b4a0a007f3b0aeasub 0x3b4a0a007f3b0aea, 0x464f761cac0e8ef result=0x36e5129eb47a21fbxor 0x36e5129eb47a21fb, 0x464f761cac0e8ef result=0x3281e5ff7ebac914rol 0x464f761cac0e8ef, 0xd result=0x9eec39581d1de08cadd 0x3281e5ff7ebac914, 0x14051b581ba4a8ec result=0x468701579a5f7200ror 0xc161921c78724a62, 0x3a result=0x5864871e1c9298b0xor 0x2b0728dcc3f3a3d, 0x498e0b410bee2b9e result=0x4b3e79ccc7d111a3xor 0x7d, 0x7d result=0x0xor 0x8, 0x8 result=0x0xor 0x0, 0x468701579a5f7200 result=0x468701579a5f7200shr 0x468701579a5f7200, 0x20 result=0x46870157xor 0x0, 0x468701579a5f7200 result=0x468701579a5f7200xor 0x46870157, 0xba885960 result=0xfc0f5837xor 0xfc0f5837, 0x468701579a5f7200 result=0x4687015766502a37xor 0x468701579a5f7200, 0x4687015766502a37 result=0xfc0f5837xor 0x4687015766502a37, 0xfc0f5837 result=0x468701579a5f7200xor 0x468701579a5f7200, 0xefac3c8c result=0x4687015775f34e8cxor 0x4687015775f34e8c, 0xfc0f5837 result=0x4687015789fc16bbxor 0xfc0f5837, 0x4687015789fc16bb result=0x4687015775f34e8cxor 0x4687015789fc16bb, 0x4687015775f34e8c result=0xfc0f5837xor 0xfc0f5837, 0x1e64ba90 result=0xe26be2a7xor 0xe26be2a7, 0x4687015775f34e8c result=0x468701579798ac2bxor 0x4687015775f34e8c, 0x468701579798ac2b result=0xe26be2a7xor 0x468701579798ac2b, 0xe26be2a7 result=0x4687015775f34e8cxor 0x4687015775f34e8c, 0xf47c0b5 result=0x468701577ab48e39shl 0x468701577ab48e39, 0x20 result=0x7ab48e3900000000xor 0x468701579a5f7200, 0x468701579a5f7200 result=0x0xor 0x0, 0x7ab48e3900000000 result=0x7ab48e3900000000xor 0x7ab48e3900000000, 0xe26be2a7 result=0x7ab48e39e26be2a7xor 0x7ab48e3900000000, 0x7ab48e3900000000 result=0x0xor 0xe26be2a7, 0xe26be2a7 result=0x0xor 0x0, 0x4b3e79ccc7d111a3 result=0x4b3e79ccc7d111a3shr 0x4b3e79ccc7d111a3, 0x20 result=0x4b3e79ccxor 0x0, 0x4b3e79ccc7d111a3 result=0x4b3e79ccc7d111a3xor 0x4b3e79cc, 0xba885960 result=0xf1b620acxor 0xf1b620ac, 0x4b3e79ccc7d111a3 result=0x4b3e79cc3667310fxor 0x4b3e79ccc7d111a3, 0x4b3e79cc3667310f result=0xf1b620acxor 0x4b3e79cc3667310f, 0xf1b620ac result=0x4b3e79ccc7d111a3xor 0x4b3e79ccc7d111a3, 0xefac3c8c result=0x4b3e79cc287d2d2fxor 0x4b3e79cc287d2d2f, 0xf1b620ac result=0x4b3e79ccd9cb0d83xor 0xf1b620ac, 0x4b3e79ccd9cb0d83 result=0x4b3e79cc287d2d2fxor 0x4b3e79ccd9cb0d83, 0x4b3e79cc287d2d2f result=0xf1b620acxor 0xf1b620ac, 0x1e64ba90 result=0xefd29a3cxor 0xefd29a3c, 0x4b3e79cc287d2d2f result=0x4b3e79ccc7afb713xor 0x4b3e79cc287d2d2f, 0x4b3e79ccc7afb713 result=0xefd29a3cxor 0x4b3e79ccc7afb713, 0xefd29a3c result=0x4b3e79cc287d2d2fxor 0x4b3e79cc287d2d2f, 0xf47c0b5 result=0x4b3e79cc273aed9ashl 0x4b3e79cc273aed9a, 0x20 result=0x273aed9a00000000xor 0x4b3e79ccc7d111a3, 0x4b3e79ccc7d111a3 result=0x0xor 0x0, 0x273aed9a00000000 result=0x273aed9a00000000xor 0x273aed9a00000000, 0xefd29a3c result=0x273aed9aefd29a3cxor 0x273aed9a00000000, 0x273aed9a00000000 result=0x0xor 0xefd29a3c, 0xefd29a3c result=0x0xor 0x0, 0x9eec39581d1de08c result=0x9eec39581d1de08cshr 0x9eec39581d1de08c, 0x20 result=0x9eec3958xor 0x0, 0x9eec39581d1de08c result=0x9eec39581d1de08cxor 0x9eec3958, 0xba885960 result=0x24646038xor 0x24646038, 0x9eec39581d1de08c result=0x9eec3958397980b4xor 0x9eec39581d1de08c, 0x9eec3958397980b4 result=0x24646038xor 0x9eec3958397980b4, 0x24646038 result=0x9eec39581d1de08cxor 0x9eec39581d1de08c, 0xefac3c8c result=0x9eec3958f2b1dc00xor 0x9eec3958f2b1dc00, 0x24646038 result=0x9eec3958d6d5bc38xor 0x24646038, 0x9eec3958d6d5bc38 result=0x9eec3958f2b1dc00xor 0x9eec3958d6d5bc38, 0x9eec3958f2b1dc00 result=0x24646038xor 0x24646038, 0x1e64ba90 result=0x3a00daa8xor 0x3a00daa8, 0x9eec3958f2b1dc00 result=0x9eec3958c8b106a8xor 0x9eec3958f2b1dc00, 0x9eec3958c8b106a8 result=0x3a00daa8xor 0x9eec3958c8b106a8, 0x3a00daa8 result=0x9eec3958f2b1dc00xor 0x9eec3958f2b1dc00, 0xf47c0b5 result=0x9eec3958fdf61cb5shl 0x9eec3958fdf61cb5, 0x20 result=0xfdf61cb500000000xor 0x9eec39581d1de08c, 0x9eec39581d1de08c result=0x0xor 0x0, 0xfdf61cb500000000 result=0xfdf61cb500000000xor 0xfdf61cb500000000, 0x3a00daa8 result=0xfdf61cb53a00daa8xor 0xfdf61cb500000000, 0xfdf61cb500000000 result=0x0xor 0x3a00daa8, 0x3a00daa8 result=0x0xor 0x0, 0x5864871e1c9298b0 result=0x5864871e1c9298b0shr 0x5864871e1c9298b0, 0x20 result=0x5864871exor 0x0, 0x5864871e1c9298b0 result=0x5864871e1c9298b0xor 0x5864871e, 0xba885960 result=0xe2ecde7exor 0xe2ecde7e, 0x5864871e1c9298b0 result=0x5864871efe7e46cexor 0x5864871e1c9298b0, 0x5864871efe7e46ce result=0xe2ecde7exor 0x5864871efe7e46ce, 0xe2ecde7e result=0x5864871e1c9298b0xor 0x5864871e1c9298b0, 0xefac3c8c result=0x5864871ef33ea43cxor 0x5864871ef33ea43c, 0xe2ecde7e result=0x5864871e11d27a42xor 0xe2ecde7e, 0x5864871e11d27a42 result=0x5864871ef33ea43cxor 0x5864871e11d27a42, 0x5864871ef33ea43c result=0xe2ecde7exor 0xe2ecde7e, 0x1e64ba90 result=0xfc8864eexor 0xfc8864ee, 0x5864871ef33ea43c result=0x5864871e0fb6c0d2xor 0x5864871ef33ea43c, 0x5864871e0fb6c0d2 result=0xfc8864eexor 0x5864871e0fb6c0d2, 0xfc8864ee result=0x5864871ef33ea43cxor 0x5864871ef33ea43c, 0xf47c0b5 result=0x5864871efc796489shl 0x5864871efc796489, 0x20 result=0xfc79648900000000xor 0x5864871e1c9298b0, 0x5864871e1c9298b0 result=0x0xor 0x0, 0xfc79648900000000 result=0xfc79648900000000xor 0xfc79648900000000, 0xfc8864ee result=0xfc796489fc8864ee 写个脚本转化一下s=&#x27;&#x27;&#x27;sub 0x2ccf24cffee88608, 0x952ac4c1f3ba90e6 result=0x97a4600e0b2df522sub 0x6777dd702ae9e295, 0xa5b577c2fb57f719 result=0xc1c265ad2f91eb7csub 0x6cf4202a78fe205d, 0x97a4600e0b2df522 result=0xd54fc01c6dd02b3badd 0xd54fc01c6dd02b3b, 0x92bfddfec2f52f3b result=0x1680f9e1b30c55a76xor 0xc1c265ad2f91eb7c, 0xcadc9ba99a2ae444 result=0xb1efe04b5bb0f38sub 0x97a4600e0b2df522, 0x37e4241df14718d result=0x94261dcc2c198395xor 0x94261dcc2c198395, 0x952ac4c1f3ba90e6 result=0x10cd90ddfa31373rol 0x10cd90ddfa31373, 0x2d result=0x626e60219b21bbf4sub 0x626e60219b21bbf4, 0x680f9e1b30c55a76 result=0xfa5ec2066a5c617exor 0xb1efe04b5bb0f38, 0xa324444e39c3e7e7 result=0xa83aba4a8c78e8dfror 0x680f9e1b30c55a76, 0x2c result=0xe1b30c55a76680f9ror 0x952ac4c1f3ba90e6, 0x9 result=0x734a956260f9dd48sub 0xe1b30c55a76680f9, 0xa83aba4a8c78e8df result=0x3978520b1aed981aadd 0x734a956260f9dd48, 0xa83aba4a8c78e8df result=0x11b854faced72c627ror 0x1b854faced72c627, 0x34 result=0x54faced72c6271b8sub 0xa83aba4a8c78e8df, 0x5350ea4003b419e1 result=0x54e9d00a88c4cefesub 0xfa5ec2066a5c617e, 0x54faced72c6271b8 result=0xa563f32f3df9efc6add 0xa563f32f3df9efc6, 0x54e9d00a88c4cefe result=0xfa4dc339c6bebec4xor 0xfa4dc339c6bebec4, 0x7d27118487b24a4c result=0x876ad2bd410cf488rol 0x54e9d00a88c4cefe, 0x26 result=0x3133bf953a7402a2sub 0x876ad2bd410cf488, 0x3978520b1aed981a result=0x4df280b2261f5c6exor 0x54faced72c6271b8, 0xb948cbbf8c616936 result=0xedb20568a003188eror 0xedb20568a003188e, 0x3c result=0xdb20568a003188eerol 0x3978520b1aed981a, 0x39 result=0x3472f0a41635db30xor 0x3472f0a41635db30, 0x8c27c187b5925ea7 result=0xb8553123a3a78597sub 0xb8553123a3a78597, 0x4df280b2261f5c6e result=0x6a62b0717d882929add 0xdb20568a003188ee, 0x6a62b0717d882929 result=0x1458306fb7db9b217sub 0x3133bf953a7402a2, 0x6011664a1feadd72 result=0xd122594b1a892530sub 0x4df280b2261f5c6e, 0xc6b76b35dc565f4b result=0x873b157c49c8fd23rol 0x6a62b0717d882929, 0x3a result=0xa5a98ac1c5f620a4ror 0x458306fb7db9b217, 0x38 result=0x8306fb7db9b21745xor 0xd122594b1a892530, 0x873b157c49c8fd23 result=0x56194c375341d813xor 0x56194c375341d813, 0x5d13d65e4a7935dd result=0xb0a9a691938edcexor 0xa5a98ac1c5f620a4, 0xb0a9a691938edce result=0xaea310a8dccecd6arol 0x873b157c49c8fd23, 0x1e result=0x12723f48e1cec55fxor 0xb0a9a691938edce, 0x78f00494b1fd4117 result=0x73fa9efda8c5acd9add 0x73fa9efda8c5acd9, 0xaea310a8dccecd6a result=0x1229dafa685947a43xor 0x8306fb7db9b21745, 0xaea310a8dccecd6a result=0x2da5ebd5657cda2frol 0x2da5ebd5657cda2f, 0xd result=0xbd7aacaf9b45e5b4sub 0xbd7aacaf9b45e5b4, 0x15a37cdf4f1c5ece result=0xa7d72fd04c2986e6rol 0x12723f48e1cec55f, 0x3f result=0x89391fa470e762afrol 0xa7d72fd04c2986e6, 0x1a result=0x4130a61b9a9f5cbfxor 0x89391fa470e762af, 0xaea310a8dccecd6a result=0x279a0f0cac29afc5sub 0xaea310a8dccecd6a, 0x23683b20a006c3f1 result=0x8b3ad5883cc80979sub 0x279a0f0cac29afc5, 0x8b3ad5883cc80979 result=0x9c5f39846f61a64csub 0x4130a61b9a9f5cbf, 0x9c5f39846f61a64c result=0xa4d16c972b3db673ror 0x8b3ad5883cc80979, 0x2a result=0x620f32025e62ceb5add 0x229dafa685947a43, 0x3f3cd0b931fb83ba result=0x61da805fb78ffdfdadd 0x61da805fb78ffdfd, 0x24ace0da2a14ef6d result=0x86876139e1a4ed6asub 0xa4d16c972b3db673, 0x620f32025e62ceb5 result=0x42c23a94ccdae7beror 0x86876139e1a4ed6a, 0x2e result=0x84e78693b5aa1a1dsub 0x620f32025e62ceb5, 0x9e69f9d52fe5a72a result=0xc3a5382d2e7d278bxor 0x9c5f39846f61a64c, 0x42c23a94ccdae7be result=0xde9d0310a3bb41f2rol 0x84e78693b5aa1a1d, 0x39 result=0x3b09cf0d276b5434sub 0xc3a5382d2e7d278b, 0xde9d0310a3bb41f2 result=0xe508351c8ac1e599xor 0x42c23a94ccdae7be, 0x9f0093fa7d70e962 result=0xddc2a96eb1aa0edcsub 0xddc2a96eb1aa0edc, 0xde9d0310a3bb41f2 result=0xff25a65e0deecceaxor 0x3b09cf0d276b5434, 0xe508351c8ac1e599 result=0xde01fa11adaab1adadd 0xe508351c8ac1e599, 0x79584d73a695110c result=0x15e6082903156f6a5sub 0xff25a65e0deeccea, 0xde01fa11adaab1ad result=0x2123ac4c60441b3drol 0xde9d0310a3bb41f2, 0x27 result=0xdda0f96f4e818851rol 0xde01fa11adaab1ad, 0x37 result=0xd6ef00fd08d6d558xor 0x2123ac4c60441b3d, 0xd6ef00fd08d6d558 result=0xf7ccacb16892ce65xor 0xd6ef00fd08d6d558, 0x7b66780079bcf18d result=0xad8978fd716a24d5sub 0x5e6082903156f6a5, 0xf7ccacb16892ce65 result=0x6693d5dec8c42840add 0xdda0f96f4e818851, 0x273e52f26ceb226b result=0x104df4c61bb6caabcxor 0xf7ccacb16892ce65, 0xa1d8a9d784041e4 result=0xfdd1262c10d28f81add 0xfdd1262c10d28f81, 0x4df4c61bb6caabc result=0x102b0728dcc3f3a3dadd 0x4df4c61bb6caabc, 0x54aca4906a29539b result=0x598bf0f22595fe57sub 0xad8978fd716a24d5, 0x2b0728dcc3f3a3d result=0xaad9066fa52aea98add 0x6693d5dec8c42840, 0xaad9066fa52aea98 result=0x1116cdc4e6def12d8add 0xaad9066fa52aea98, 0x598bf0f22595fe57 result=0x10464f761cac0e8efsub 0x598bf0f22595fe57, 0x982a5ed5ad23b3f5 result=0xc161921c78724a62add 0x116cdc4e6def12d8, 0x29dd2db2114bf812 result=0x3b4a0a007f3b0aeasub 0x3b4a0a007f3b0aea, 0x464f761cac0e8ef result=0x36e5129eb47a21fbxor 0x36e5129eb47a21fb, 0x464f761cac0e8ef result=0x3281e5ff7ebac914rol 0x464f761cac0e8ef, 0xd result=0x9eec39581d1de08cadd 0x3281e5ff7ebac914, 0x14051b581ba4a8ec result=0x468701579a5f7200ror 0xc161921c78724a62, 0x3a result=0x5864871e1c9298b0xor 0x2b0728dcc3f3a3d, 0x498e0b410bee2b9e result=0x4b3e79ccc7d111a3xor 0x7d, 0x7d result=0x0xor 0x8, 0x8 result=0x0xor 0x0, 0x468701579a5f7200 result=0x468701579a5f7200shr 0x468701579a5f7200, 0x20 result=0x46870157xor 0x0, 0x468701579a5f7200 result=0x468701579a5f7200xor 0x46870157, 0xba885960 result=0xfc0f5837xor 0xfc0f5837, 0x468701579a5f7200 result=0x4687015766502a37xor 0x468701579a5f7200, 0x4687015766502a37 result=0xfc0f5837xor 0x4687015766502a37, 0xfc0f5837 result=0x468701579a5f7200xor 0x468701579a5f7200, 0xefac3c8c result=0x4687015775f34e8cxor 0x4687015775f34e8c, 0xfc0f5837 result=0x4687015789fc16bbxor 0xfc0f5837, 0x4687015789fc16bb result=0x4687015775f34e8cxor 0x4687015789fc16bb, 0x4687015775f34e8c result=0xfc0f5837xor 0xfc0f5837, 0x1e64ba90 result=0xe26be2a7xor 0xe26be2a7, 0x4687015775f34e8c result=0x468701579798ac2bxor 0x4687015775f34e8c, 0x468701579798ac2b result=0xe26be2a7xor 0x468701579798ac2b, 0xe26be2a7 result=0x4687015775f34e8cxor 0x4687015775f34e8c, 0xf47c0b5 result=0x468701577ab48e39shl 0x468701577ab48e39, 0x20 result=0x7ab48e3900000000xor 0x468701579a5f7200, 0x468701579a5f7200 result=0x0xor 0x0, 0x7ab48e3900000000 result=0x7ab48e3900000000xor 0x7ab48e3900000000, 0xe26be2a7 result=0x7ab48e39e26be2a7xor 0x7ab48e3900000000, 0x7ab48e3900000000 result=0x0xor 0xe26be2a7, 0xe26be2a7 result=0x0xor 0x0, 0x4b3e79ccc7d111a3 result=0x4b3e79ccc7d111a3shr 0x4b3e79ccc7d111a3, 0x20 result=0x4b3e79ccxor 0x0, 0x4b3e79ccc7d111a3 result=0x4b3e79ccc7d111a3xor 0x4b3e79cc, 0xba885960 result=0xf1b620acxor 0xf1b620ac, 0x4b3e79ccc7d111a3 result=0x4b3e79cc3667310fxor 0x4b3e79ccc7d111a3, 0x4b3e79cc3667310f result=0xf1b620acxor 0x4b3e79cc3667310f, 0xf1b620ac result=0x4b3e79ccc7d111a3xor 0x4b3e79ccc7d111a3, 0xefac3c8c result=0x4b3e79cc287d2d2fxor 0x4b3e79cc287d2d2f, 0xf1b620ac result=0x4b3e79ccd9cb0d83xor 0xf1b620ac, 0x4b3e79ccd9cb0d83 result=0x4b3e79cc287d2d2fxor 0x4b3e79ccd9cb0d83, 0x4b3e79cc287d2d2f result=0xf1b620acxor 0xf1b620ac, 0x1e64ba90 result=0xefd29a3cxor 0xefd29a3c, 0x4b3e79cc287d2d2f result=0x4b3e79ccc7afb713xor 0x4b3e79cc287d2d2f, 0x4b3e79ccc7afb713 result=0xefd29a3cxor 0x4b3e79ccc7afb713, 0xefd29a3c result=0x4b3e79cc287d2d2fxor 0x4b3e79cc287d2d2f, 0xf47c0b5 result=0x4b3e79cc273aed9ashl 0x4b3e79cc273aed9a, 0x20 result=0x273aed9a00000000xor 0x4b3e79ccc7d111a3, 0x4b3e79ccc7d111a3 result=0x0xor 0x0, 0x273aed9a00000000 result=0x273aed9a00000000xor 0x273aed9a00000000, 0xefd29a3c result=0x273aed9aefd29a3cxor 0x273aed9a00000000, 0x273aed9a00000000 result=0x0xor 0xefd29a3c, 0xefd29a3c result=0x0xor 0x0, 0x9eec39581d1de08c result=0x9eec39581d1de08cshr 0x9eec39581d1de08c, 0x20 result=0x9eec3958xor 0x0, 0x9eec39581d1de08c result=0x9eec39581d1de08cxor 0x9eec3958, 0xba885960 result=0x24646038xor 0x24646038, 0x9eec39581d1de08c result=0x9eec3958397980b4xor 0x9eec39581d1de08c, 0x9eec3958397980b4 result=0x24646038xor 0x9eec3958397980b4, 0x24646038 result=0x9eec39581d1de08cxor 0x9eec39581d1de08c, 0xefac3c8c result=0x9eec3958f2b1dc00xor 0x9eec3958f2b1dc00, 0x24646038 result=0x9eec3958d6d5bc38xor 0x24646038, 0x9eec3958d6d5bc38 result=0x9eec3958f2b1dc00xor 0x9eec3958d6d5bc38, 0x9eec3958f2b1dc00 result=0x24646038xor 0x24646038, 0x1e64ba90 result=0x3a00daa8xor 0x3a00daa8, 0x9eec3958f2b1dc00 result=0x9eec3958c8b106a8xor 0x9eec3958f2b1dc00, 0x9eec3958c8b106a8 result=0x3a00daa8xor 0x9eec3958c8b106a8, 0x3a00daa8 result=0x9eec3958f2b1dc00xor 0x9eec3958f2b1dc00, 0xf47c0b5 result=0x9eec3958fdf61cb5shl 0x9eec3958fdf61cb5, 0x20 result=0xfdf61cb500000000xor 0x9eec39581d1de08c, 0x9eec39581d1de08c result=0x0xor 0x0, 0xfdf61cb500000000 result=0xfdf61cb500000000xor 0xfdf61cb500000000, 0x3a00daa8 result=0xfdf61cb53a00daa8xor 0xfdf61cb500000000, 0xfdf61cb500000000 result=0x0xor 0x3a00daa8, 0x3a00daa8 result=0x0xor 0x0, 0x5864871e1c9298b0 result=0x5864871e1c9298b0shr 0x5864871e1c9298b0, 0x20 result=0x5864871exor 0x0, 0x5864871e1c9298b0 result=0x5864871e1c9298b0xor 0x5864871e, 0xba885960 result=0xe2ecde7exor 0xe2ecde7e, 0x5864871e1c9298b0 result=0x5864871efe7e46cexor 0x5864871e1c9298b0, 0x5864871efe7e46ce result=0xe2ecde7exor 0x5864871efe7e46ce, 0xe2ecde7e result=0x5864871e1c9298b0xor 0x5864871e1c9298b0, 0xefac3c8c result=0x5864871ef33ea43cxor 0x5864871ef33ea43c, 0xe2ecde7e result=0x5864871e11d27a42xor 0xe2ecde7e, 0x5864871e11d27a42 result=0x5864871ef33ea43cxor 0x5864871e11d27a42, 0x5864871ef33ea43c result=0xe2ecde7exor 0xe2ecde7e, 0x1e64ba90 result=0xfc8864eexor 0xfc8864ee, 0x5864871ef33ea43c result=0x5864871e0fb6c0d2xor 0x5864871ef33ea43c, 0x5864871e0fb6c0d2 result=0xfc8864eexor 0x5864871e0fb6c0d2, 0xfc8864ee result=0x5864871ef33ea43cxor 0x5864871ef33ea43c, 0xf47c0b5 result=0x5864871efc796489shl 0x5864871efc796489, 0x20 result=0xfc79648900000000xor 0x5864871e1c9298b0, 0x5864871e1c9298b0 result=0x0xor 0x0, 0xfc79648900000000 result=0xfc79648900000000xor 0xfc79648900000000, 0xfc8864ee result=0xfc796489fc8864ee&#x27;&#x27;&#x27;.split(&quot; &quot;)a1=[0x6cf4202a78fe205d,0x952ac4c1f3ba90e6,0x6777dd702ae9e295,0x2ccf24cffee88608]dic=&#123;&#125;for i in range(len(a1)): dic[str(hex(a1[i]))]=&quot;a1[&#123;&#125;]&quot;.format(i)a=2for i in s: if &quot;result&quot; in i: result=hex(eval(i.split(&quot;result=&quot;)[1])&amp;0xffffffffffffffff) ip=&quot;&quot;.join(i.split(&quot;result=&quot;)[0].strip().split()[1:3]).split(&quot;,&quot;) ip1,ip2=ip[0].strip(),ip[1].strip() try: ip1=dic[ip1] except: pass try: ip2=dic[ip2] except: pass dic[result]=&quot;a&#123;&#125;&quot;.format(a) op=i.split(&quot;result=&quot;)[0].strip().split()[0] if op==&quot;sub&quot;: op=&quot;-&quot; if op==&quot;and&quot;: op=&quot;&amp;&quot; if op==&quot;xor&quot;: op=&quot;^&quot; if op==&quot;shl&quot;: op=&quot;&lt;&lt;&quot; if op==&quot;shr&quot;: op=&quot;&gt;&gt;&quot; if op==&quot;add&quot;: op=&quot;+&quot; if op==&quot;rol&quot; or op==&quot;ror&quot;: print(&quot;a&#123;&#125;=(&#123;&#125;(&quot;.format(a,op),ip1,&quot;,&quot;,ip2,&quot;))&amp;0xffffffffffffffff&quot;) else: print(&quot;a&#123;&#125;=(&quot;.format(a),ip1,op,ip2,&quot;)&amp;0xffffffffffffffff&quot;) a+=1 else: print(i) 转化的结果为，根据result和 动调加密完的结果找到正确的地方插入赋值语句a1[0]&#x3D;a103，a1[1]&#x3D;a125…… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190a2=( a1[3] - a1[1] )&amp;0xffffffffffffffffa3=( a1[2] - 0xa5b577c2fb57f719 )&amp;0xffffffffffffffffa4=( a1[0] - a2 )&amp;0xffffffffffffffffa5=( a4 + 0x92bfddfec2f52f3b )&amp;0xffffffffffffffffa6=( a3 ^ 0xcadc9ba99a2ae444 )&amp;0xffffffffffffffffa7=( a2 - 0x37e4241df14718d )&amp;0xffffffffffffffffa8=( a7 ^ a1[1] )&amp;0xffffffffffffffffa9=(rol( a8 , 0x2d ))&amp;0xffffffffffffffffa10=( a9 - a5 )&amp;0xffffffffffffffffa11=( a6 ^ 0xa324444e39c3e7e7 )&amp;0xffffffffffffffffa12=(ror( a5 , 0x2c ))&amp;0xffffffffffffffffa13=(ror( a1[1] , 0x9 ))&amp;0xffffffffffffffffa14=( a12 - a11 )&amp;0xffffffffffffffffa15=( a13 + a11 )&amp;0xffffffffffffffffa16=(ror( a15 , 0x34 ))&amp;0xffffffffffffffffa17=( a11 - 0x5350ea4003b419e1 )&amp;0xffffffffffffffffa18=( a10 - a16 )&amp;0xffffffffffffffffa19=( a18 + a17 )&amp;0xffffffffffffffffa20=( a19 ^ 0x7d27118487b24a4c )&amp;0xffffffffffffffffa21=(rol( a17 , 0x26 ))&amp;0xffffffffffffffffa22=( a20 - a14 )&amp;0xffffffffffffffffa23=( a16 ^ 0xb948cbbf8c616936 )&amp;0xffffffffffffffffa24=(ror( a23 , 0x3c ))&amp;0xffffffffffffffffa25=(rol( a14 , 0x39 ))&amp;0xffffffffffffffffa26=( a25 ^ 0x8c27c187b5925ea7 )&amp;0xffffffffffffffffa27=( a26 - a22 )&amp;0xffffffffffffffffa28=( a24 + a27 )&amp;0xffffffffffffffffa29=( a21 - 0x6011664a1feadd72 )&amp;0xffffffffffffffffa30=( a22 - 0xc6b76b35dc565f4b )&amp;0xffffffffffffffffa31=(rol( a27 , 0x3a ))&amp;0xffffffffffffffffa32=(ror( a28 , 0x38 ))&amp;0xffffffffffffffffa33=( a29 ^ a30 )&amp;0xffffffffffffffffa34=( a33 ^ 0x5d13d65e4a7935dd )&amp;0xffffffffffffffffa35=( a31 ^ a34 )&amp;0xffffffffffffffffa36=(rol( a30 , 0x1e ))&amp;0xffffffffffffffffa37=( a34 ^ 0x78f00494b1fd4117 )&amp;0xffffffffffffffffa38=( a37 + a35 )&amp;0xffffffffffffffffa39=( a32 ^ a35 )&amp;0xffffffffffffffffa40=(rol( a39 , 0xd ))&amp;0xffffffffffffffffa41=( a40 - 0x15a37cdf4f1c5ece )&amp;0xffffffffffffffffa42=(rol( a36 , 0x3f ))&amp;0xffffffffffffffffa43=(rol( a41 , 0x1a ))&amp;0xffffffffffffffffa44=( a42 ^ a35 )&amp;0xffffffffffffffffa45=( a35 - 0x23683b20a006c3f1 )&amp;0xffffffffffffffffa46=( a44 - a45 )&amp;0xffffffffffffffffa47=( a43 - a46 )&amp;0xffffffffffffffffa48=(ror( a45 , 0x2a ))&amp;0xffffffffffffffffa49=( a38 + 0x3f3cd0b931fb83ba )&amp;0xffffffffffffffffa50=( a49 + 0x24ace0da2a14ef6d )&amp;0xffffffffffffffffa51=( a47 - a48 )&amp;0xffffffffffffffffa52=(ror( a50 , 0x2e ))&amp;0xffffffffffffffffa53=( a48 - 0x9e69f9d52fe5a72a )&amp;0xffffffffffffffffa54=( a46 ^ a51 )&amp;0xffffffffffffffffa55=(rol( a52 , 0x39 ))&amp;0xffffffffffffffffa56=( a53 - a54 )&amp;0xffffffffffffffffa57=( a51 ^ 0x9f0093fa7d70e962 )&amp;0xffffffffffffffffa58=( a57 - a54 )&amp;0xffffffffffffffffa59=( a55 ^ a56 )&amp;0xffffffffffffffffa60=( a56 + 0x79584d73a695110c )&amp;0xffffffffffffffffa61=( a58 - a59 )&amp;0xffffffffffffffffa62=(rol( a54 , 0x27 ))&amp;0xffffffffffffffffa63=(rol( a59 , 0x37 ))&amp;0xffffffffffffffffa64=( a61 ^ a63 )&amp;0xffffffffffffffffa65=( a63 ^ 0x7b66780079bcf18d )&amp;0xffffffffffffffffa66=( a60 - a64 )&amp;0xffffffffffffffffa67=( a62 + 0x273e52f26ceb226b )&amp;0xffffffffffffffffa68=( a64 ^ 0xa1d8a9d784041e4 )&amp;0xffffffffffffffffa69=( a68 + a67 )&amp;0xffffffffffffffffa70=( a67 + 0x54aca4906a29539b )&amp;0xffffffffffffffffa71=( a65 - a69 )&amp;0xffffffffffffffffa72=( a66 + a71 )&amp;0xffffffffffffffffa73=( a71 + a70 )&amp;0xffffffffffffffffa74=( a70 - 0x982a5ed5ad23b3f5 )&amp;0xffffffffffffffffa75=( a72 + 0x29dd2db2114bf812 )&amp;0xffffffffffffffffa76=( a75 - a73 )&amp;0xffffffffffffffffa77=( a76 ^ a73 )&amp;0xffffffffffffffffa78=(rol( a73 , 0xd ))&amp;0xffffffffffffffffa79=( a77 + 0x14051b581ba4a8ec )&amp;0xffffffffffffffffa80=(ror( a74 , 0x3a ))&amp;0xffffffffffffffffa81=( a69 ^ 0x498e0b410bee2b9e )&amp;0xffffffffffffffffa82=( 0x7d ^ 0x7d )&amp;0xffffffffffffffffa83=( 0x8 ^ 0x8 )&amp;0xffffffffffffffffa84=( a83 ^ a79 )&amp;0xffffffffffffffffa85=( a84 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa86=( a83 ^ a84 )&amp;0xffffffffffffffffa87=( a85 ^ 0xba885960 )&amp;0xffffffffffffffffa88=( a87 ^ a86 )&amp;0xffffffffffffffffa89=( a86 ^ a88 )&amp;0xffffffffffffffffa90=( a88 ^ a89 )&amp;0xffffffffffffffffa91=( a90 ^ 0xefac3c8c )&amp;0xffffffffffffffffa92=( a91 ^ a89 )&amp;0xffffffffffffffffa93=( a89 ^ a92 )&amp;0xffffffffffffffffa94=( a92 ^ a93 )&amp;0xffffffffffffffffa95=( a94 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa96=( a95 ^ a93 )&amp;0xffffffffffffffffa97=( a93 ^ a96 )&amp;0xffffffffffffffffa98=( a96 ^ a97 )&amp;0xffffffffffffffffa99=( a98 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa100=( a99 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa101=( a90 ^ a90 )&amp;0xffffffffffffffffa102=( a101 ^ a100 )&amp;0xffffffffffffffffa103=( a102 ^ a97 )&amp;0xffffffffffffffffa1[0]=a103a104=( a102 ^ a102 )&amp;0xffffffffffffffffa105=( a97 ^ a97 )&amp;0xffffffffffffffffa106=( a105 ^ a81 )&amp;0xffffffffffffffffa107=( a106 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa108=( a105 ^ a106 )&amp;0xffffffffffffffffa109=( a107 ^ 0xba885960 )&amp;0xffffffffffffffffa110=( a109 ^ a108 )&amp;0xffffffffffffffffa111=( a108 ^ a110 )&amp;0xffffffffffffffffa112=( a110 ^ a111 )&amp;0xffffffffffffffffa113=( a112 ^ 0xefac3c8c )&amp;0xffffffffffffffffa114=( a113 ^ a111 )&amp;0xffffffffffffffffa115=( a111 ^ a114 )&amp;0xffffffffffffffffa116=( a114 ^ a115 )&amp;0xffffffffffffffffa117=( a116 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa118=( a117 ^ a115 )&amp;0xffffffffffffffffa119=( a115 ^ a118 )&amp;0xffffffffffffffffa120=( a118 ^ a119 )&amp;0xffffffffffffffffa121=( a120 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa122=( a121 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa123=( a112 ^ a112 )&amp;0xffffffffffffffffa124=( a123 ^ a122 )&amp;0xffffffffffffffffa125=( a124 ^ a119 )&amp;0xffffffffffffffffa1[1]=a125a126=( a124 ^ a124 )&amp;0xffffffffffffffffa127=( a119 ^ a119 )&amp;0xffffffffffffffffa128=( a127 ^ a78 )&amp;0xffffffffffffffffa129=( a128 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa130=( a127 ^ a128 )&amp;0xffffffffffffffffa131=( a129 ^ 0xba885960 )&amp;0xffffffffffffffffa132=( a131 ^ a130 )&amp;0xffffffffffffffffa133=( a130 ^ a132 )&amp;0xffffffffffffffffa134=( a132 ^ a133 )&amp;0xffffffffffffffffa135=( a134 ^ 0xefac3c8c )&amp;0xffffffffffffffffa136=( a135 ^ a133 )&amp;0xffffffffffffffffa137=( a133 ^ a136 )&amp;0xffffffffffffffffa138=( a136 ^ a137 )&amp;0xffffffffffffffffa139=( a138 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa140=( a139 ^ a137 )&amp;0xffffffffffffffffa141=( a137 ^ a140 )&amp;0xffffffffffffffffa142=( a140 ^ a141 )&amp;0xffffffffffffffffa143=( a142 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa144=( a143 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa145=( a134 ^ a134 )&amp;0xffffffffffffffffa146=( a145 ^ a144 )&amp;0xffffffffffffffffa147=( a146 ^ a141 )&amp;0xffffffffffffffffa1[2]=a147a148=( a146 ^ a146 )&amp;0xffffffffffffffffa149=( a141 ^ a141 )&amp;0xffffffffffffffffa150=( a149 ^ a80 )&amp;0xffffffffffffffffa151=( a150 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa152=( a149 ^ a150 )&amp;0xffffffffffffffffa153=( a151 ^ 0xba885960 )&amp;0xffffffffffffffffa154=( a153 ^ a152 )&amp;0xffffffffffffffffa155=( a152 ^ a154 )&amp;0xffffffffffffffffa156=( a154 ^ a155 )&amp;0xffffffffffffffffa157=( a156 ^ 0xefac3c8c )&amp;0xffffffffffffffffa158=( a157 ^ a155 )&amp;0xffffffffffffffffa159=( a155 ^ a158 )&amp;0xffffffffffffffffa160=( a158 ^ a159 )&amp;0xffffffffffffffffa161=( a160 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa162=( a161 ^ a159 )&amp;0xffffffffffffffffa163=( a159 ^ a162 )&amp;0xffffffffffffffffa164=( a162 ^ a163 )&amp;0xffffffffffffffffa165=( a164 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa166=( a165 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa167=( a156 ^ a156 )&amp;0xffffffffffffffffa168=( a167 ^ a166 )&amp;0xffffffffffffffffa169=( a168 ^ a163 )&amp;0xffffffffffffffffa1[3]=a169 然后z3解，异或即可拿到flag 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242from z3 import *a1 = [BitVec((&#x27;%d&#x27; % i), 65) for i in range(4)]x=Solver()def rol(value, shift, bit_width=64): &quot;&quot;&quot; Rotate Left &quot;&quot;&quot; return ((value &lt;&lt; shift) | (value &gt;&gt; (bit_width - shift))) &amp; ((1 &lt;&lt; bit_width) - 1)def ror(value, shift, bit_width=64): &quot;&quot;&quot; Rotate Right &quot;&quot;&quot; return ((value &gt;&gt; shift) | (value &lt;&lt; (bit_width - shift))) &amp; ((1 &lt;&lt; bit_width) - 1)a2=( a1[3] - a1[1] )&amp;0xffffffffffffffffa3=( a1[2] - 0xa5b577c2fb57f719 )&amp;0xffffffffffffffffa4=( a1[0] - a2 )&amp;0xffffffffffffffffa5=( a4 + 0x92bfddfec2f52f3b )&amp;0xffffffffffffffffa6=( a3 ^ 0xcadc9ba99a2ae444 )&amp;0xffffffffffffffffa7=( a2 - 0x37e4241df14718d )&amp;0xffffffffffffffffa8=( a7 ^ a1[1] )&amp;0xffffffffffffffffa9=(rol( a8 , 0x2d ))&amp;0xffffffffffffffffa10=( a9 - a5 )&amp;0xffffffffffffffffa11=( a6 ^ 0xa324444e39c3e7e7 )&amp;0xffffffffffffffffa12=(ror( a5 , 0x2c ))&amp;0xffffffffffffffffa13=(ror( a1[1] , 0x9 ))&amp;0xffffffffffffffffa14=( a12 - a11 )&amp;0xffffffffffffffffa15=( a13 + a11 )&amp;0xffffffffffffffffa16=(ror( a15 , 0x34 ))&amp;0xffffffffffffffffa17=( a11 - 0x5350ea4003b419e1 )&amp;0xffffffffffffffffa18=( a10 - a16 )&amp;0xffffffffffffffffa19=( a18 + a17 )&amp;0xffffffffffffffffa20=( a19 ^ 0x7d27118487b24a4c )&amp;0xffffffffffffffffa21=(rol( a17 , 0x26 ))&amp;0xffffffffffffffffa22=( a20 - a14 )&amp;0xffffffffffffffffa23=( a16 ^ 0xb948cbbf8c616936 )&amp;0xffffffffffffffffa24=(ror( a23 , 0x3c ))&amp;0xffffffffffffffffa25=(rol( a14 , 0x39 ))&amp;0xffffffffffffffffa26=( a25 ^ 0x8c27c187b5925ea7 )&amp;0xffffffffffffffffa27=( a26 - a22 )&amp;0xffffffffffffffffa28=( a24 + a27 )&amp;0xffffffffffffffffa29=( a21 - 0x6011664a1feadd72 )&amp;0xffffffffffffffffa30=( a22 - 0xc6b76b35dc565f4b )&amp;0xffffffffffffffffa31=(rol( a27 , 0x3a ))&amp;0xffffffffffffffffa32=(ror( a28 , 0x38 ))&amp;0xffffffffffffffffa33=( a29 ^ a30 )&amp;0xffffffffffffffffa34=( a33 ^ 0x5d13d65e4a7935dd )&amp;0xffffffffffffffffa35=( a31 ^ a34 )&amp;0xffffffffffffffffa36=(rol( a30 , 0x1e ))&amp;0xffffffffffffffffa37=( a34 ^ 0x78f00494b1fd4117 )&amp;0xffffffffffffffffa38=( a37 + a35 )&amp;0xffffffffffffffffa39=( a32 ^ a35 )&amp;0xffffffffffffffffa40=(rol( a39 , 0xd ))&amp;0xffffffffffffffffa41=( a40 - 0x15a37cdf4f1c5ece )&amp;0xffffffffffffffffa42=(rol( a36 , 0x3f ))&amp;0xffffffffffffffffa43=(rol( a41 , 0x1a ))&amp;0xffffffffffffffffa44=( a42 ^ a35 )&amp;0xffffffffffffffffa45=( a35 - 0x23683b20a006c3f1 )&amp;0xffffffffffffffffa46=( a44 - a45 )&amp;0xffffffffffffffffa47=( a43 - a46 )&amp;0xffffffffffffffffa48=(ror( a45 , 0x2a ))&amp;0xffffffffffffffffa49=( a38 + 0x3f3cd0b931fb83ba )&amp;0xffffffffffffffffa50=( a49 + 0x24ace0da2a14ef6d )&amp;0xffffffffffffffffa51=( a47 - a48 )&amp;0xffffffffffffffffa52=(ror( a50 , 0x2e ))&amp;0xffffffffffffffffa53=( a48 - 0x9e69f9d52fe5a72a )&amp;0xffffffffffffffffa54=( a46 ^ a51 )&amp;0xffffffffffffffffa55=(rol( a52 , 0x39 ))&amp;0xffffffffffffffffa56=( a53 - a54 )&amp;0xffffffffffffffffa57=( a51 ^ 0x9f0093fa7d70e962 )&amp;0xffffffffffffffffa58=( a57 - a54 )&amp;0xffffffffffffffffa59=( a55 ^ a56 )&amp;0xffffffffffffffffa60=( a56 + 0x79584d73a695110c )&amp;0xffffffffffffffffa61=( a58 - a59 )&amp;0xffffffffffffffffa62=(rol( a54 , 0x27 ))&amp;0xffffffffffffffffa63=(rol( a59 , 0x37 ))&amp;0xffffffffffffffffa64=( a61 ^ a63 )&amp;0xffffffffffffffffa65=( a63 ^ 0x7b66780079bcf18d )&amp;0xffffffffffffffffa66=( a60 - a64 )&amp;0xffffffffffffffffa67=( a62 + 0x273e52f26ceb226b )&amp;0xffffffffffffffffa68=( a64 ^ 0xa1d8a9d784041e4 )&amp;0xffffffffffffffffa69=( a68 + a67 )&amp;0xffffffffffffffffa70=( a67 + 0x54aca4906a29539b )&amp;0xffffffffffffffffa71=( a65 - a69 )&amp;0xffffffffffffffffa72=( a66 + a71 )&amp;0xffffffffffffffffa73=( a71 + a70 )&amp;0xffffffffffffffffa74=( a70 - 0x982a5ed5ad23b3f5 )&amp;0xffffffffffffffffa75=( a72 + 0x29dd2db2114bf812 )&amp;0xffffffffffffffffa76=( a75 - a73 )&amp;0xffffffffffffffffa77=( a76 ^ a73 )&amp;0xffffffffffffffffa78=(rol( a73 , 0xd ))&amp;0xffffffffffffffffa79=( a77 + 0x14051b581ba4a8ec )&amp;0xffffffffffffffffa80=(ror( a74 , 0x3a ))&amp;0xffffffffffffffffa81=( a69 ^ 0x498e0b410bee2b9e )&amp;0xffffffffffffffffa82=( 0x7d ^ 0x7d )&amp;0xffffffffffffffffa83=( 0x8 ^ 0x8 )&amp;0xffffffffffffffffa84=( a83 ^ a79 )&amp;0xffffffffffffffffa85=( a84 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa86=( a83 ^ a84 )&amp;0xffffffffffffffffa87=( a85 ^ 0xba885960 )&amp;0xffffffffffffffffa88=( a87 ^ a86 )&amp;0xffffffffffffffffa89=( a86 ^ a88 )&amp;0xffffffffffffffffa90=( a88 ^ a89 )&amp;0xffffffffffffffffa91=( a90 ^ 0xefac3c8c )&amp;0xffffffffffffffffa92=( a91 ^ a89 )&amp;0xffffffffffffffffa93=( a89 ^ a92 )&amp;0xffffffffffffffffa94=( a92 ^ a93 )&amp;0xffffffffffffffffa95=( a94 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa96=( a95 ^ a93 )&amp;0xffffffffffffffffa97=( a93 ^ a96 )&amp;0xffffffffffffffffa98=( a96 ^ a97 )&amp;0xffffffffffffffffa99=( a98 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa100=( a99 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa101=( a90 ^ a90 )&amp;0xffffffffffffffffa102=( a101 ^ a100 )&amp;0xffffffffffffffffa103=( a102 ^ a97 )&amp;0xffffffffffffffffa1[0]=a103a104=( a102 ^ a102 )&amp;0xffffffffffffffffa105=( a97 ^ a97 )&amp;0xffffffffffffffffa106=( a105 ^ a81 )&amp;0xffffffffffffffffa107=( a106 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa108=( a105 ^ a106 )&amp;0xffffffffffffffffa109=( a107 ^ 0xba885960 )&amp;0xffffffffffffffffa110=( a109 ^ a108 )&amp;0xffffffffffffffffa111=( a108 ^ a110 )&amp;0xffffffffffffffffa112=( a110 ^ a111 )&amp;0xffffffffffffffffa113=( a112 ^ 0xefac3c8c )&amp;0xffffffffffffffffa114=( a113 ^ a111 )&amp;0xffffffffffffffffa115=( a111 ^ a114 )&amp;0xffffffffffffffffa116=( a114 ^ a115 )&amp;0xffffffffffffffffa117=( a116 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa118=( a117 ^ a115 )&amp;0xffffffffffffffffa119=( a115 ^ a118 )&amp;0xffffffffffffffffa120=( a118 ^ a119 )&amp;0xffffffffffffffffa121=( a120 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa122=( a121 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa123=( a112 ^ a112 )&amp;0xffffffffffffffffa124=( a123 ^ a122 )&amp;0xffffffffffffffffa125=( a124 ^ a119 )&amp;0xffffffffffffffffa1[1]=a125a126=( a124 ^ a124 )&amp;0xffffffffffffffffa127=( a119 ^ a119 )&amp;0xffffffffffffffffa128=( a127 ^ a78 )&amp;0xffffffffffffffffa129=( a128 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa130=( a127 ^ a128 )&amp;0xffffffffffffffffa131=( a129 ^ 0xba885960 )&amp;0xffffffffffffffffa132=( a131 ^ a130 )&amp;0xffffffffffffffffa133=( a130 ^ a132 )&amp;0xffffffffffffffffa134=( a132 ^ a133 )&amp;0xffffffffffffffffa135=( a134 ^ 0xefac3c8c )&amp;0xffffffffffffffffa136=( a135 ^ a133 )&amp;0xffffffffffffffffa137=( a133 ^ a136 )&amp;0xffffffffffffffffa138=( a136 ^ a137 )&amp;0xffffffffffffffffa139=( a138 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa140=( a139 ^ a137 )&amp;0xffffffffffffffffa141=( a137 ^ a140 )&amp;0xffffffffffffffffa142=( a140 ^ a141 )&amp;0xffffffffffffffffa143=( a142 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa144=( a143 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa145=( a134 ^ a134 )&amp;0xffffffffffffffffa146=( a145 ^ a144 )&amp;0xffffffffffffffffa147=( a146 ^ a141 )&amp;0xffffffffffffffffa1[2]=a147a148=( a146 ^ a146 )&amp;0xffffffffffffffffa149=( a141 ^ a141 )&amp;0xffffffffffffffffa150=( a149 ^ a80 )&amp;0xffffffffffffffffa151=( a150 &gt;&gt; 0x20 )&amp;0xffffffffffffffffa152=( a149 ^ a150 )&amp;0xffffffffffffffffa153=( a151 ^ 0xba885960 )&amp;0xffffffffffffffffa154=( a153 ^ a152 )&amp;0xffffffffffffffffa155=( a152 ^ a154 )&amp;0xffffffffffffffffa156=( a154 ^ a155 )&amp;0xffffffffffffffffa157=( a156 ^ 0xefac3c8c )&amp;0xffffffffffffffffa158=( a157 ^ a155 )&amp;0xffffffffffffffffa159=( a155 ^ a158 )&amp;0xffffffffffffffffa160=( a158 ^ a159 )&amp;0xffffffffffffffffa161=( a160 ^ 0x1e64ba90 )&amp;0xffffffffffffffffa162=( a161 ^ a159 )&amp;0xffffffffffffffffa163=( a159 ^ a162 )&amp;0xffffffffffffffffa164=( a162 ^ a163 )&amp;0xffffffffffffffffa165=( a164 ^ 0xf47c0b5 )&amp;0xffffffffffffffffa166=( a165 &lt;&lt; 0x20 )&amp;0xffffffffffffffffa167=( a156 ^ a156 )&amp;0xffffffffffffffffa168=( a167 ^ a166 )&amp;0xffffffffffffffffa169=( a168 ^ a163 )&amp;0xffffffffffffffffa1[3]=a169x.add(a1[0]==0x7AB48E39E26BE2A7,a1[1]==0x273AED9AEFD29A3C,a1[2]==0xFDF61CB53A00DAA8,a1[3]==0xFC796489FC8864EE)if x.check() == sat: model = x.model() print(model)result=[7850935417204252765,10748619797969932518,7455671181961192085,3228839933601416712]data=[0x28, 0xb1, 0x61, 0x6e, 0x3, 0x8c, 0x55, 0x33, 0xca, 0x5a, 0xbd, 0xa3, 0x8a, 0xce, 0xa3, 0x85, 0x57, 0x13, 0xee, 0x2f, 0x5d, 0xd8, 0x96, 0xfd, 0x73, 0x8c, 0x7b, 0xfb, 0xae, 0xd9, 0xa7, 0x75]xordata=[int.from_bytes(data[i:i+8],&quot;big&quot;) for i in range(0,len(data),8)]import libnumfor i in range(0,len(result)): result[i]^=xordata[i] print(libnum.n2s(result[i]).decode(),end=&quot;&quot;)"},{"title":"DASCTF 2024暑期挑战赛WP","path":"/2024/07/20/DASCTF-2024暑期挑战赛WP/","content":"DosSnake瞪眼一个异或 123456enc=[0x3F, 0x09, 0x63, 0x34, 0x32, 0x13, 0x2A, 0x2F, 0x2A, 0x37, 0x3C, 0x23, 0x00, 0x2E, 0x20, 0x10, 0x3A, 0x27, 0x2F, 0x24, 0x3A, 0x30, 0x75, 0x67, 0x65, 0x3C]key=&quot;DASCTF&quot;for i in range(len(enc)): print(chr(enc[i]^ord(key[i%len(key)])),end=&quot;&quot;) DASCTF{H0wfUnnytheDosSnakeis!!!} Strangeprograme找到DASCTF段，往上跟 先是smc解密DASCTF段代码，然后注册hook 绕反调试 输入后打硬件断点跟到关键代码，魔改tea，照着解密就行 123456789101112131415161718192021222324252627282930313233from ctypes import *import libnumenc=[-7, 77, 43, -68, 19, -35, 19, 98, -55, -4, -1, -119, 125, 79, -55, 15, 99, 29, 109, 82, 80, -3, 65, -29, 51, 118, 40, -105, 56, 54, -7, 107, -112, 57, 20, -125, 44, -30, 44, 31]for i in range(len(enc)): enc[i]&amp;=0xffenc=[0xF9, 0x4D, 0x2B, 0xBC, 0x13, 0xDD, 0x13, 0x62, 0xC9, 0xFC, 0xFF, 0x89, 0x7D, 0x4F, 0xC9, 0x0F, 0x63, 0x1D, 0x6D, 0x52, 0x50, 0xFD, 0x41, 0xE3, 0x33, 0x76, 0x28, 0x97, 0x38, 0x36, 0xF9, 0x6B, 0x90, 0x39, 0x14, 0x83, 0x2C, 0xE2, 0x2C, 0x1F]a1=[int.from_bytes(enc[i:i+4],&quot;little&quot;) for i in range(0,len(enc),4)]a2=[0x12345678, 0x09101112, 0x13141516, 0x15161718]decode=[]v5=c_uint32(0)times=16delta=0x61C88647for k in range(len(a1)-2,-1,-2): decode.append(a1[k+1] ^ a1[1]) decode.append(a1[k] ^ a1[0]) v5=c_uint32(-delta*times) v1=c_uint32(a1[0]) v2=c_uint32(a1[1]) for i in range(times): v5.value += delta v2.value -= (v1.value + v5.value) ^ ((v1.value*16) + a2[2]) ^ ((v1.value &gt;&gt; 5) + a2[3]) # v2.value -= (a2[(v5.value &gt;&gt; 11) &amp; 3] + v5.value) ^ (v1.value + ((v1.value &gt;&gt; 5) ^ (16 * v1.value))) v1.value -= (v2.value + v5.value) ^ ((v2.value*16) + a2[0]) ^ ((v2.value &gt;&gt; 5) + a2[1]) # v1.value -= (a2[(v5.value) &amp; 3] + v5.value) ^ (v2.value + ((v2.value &gt;&gt; 5) ^ (16 * v2.value))) a1[0]=v1.value a1[1]=v2.valuedecode.append(a1[1])decode.append(a1[0])for i in decode[::-1]: print(libnum.n2s(i).decode()[::-1],end=&quot;&quot;) DASCTF{I4TH0ok_I5S0ooFunny_Isnotit?????} BabyAndroid资源文件找到一个Sex.jpg，直接搜 动态加载类，先用rc4解密一下 aes+base64 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import java.nio.charset.StandardCharsets;import java.security.InvalidKeyException;import java.security.NoSuchAlgorithmException;import java.util.Arrays;import java.util.Base64;import javax.crypto.BadPaddingException;import javax.crypto.Cipher;import javax.crypto.IllegalBlockSizeException;import javax.crypto.NoSuchPaddingException;import javax.crypto.spec.SecretKeySpec;public class RC4 &#123; private static final String KEY = &quot;DSACTF&quot;; private static byte[] customHash(String input) &#123; byte[] keyBytes = new byte[16]; int[] temp = new int[16]; for (int i = 0; i &lt; input.length(); i++) &#123; int charVal = input.charAt(i); for (int j = 0; j &lt; 16; j++) &#123; temp[j] = ((temp[j] * 31) + charVal) % 251; &#125; &#125; for (int i2 = 0; i2 &lt; 16; i2++) &#123; keyBytes[i2] = (byte) (temp[i2] % 256); &#125; return keyBytes; &#125; public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException &#123; byte[] keyBytes = customHash(KEY); // Create the secret key spec SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, &quot;AES&quot;); // Initialize the cipher for decryption Cipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;); cipher.init(Cipher.DECRYPT_MODE, secretKeySpec); // Decode the base64 encoded string byte[] encryptedBytes = Base64.getDecoder().decode(&quot;TwMkYUkg4bYsY0hL99ggYWnVjWyXQrWAdNmToB0eBXbS6wBzL6ktorjNWI9VOroTU4HgIUYyzGLpcHzd1zNGT+bFZZI7IoxJwpcgXfdwW1LSmiNSP+PuSUsqAzNclF1nJ07b4tYyLWg0zTypbzWsLhOIM+6uci3RFZLREUCALafi01M8mS+KMNxX1Pyn8mSP+KKKjQ5S5fasHRSn+L9qBFws0mWavpfI0QEiMgarxv0iGhYU8cfgonWyL70RvoXET5VUDP1vfYWIBLzzzaAqLC0OiMtUK3TTATSU7yijdgXm18OKMcGIke/NZIM6Sr5fL3t6psDOOkw2C/5uYrJVPn+D6U9KTL64bgREppDqMOvhvbhtuf/S3ASW/+rhtPMtoaD8FxDg0wWSLZA53fQfNA==&quot;); // Decrypt the data byte[] decryptedBytes = cipher.doFinal(encryptedBytes); // Convert bytes to string and return System.out.println(new String(decryptedBytes)); &#125;&#125;#458.853181,-18.325492,-18.251911,-2.097520,-21.198660,-22.304648,21.103162,-5.786284,-15.248906,15.329286,16.919499,-19.669045,30.928253,-37.588034,-16.593954,-5.505211,3.014744,6.553616,31.131491,16.472500,6.802400,-78.278577,15.280099,3.893073,56.493581,-34.576344,30.146729,4.445671,6.732204 代码中还调用了sendInit，在native层 扔给gpt秒了 123456789101112131415import numpy as npfrom scipy.fftpack import idct# 定义数据数组data = [458.853181, -18.325492, -18.251911, -2.097520, -21.198660, -22.304648, 21.103162, -5.786284, -15.248906, 15.329286, 16.919499, -19.669045, 30.928253, -37.588034, -16.593954, -5.505211, 3.014744, 6.553616, 31.131491, 16.472500, 6.802400, -78.278577, 15.280099, 3.893073, 56.493581, -34.576344, 30.146729, 4.445671, 6.732204]# 计算逆离散余弦变换inverse_dct = idct(data, norm=&#x27;ortho&#x27;)# 打印结果for i in inverse_dct: print(chr(round(i)),end=&quot;&quot;) DASCTF{Y0u_Ar3Re4lly_H@ck3r!}"},{"path":"/about/index.html","content":"从陌生人到陌生人，你用了多久"}]