[{"path":"/2024/06/22/White-box-AES/","content":"����������һ��aesԴ����а׺�aes����import reimport binasciiclass AES:#128-ECB sbox = [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16] s_box = &#123;&#125; ns_box = &#123; &#125; Rcon = &#123; 1: [&#x27;0x01&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;], 2: [&#x27;0x02&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;], 3: [&#x27;0x04&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;], 4: [&#x27;0x08&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;], 5: [&#x27;0x10&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;], 6: [&#x27;0x20&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;], 7: [&#x27;0x40&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;], 8: [&#x27;0x80&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;], 9: [&#x27;0x1B&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;], 10: [&#x27;0x36&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;, &#x27;0x00&#x27;] &#125; Matrix = [ [&#x27;0x02&#x27;, &#x27;0x03&#x27;, &#x27;0x01&#x27;, &#x27;0x01&#x27;], [&#x27;0x01&#x27;, &#x27;0x02&#x27;, &#x27;0x03&#x27;, &#x27;0x01&#x27;], [&#x27;0x01&#x27;, &#x27;0x01&#x27;, &#x27;0x02&#x27;, &#x27;0x03&#x27;], [&#x27;0x03&#x27;, &#x27;0x01&#x27;, &#x27;0x01&#x27;, &#x27;0x02&#x27;] ] ReMatrix = [ [&#x27;0x0e&#x27;, &#x27;0x0b&#x27;, &#x27;0x0d&#x27;, &#x27;0x09&#x27;], [&#x27;0x09&#x27;, &#x27;0x0e&#x27;, &#x27;0x0b&#x27;, &#x27;0x0d&#x27;], [&#x27;0x0d&#x27;, &#x27;0x09&#x27;, &#x27;0x0e&#x27;, &#x27;0x0b&#x27;], [&#x27;0x0b&#x27;, &#x27;0x0d&#x27;, &#x27;0x09&#x27;, &#x27;0x0e&#x27;] ] plaintext = [[], [], [], []] plaintext1 = [[], [], [], []] subkey = [[], [], [], []] def __init__(self, key):#��Կ��չ self.s_box = dict(zip([&quot;0x%02x&quot;%i for i in range(256)], [&quot;0x%02x&quot;%i for i in self.sbox])) self.ns_box = dict(zip(self.s_box.values(), self.s_box.keys())) for i in range(4): for j in range(0, 8, 2): self.subkey[i].append(&quot;0x&quot; + key[i * 8 + j:i * 8 + j + 2]) # print(self.subkey) for i in range(4, 44): if i % 4 != 0: tmp = xor_32(self.subkey[i - 1], self.subkey[i - 4],0) self.subkey.append(tmp) else: # 4�ı�����ʱ��ִ�� tmp1 = self.subkey[i - 1][1:] tmp1.append(self.subkey[i - 1][0]) # print(tmp1) for m in range(4): tmp1[m] = self.s_box[tmp1[m]] # tmp1 = self.s_box[&#x27;cf&#x27;] tmp1 = xor_32(tmp1, self.Rcon[i / 4], 0) self.subkey.append(xor_32(tmp1, self.subkey[i - 4],0)) def AddRoundKey(self, round):#����Կ�� for i in range(4): self.plaintext[i] = xor_32(self.plaintext[i], self.subkey[round * 4 + i],0) # print(&#x27;AddRoundKey&#x27;,self.plaintext) def PlainSubBytes(self): for i in range(4): for j in range(4): self.plaintext[i][j] = self.s_box[self.plaintext[i][j]] # print(&#x27;PlainSubBytes&#x27;,self.plaintext) def RePlainSubBytes(self): for i in range(4): for j in range(4): self.plaintext[i][j] = self.ns_box[self.plaintext[i][j]] def ShiftRows(self):#����λ p1, p2, p3, p4 = self.plaintext[0][1], self.plaintext[1][1], self.plaintext[2][1], self.plaintext[3][1] self.plaintext[0][1] = p2 self.plaintext[1][1] = p3 self.plaintext[2][1] = p4 self.plaintext[3][1] = p1 p1, p2, p3, p4 = self.plaintext[0][2], self.plaintext[1][2], self.plaintext[2][2], self.plaintext[3][2] self.plaintext[0][2] = p3 self.plaintext[1][2] = p4 self.plaintext[2][2] = p1 self.plaintext[3][2] = p2 p1, p2, p3, p4 = self.plaintext[0][3], self.plaintext[1][3], self.plaintext[2][3], self.plaintext[3][3] self.plaintext[0][3] = p4 self.plaintext[1][3] = p1 self.plaintext[2][3] = p2 self.plaintext[3][3] = p3 # print(&#x27;ShiftRows&#x27;,self.plaintext) def ReShiftRows(self): p1, p2, p3, p4 = self.plaintext[0][1], self.plaintext[1][1], self.plaintext[2][1], self.plaintext[3][1] self.plaintext[3][1] = p3 self.plaintext[2][1] = p2 self.plaintext[0][1] = p4 self.plaintext[1][1] = p1 p1, p2, p3, p4 = self.plaintext[0][2], self.plaintext[1][2], self.plaintext[2][2], self.plaintext[3][2] self.plaintext[0][2] = p3 self.plaintext[1][2] = p4 self.plaintext[2][2] = p1 self.plaintext[3][2] = p2 p1, p2, p3, p4 = self.plaintext[0][3], self.plaintext[1][3], self.plaintext[2][3], self.plaintext[3][3] self.plaintext[0][3] = p2 self.plaintext[1][3] = p3 self.plaintext[2][3] = p4 self.plaintext[3][3] = p1 def MixColumns(self):#�л��� for i in range(4): for j in range(4): self.plaintext1[i].append(MatrixMulti(self.Matrix[j], self.plaintext[i])) # print(&#x27;MixColumns&#x27;,self.plaintext1) def ReMixColumns(self): for i in range(4): for j in range(4): self.plaintext1[i].append(MatrixMulti(self.ReMatrix[j], self.plaintext[i])) def AESEncryption(self, plaintext,wb): self.plaintext = [[], [], [], []] for i in range(4): for j in range(0, 8, 2): self.plaintext[i].append(&quot;0x&quot; + plaintext[i * 8 + j:i * 8 + j + 2]) self.AddRoundKey(0) for i in range(9): if wb!=-1 and i==8: self.plaintext[wb//4][wb%4]=&#x27;0x01&#x27; self.PlainSubBytes() self.ShiftRows() self.MixColumns() self.plaintext = self.plaintext1 self.plaintext1 = [[], [], [], []] self.AddRoundKey(i + 1) self.PlainSubBytes() self.ShiftRows() self.AddRoundKey(10) return Matrixtostr(self.plaintext) def AESDecryption(self, cipher): self.plaintext = [[], [], [], []] for i in range(4): for j in range(0, 8, 2): self.plaintext[i].append(&#x27;0x&#x27; + cipher[i * 8 + j:i * 8 + j + 2]) # print(self.ns_box) self.AddRoundKey(10) for i in range(9): self.ReShiftRows() self.RePlainSubBytes() self.AddRoundKey(9-i) self.ReMixColumns() self.plaintext = self.plaintext1 self.plaintext1 = [[], [], [], []] self.ReShiftRows() self.RePlainSubBytes() self.AddRoundKey(0) return Matrixtostr(self.plaintext) def Encryption(self, text,wb=-1): group = PlaintextGroup(TextToByte(text), 32, 1) # print(group) cipher = &quot;&quot; for i in range(len(group)): cipher = cipher + self.AESEncryption(group[i],wb) return cipher def Decryption(self, cipher): group = PlaintextGroup(cipher, 32, 0) # print(group) text = &#x27;&#x27; for i in range(len(group)): text = text + self.AESDecryption(group[i]) text = ByteToText(text) return textdef xor_32(start, end, key): a = [] for i in range(0, 4): xor_tmp = &quot;&quot; b = hextobin(start[i]) c = hextobin(end[i]) d = bin(key)[2:].rjust(8,&#x27;0&#x27;) for j in range(8): tmp = int(b[j], 10) ^ int(c[j], 10) ^ int(d[j],10) xor_tmp += str(tmp ) a.append(bintohex(xor_tmp)) return adef xor_8(begin, end): xor_8_tmp = &quot;&quot; for i in range(8): xor_8_tmp += str(int(begin[i]) ^ int(end[i])) return xor_8_tmpdef hextobin(word): word = bin(int(word, 16))[2:] for i in range(0, 8-len(word)): word = &#x27;0&#x27;+word return worddef bintohex(word): word = hex(int(word, 2)) if len(word) == 4: return word elif len(word) &lt; 4: return word.replace(&#x27;x&#x27;, &#x27;x0&#x27;)def MatrixMulti(s1, s2): result = [] s3 = [] for i in range(4): s3.append(hextobin(s2[i])) for i in range(4): result.append(MultiProcess(int(s1[i], 16), s3[i])) for i in range(3): result[0] = xor_8(result[0], result[i+1]) return bintohex(result[0])def MultiProcess(a, b): if a == 1: return b elif a == 2: if b[0] == &#x27;0&#x27;: b = b[1:] + &#x27;0&#x27; else: b = b[1:] + &#x27;0&#x27; b = xor_8(b, &#x27;00011011&#x27;) return b elif a == 3: tmp_b = b if b[0] == &#x27;0&#x27;: b = b[1:] + &#x27;0&#x27; else: b = b[1:] + &#x27;0&#x27; b = xor_8(b, &#x27;00011011&#x27;) return xor_8(b, tmp_b) elif a == 9: tmp_b = b return xor_8(tmp_b, MultiProcess(2, MultiProcess(2, MultiProcess(2, b)))) elif a == 11: tmp_b = b return xor_8(tmp_b, xor_8(MultiProcess(2, MultiProcess(2, MultiProcess(2, b))), MultiProcess(2, b))) elif a == 13: tmp_b = b return xor_8(tmp_b, xor_8(MultiProcess(2, MultiProcess(2, MultiProcess(2, b))), MultiProcess(2, MultiProcess(2, b)))) elif a == 14: return xor_8(MultiProcess(2, b), xor_8(MultiProcess(2, MultiProcess(2, MultiProcess(2, b))), MultiProcess(2, MultiProcess(2, b))))def Matrixtostr(matrix): result = &quot;&quot; for i in range(4): for j in range(4): result += matrix[i][j][2:] return resultdef PlaintextGroup(plaintext, length, flag): group = re.findall(&#x27;.&#123;&#x27;+str(length)+&#x27;&#125;&#x27;, plaintext) group.append(plaintext[len(group)*length:]) if group[-1] == &#x27;&#x27; and flag: group[-1] = &#x27;16161616161616161616161616161616&#x27; elif len(group[-1]) &lt; length and flag: tmp = int((length-len(group[-1])) / 2) if tmp &lt; 10: for i in range(tmp): group[-1] = group[-1] + &#x27;0&#x27;+str(tmp) else: for i in range(tmp): group[-1] = group[-1] + str(tmp) elif not flag: del group[-1] return group#�ַ���ת16����def TextToByte(words): text = words.encode(&#x27;utf-8&#x27;).hex() return textdef ByteToText(encode): tmp = int(encode[-2:]) word = &#x27;&#x27; for i in range(len(encode)-tmp*2): word = word + encode[i] # print(word) word = bytes.decode(binascii.a2b_hex(word)) return word#�ֽڷ������def xorbytes(bytes1,bytes2): length=min(len(bytes1),len(bytes2)) output=bytearray() for i in range(length): output.append(bytes1[i]^bytes2[i]) return bytes(output)key = &#x27;&#x27;for i in &quot;16uopAJc9tgxYSWO&quot;: key+=hex(ord(i))[2:].rjust(2,&quot;0&quot;)A1 = AES(key)print(A1.Encryption(&quot;asdfghjklasdfghj&quot;)[0:32])for i in range(16): print(A1.Encryption(&quot;asdfghjklasdfghj&quot;,i)[0:32]) ������Կ:16uopAJc9tgxYSWO��3136756f70414a63397467785953574f�� ����Ӧ�õ�����֪����Կ��ֵ��ͨ��DAF������ԭ��Կ �ڵ�9�ּ���ʱ����ȱ�����ݣ��ı����ĵ�һ���ֽڣ� ��ȡ��ȷ���ĺ͹���ȱ������ʱ�����ģ���Ҫ������16���ֽڶ�����һ�ι���ȱ������ ���׿���ÿһ�鹹��ȱ�����ݵõ������ĺ���ȷ������ֻ��4���ֽڲ�ͬ ͨ����õ�1+16������ͨ��phoenixAES��ȡ��ʮ����Կ 12345678910111213141516171819202122232425import phoenixAESdata = &quot;&quot;&quot;6c2baf57aeb663a830eaee17bcdb5894d32baf57aeb6637a30ea0c17bc2458946c2baff2aeb623a83018ee17b9db58946c2b6157ae0063a8e3eaee17bcdb583c6c71af579cb663a830eaee3abcdb6a946ca5af57f1b663a830eaeebbbcdbff94972baf57aeb6634530ea8d17bcd158946c2baf8baeb6dba83095ee17f1db58946c2b1b57ae7563a8f3eaee17bcdb580d6c2b3c57ae9d63a867eaee17bcdb584f6ccfaf57adb663a830eaee4fbcdb3d949b2baf57aeb663af30ead717bc8058946c2baf67aeb65ea83086ee17eddb58946c2baf29aeb637a8304aee170adb58946c2b4357ae9463a892eaee17bcdb58b86c9eaf572eb663a830eaeeaebcdb2e94fe2baf57aeb6639a30eae917bcb55894&quot;&quot;&quot;with open(&#x27;crackfile&#x27;, &#x27;w&#x27;) as fp: fp.write(data)phoenixAES.crack_file(&#x27;crackfile&#x27;, [], True, False, verbose=2) �����������ݱ�ʾ�ɹ���ȡ��ʮ�ֵ���Կ Ȼ����Stark��ԭԭʼ��Կ ���ֳɹ���ԭ��ԭʼ��Կ"}]